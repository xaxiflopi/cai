{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cybersecurity AI (<code>CAI</code>)","text":"<p>A lightweight, ergonomic framework for building bug bounty-ready Cybersecurity AIs (CAIs).</p> <p> </p> CAI with <code>alias0</code> on ROS message injection attacks in MiR-100 robot CAI with <code>alias0</code> on API vulnerability discovery at Mercado Libre CAI on JWT@PortSwigger CTF \u2014 Cybersecurity AI CAI on HackableII Boot2Root CTF \u2014 Cybersecurity AI"},{"location":"#milestones","title":"\ud83c\udfaf Milestones","text":""},{"location":"#package-attributes","title":"\ud83d\udce6 Package Attributes","text":"<p>\u26a0\ufe0f CAI is in active development, so don't expect it to work flawlessly. Instead, contribute by raising an issue or sending a PR.</p> <p>Access to this library and the use of information, materials (or portions thereof), is not intended, and is prohibited, where such access or use violates applicable laws or regulations. By no means the authors encourage or promote the unauthorized tampering with running systems. This can cause serious human harm and material damages.</p> <p>By no means the authors of CAI encourage or promote the unauthorized tampering with compute systems. Please don't use the source code in here for cybercrime. Pentest for good instead. By downloading, using, or modifying this source code, you agree to the terms of the <code>LICENSE</code> and the limitations outlined in the <code>DISCLAIMER</code> file.</p>"},{"location":"#motivation","title":"Motivation","text":""},{"location":"#why-cai","title":"Why CAI?","text":"<p>The cybersecurity landscape is undergoing a dramatic transformation as AI becomes increasingly integrated into security operations. We predict that by 2028, AI-powered security testing tools will outnumber human pentesters. This shift represents a fundamental change in how we approach cybersecurity challenges. AI is not just another tool - it's becoming essential for addressing complex security vulnerabilities and staying ahead of sophisticated threats. As organizations face more advanced cyber attacks, AI-enhanced security testing will be crucial for maintaining robust defenses.</p> <p>This work builds upon prior efforts[1] and similarly, we believe that democratizing access to advanced cybersecurity AI tools is vital for the entire security community. That's why we're releasing Cybersecurity AI (<code>CAI</code>) as an open source framework. Our goal is to empower security researchers, ethical hackers, and organizations to build and deploy powerful AI-driven security tools. By making these capabilities openly available, we aim to level the playing field and ensure that cutting-edge security AI technology isn't limited to well-funded private companies or state actors.</p> <p>Bug Bounty programs have become a cornerstone of modern cybersecurity, providing a crucial mechanism for organizations to identify and fix vulnerabilities in their systems before they can be exploited. These programs have proven highly effective at securing both public and private infrastructure, with researchers discovering critical vulnerabilities that might have otherwise gone unnoticed. CAI is specifically designed to enhance these efforts by providing a lightweight, ergonomic framework for building specialized AI agents that can assist in various aspects of Bug Bounty hunting - from initial reconnaissance to vulnerability validation and reporting. Our framework aims to augment human expertise with AI capabilities, helping researchers work more efficiently and thoroughly in their quest to make digital systems more secure.</p>"},{"location":"#ethical-principles-behind-cai","title":"Ethical principles behind CAI","text":"<p>You might be wondering if releasing CAI in-the-wild given its capabilities and security implications is ethical. Our decision to open-source this framework is guided by two core ethical principles:</p> <ol> <li> <p>Democratizing Cybersecurity AI: We believe that advanced cybersecurity AI tools should be accessible to the entire security community, not just well-funded private companies or state actors. By releasing CAI as an open source framework, we aim to empower security researchers, ethical hackers, and organizations to build and deploy powerful AI-driven security tools, leveling the playing field in cybersecurity.</p> </li> <li> <p>Transparency in AI Security Capabilities: Based on our research results, understanding of the technology, and dissection of top technical reports, we argue that current LLM vendors are undermining their cybersecurity capabilities. This is extremely dangerous and misleading. By developing CAI openly, we provide a transparent benchmark of what AI systems can actually do in cybersecurity contexts, enabling more informed decisions about security postures.</p> </li> </ol> <p>CAI is built on the following core principles:</p> <ul> <li>Cybersecurity oriented AI framework: CAI is specifically designed for cybersecurity use cases, aiming at semi- and fully-automating offensive and defensive security tasks.</li> <li>Open source, free for research: CAI is open source and free for research purposes. We aim at democratizing access to AI and Cybersecurity. For professional or commercial use, including on-premise deployments, dedicated technical support and custom extensions reach out to obtain a license.</li> <li>Lightweight: CAI is designed to be fast, and easy to use.</li> <li>Modular and agent-centric design: CAI operates on the basis of agents and agentic patterns, which allows flexibility and scalability. You can easily add the most suitable agents and pattern for your cybersecurity target case.</li> <li>Tool-integration: CAI integrates already built-in tools, and allows the user to integrate their own tools with their own logic easily.</li> <li>Logging and tracing integrated: using <code>phoenix</code>, the open source tracing and logging tool for LLMs. This provides the user with a detailed traceability of the agents and their execution.</li> <li>Multi-Model Support: more than 300 supported and empowered by LiteLLM. The most popular providers:</li> </ul>"},{"location":"#popular-model-providers","title":"Popular Model Providers","text":"<ul> <li>Anthropic: <code>Claude 3.7</code>, <code>Claude 3.5</code>, <code>Claude 3</code>, <code>Claude 3 Opus</code></li> <li>OpenAI: <code>O1</code>, <code>O1 Mini</code>, <code>O3 Mini</code>, <code>GPT-4o</code>, <code>GPT-4.5 Preview</code></li> <li>DeepSeek: <code>DeepSeek V3</code>, <code>DeepSeek R1</code></li> <li>Ollama: <code>Qwen2.5 72B</code>, <code>Qwen2.5 14B</code>, And many more</li> </ul>"},{"location":"#closed-source-alternatives","title":"Closed-source alternatives","text":"<p>Cybersecurity AI is a critical field, yet many groups are misguidedly pursuing it through closed-source methods for pure economic return, leveraging similar techniques and building upon existing closed-source (often third-party owned) models. This approach not only squanders valuable engineering resources but also represents an economic waste and results in redundant efforts, as they often end up reinventing the wheel. Here are some of the closed-source initiatives we keep track of and attempting to leverage genAI and agentic frameworks in cybersecurity AI:</p> <ul> <li>Runsybil</li> <li>Selfhack</li> <li>Sxipher (seems discontinued)</li> <li>Staris</li> <li>Terra Security</li> <li>Xint</li> <li>XBOW</li> <li>ZeroPath</li> <li>Zynap</li> </ul> <p>[1] Deng, G., Liu, Y., Mayoral-Vilches, V., Liu, P., Li, Y., Xu, Y., ... &amp; Rass, S. (2024). {PentestGPT}: Evaluating and harnessing large language models for automated penetration testing. In 33rd USENIX Security Symposium (USENIX Security 24) (pp. 847-864).</p>"},{"location":"#citation","title":"Citation","text":"<p>If you want to cite our work, please use the following:</p> <pre><code>@misc{mayoralvilches2025caiopenbugbountyready,\n      title={CAI: An Open, Bug Bounty-Ready Cybersecurity AI},\n      author={V\u00edctor Mayoral-Vilches and Luis Javier Navarrete-Lozano and Mar\u00eda Sanz-G\u00f3mez and Lidia Salas Espejo and Marti\u00f1o Crespo-\u00c1lvarez and Francisco Oca-Gonzalez and Francesco Balassone and Alfonso Glera-Pic\u00f3n and Unai Ayucar-Carbajo and Jon Ander Ruiz-Alcalde and Stefan Rass and Martin Pinzger and Endika Gil-Uriarte},\n      year={2025},\n      eprint={2504.06017},\n      archivePrefix={arXiv},\n      primaryClass={cs.CR},\n      url={https://arxiv.org/abs/2504.06017},\n}\n</code></pre> <pre><code>@misc{mayoralvilches2025cybersecurityaidangerousgap,\n      title={Cybersecurity AI: The Dangerous Gap Between Automation and Autonomy}, \n      author={V\u00edctor Mayoral-Vilches},\n      year={2025},\n      eprint={2506.23592},\n      archivePrefix={arXiv},\n      primaryClass={cs.CR},\n      url={https://arxiv.org/abs/2506.23592}, \n}\n</code></pre>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>CAI was initially developed by Alias Robotics and co-funded by the European EIC accelerator project RIS (GA 101161136) - HORIZON-EIC-2023-ACCELERATOR-01 call. The original agentic principles are inspired from OpenAI's <code>swarm</code> library and translated into newer prototypes. This project also makes use of other relevant open source building blocks including <code>LiteLLM</code>, and <code>phoenix</code>.</p>"},{"location":"agents/","title":"Agents","text":"<p>Agents are the core of CAI. An agent uses Large Language Models (LLMs), configured with instructions and tools. Each agent is defined in its own <code>.py</code> file in <code>src/cai/agents</code>.</p>"},{"location":"agents/#basic-configuration","title":"Basic configuration","text":"<p>Key agent properties include:</p> <ul> <li><code>name</code>: of the agent e.g. the name of <code>one_tool_agent</code> is 'CTF Agent'.</li> <li><code>instructions</code>: known as the system prompt.</li> <li><code>model</code>: which LLM to use, and optional <code>model_settings</code> to configure their parameters like temperature, top_p, etc.</li> <li><code>tools</code>: Tools that the agent can use to achieve its tasks.</li> <li><code>handoffs</code>: wich allows an agent to delegate tasks to another agent.</li> </ul>"},{"location":"agents/#example-one_tool_agentpy","title":"Example: <code>one_tool_agent.py</code>","text":"<pre><code>from cai.sdk.agents import Agent, OpenAIChatCompletionsModel\nfrom cai.tools.reconnaissance.generic_linux_command import generic_linux_command \nfrom openai import AsyncOpenAI\n\none_tool_agent = Agent(\n    name=\"CTF agent\",\n    description=\"Agent focused on conquering security challenges using generic linux commands\",\n    instructions=\"You are a Cybersecurity expert Leader facing a CTF challenge.\",\n    tools=[\n        generic_linux_command,\n    ],\n    model=OpenAIChatCompletionsModel(\n        model=\"qwen2.5:14b\",\n        openai_client=AsyncOpenAI(),\n    )\n)\n</code></pre>"},{"location":"agents/#context","title":"Context","text":"<p>There are two main context types. See context for details.</p> <p>Agents are generic on their <code>context</code> type. Context is a dependency-injection tool: it's an object you create and pass to <code>Runner.run()</code>, that is passed to every agent, tool, handoff etc, and it serves as a grab bag of dependencies and state for the agent run. You can provide any Python object as the context.</p> <pre><code>@dataclass\nclass SecurityContext:\n  target_system: str\n  is_compromised: bool\n\n  async def get_exploits() -&gt; list[Exploits]:\n     return ...\n\nagent = Agent[SecurityContext](\n    ...,\n)\n</code></pre>"},{"location":"agents/#output-types","title":"Output types","text":"<p>By default, agents produce plain text (i.e. <code>str</code>) outputs. If you want the agent to produce a particular type of output, you can use the <code>output_type</code> parameter. A common choice is to use Pydantic objects, but we support any type that can be wrapped in a Pydantic TypeAdapter - dataclasses, lists, TypedDict, etc.</p> <pre><code>from pydantic import BaseModel\nfrom cai.sdk.agents import Agent\n\nclass SecurityVulnerability(BaseModel):\n    name: str\n    severity: str\n    affected_files: list[str]\n    description: str\n\nagent = Agent(\n    name=\"Vulnerability scanner\",\n    instructions=\"Analyze system output and identify security vulnerabilities\",\n    output_type=SecurityVulnerability,\n)\n</code></pre> <p>Note</p> <p>When you pass an <code>output_type</code>, that tells the model to use structured outputs instead of regular plain text responses.</p>"},{"location":"agents/#handoffs","title":"Handoffs","text":"<p>Handoffs are sub-agents that the agent can delegate to. You provide a list of handoffs, and the agent can choose to delegate to them if relevant. This is a powerful pattern that allows orchestrating modular, specialized agents that excel at a single task. Read more in the handoffs documentation.</p> <pre><code>from cai.sdk.agents import Agent\n\ncrypto_agent = Agent(\n    name=\"Cryptography agent\",\n    description=\"Agent specialized in solving cryptographic challenges and decoding encrypted messages\",\n    instructions=\"Analyze encrypted data and apply cryptographic techniques to decode it.\",\n    tools=[\n        execute_cli_command,\n    ],\n    handoff_description=\"Specialized agent in Cryptography and code breaking\",\n    model=OpenAIChatCompletionsModel(\n        model=os.getenv('CAI_MODEL', \"qwen2.5:14b\"),\n        openai_client=AsyncOpenAI(),\n    )\n)\nnetwork_agent = Agent(\n    name=\"Network Agent\",\n    description=\"Agent specialized in network analysis, packet inspection, and network security assessments\",\n    instructions=\"Analyze network traffic, identify suspicious patterns, and help with network-related CTF challenges\",\n    handoff_description=\"Specialized agent in network security, traffic analysis, and protocol understanding\",\n    model=OpenAIChatCompletionsModel(\n        model=os.getenv('CAI_MODEL', \"qwen2.5:72b\"),\n        openai_client=AsyncOpenAI(),\n    )\n)\nlead_agent = Agent(\n    name=\"Cybersecurity Lead Agent\",\n    instructions=(\n        \"You are a lead cybersecurity expert coordinating security operations.\"\n        \"If the user needs network analysis or traffic inspection, handoff to the network agent.\"\n        \"If the user needs cryptographic solutions or code breaking, handoff to the crypto agent.\"\n    ),\n    handoffs=[network_agent, crypto_agent],\n    model=\"qwen2.5:72b\"\n)\n</code></pre>"},{"location":"agents/#dynamic-instructions","title":"Dynamic instructions","text":"<p>In most cases, you can provide instructions when you create the agent. However, you can also provide dynamic instructions via a function. The function will receive the agent and context, and must return the prompt. Both regular and <code>async</code> functions are accepted.</p> <pre><code>def dynamic_instructions(\n    context: RunContextWrapper[UserContext], agent: Agent[UserContext]\n) -&gt; str:\n    security_level = \"high\" if context.context.is_admin else \"standard\"\n    return f\"You are assisting {context.context.name} with cybersecurity operations. Their security clearance level is {security_level}. Tailor your security recommendations appropriately and prioritize addressing their immediate security concerns.\"\n\n\nagent = Agent[UserContext](\n    name=\"Cybersecurity Triage Agent\",\n    instructions=dynamic_instructions,\n)\n</code></pre>"},{"location":"agents/#next-steps","title":"Next steps","text":"<ul> <li> <p>For running agents, see running_agents documentation. </p> </li> <li> <p>For understanding what it returns, see results documentation. </p> </li> <li> <p>For connecting Agents to external tools (Model Context Protocol), see mcp documentation.</p> </li> </ul>"},{"location":"cai_architecture/","title":"Architecture","text":"<p>CAI focuses on making cybersecurity agent coordination and execution lightweight, highly controllable, and useful for humans. To do so it builds upon 7 pillars: <code>Agent</code>s, <code>Tools</code>, <code>Handoffs</code>, <code>Patterns</code>, <code>Turns</code>, <code>Tracing</code> and <code>HITL</code>.</p> <pre><code>                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                  \u2502      HITL     \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502   Turns   \u2502\n                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Patterns \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  Handoffs \u2502\u25c0\u2500\u2500\u2500\u2500\u25b6 \u2502   Agents  \u2502\u25c0\u2500\u2500\u2500\u2500\u25b6\u2502    LLMs   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502                   \u2502\n                          \u2502                   \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Extensions \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  Tracing  \u2502       \u2502   Tools   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                              \u2502\n                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                          \u25bc             \u25bc          \u25bc             \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 LinuxCmd  \u2502\u2502 WebSearch \u2502\u2502    Code    \u2502\u2502 SSHTunnel \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>If you want to dive deeper into the code, check the following files as a start point for using CAI:</p> <pre><code>cai\n\u251c\u2500\u2500 benchmarks \n\u251c\u2500\u2500 ci  \n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 examples                     # Basic use of CAI for start building on your own\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 cai\n\u2502        \u251c\u2500\u2500 __init__.py\n\u2502        \u251c\u2500\u2500 agents\n\u2502        \u2502   \u251c\u2500\u2500 one_tool.py     # Agent definitions, one agent per file\n\u2502        \u2502   \u2514\u2500\u2500 patterns\n\u2502        \u251c\u2500\u2500 cli.py              # Entrypoint for CLI\n\u2502        \u251c\u2500\u2500 prompts\n\u2502        \u251c\u2500\u2500 repl                # CLI aesthetics and commands\n\u2502        \u2502   \u251c\u2500\u2500 commands\n\u2502        \u2502   \u2514\u2500\u2500 ui\n\u2502        \u251c\u2500\u2500 sdk                 # Necessary class for chat completions\n\u2502        \u2502   \u2514\u2500\u2500 agents \n\u2502        \u2502       \u2514\u2500\u2500 model             \n\u2502        \u251c\u2500\u2500 tools               # Agent tools\n\u2502        \u2502   \u2514\u2500\u2500common.py\n\u2502        \u2514\u2500\u2500 util.py             # Utility functions\n\u251c\u2500\u2500 tests\n\u2514\u2500\u2500 tools                        # Usable tools\n</code></pre>"},{"location":"cai_architecture/#agent","title":"\ud83d\udd39 Agent","text":"<p>At its core, CAI abstracts its cybersecurity behavior via <code>Agents</code> and agentic <code>Patterns</code>. An Agent in an intelligent system that interacts with some environment. More technically, within CAI we embrace a robotics-centric definition wherein an agent is anything that can be viewed as a system perceiving its environment through sensors, reasoning about its goals and and acting accordingly upon that environment through actuators (adapted from Russel &amp; Norvig, AI: A Modern Approach). In cybersecurity, an <code>Agent</code> interacts with systems and networks, using peripherals and network interfaces as sensors, reasons accordingly and then executes network actions as if actuators. Correspondingly, in CAI, <code>Agent</code>s implement the <code>ReACT</code> (Reasoning and Action) agent model[3].</p> <p>For more details, including examples and implementation guidance, see the Agents documentation.</p>"},{"location":"cai_architecture/#tools","title":"\ud83d\udd39 Tools","text":"<p><code>Tools</code> let cybersecurity agents take actions by providing interfaces to execute system commands, run security scans, analyze vulnerabilities, and interact with target systems and APIs - they are the core capabilities that enable CAI agents to perform security tasks effectively; in CAI, tools include built-in cybersecurity utilities (like LinuxCmd for command execution, WebSearch for OSINT gathering, Code for dynamic script execution, and SSHTunnel for secure remote access), function calling mechanisms that allow integration of any Python function as a security tool, and agent-as-tool functionality that enables specialized security agents (such as reconnaissance or exploit agents) to be used by other agents, creating powerful collaborative security workflows without requiring formal handoffs between agents.</p> <p>You may find different tools. They are grouped in 6 major categories inspired by the security kill chain[2]:</p> <ol> <li>Reconnaissance and weaponization - reconnaissance  (crypto, listing, etc)</li> <li>Exploitation - exploitation</li> <li>Privilege escalation - escalation</li> <li>Lateral movement - lateral</li> <li>Data exfiltration - exfiltration</li> <li>Command and control - control</li> </ol> <p>For more information, examples, and implementation details, please refer to the Tools documentation.</p>"},{"location":"cai_architecture/#patterns","title":"\ud83d\udd39 Patterns","text":"<p>An agentic <code>Pattern</code> is a structured design paradigm in artificial intelligence systems where autonomous or semi-autonomous agents operate within a defined interaction framework (the pattern) to achieve a goal. These <code>Patterns</code> specify the organization, coordination, and communication methods among agents, guiding decision-making, task execution, and delegation.</p> <p>An agentic pattern (<code>AP</code>) can be formally defined as a tuple:</p> <p>\\[ AP = (A, H, D, C, E) \\]</p> <p>wherein:</p> <ul> <li>\\(A\\) (Agents): A set of autonomous entities, \\( A = \\{a_1, a_2, ..., a_n\\} \\), each with defined roles, capabilities, and internal states.</li> <li>\\(H\\) (Handoffs): A function \\( H: A \\times T \\to A \\) that governs how tasks \\( T \\) are transferred between agents based on predefined logic (e.g., rules, negotiation, bidding).</li> <li>\\(D\\) (Decision Mechanism): A decision function \\( D: S \\to A \\) where \\( S \\) represents system states, and \\( D \\) determines which agent takes action at any given time.</li> <li>\\(C\\) (Communication Protocol): A messaging function \\( C: A \\times A \\to M \\), where \\( M \\) is a message space, defining how agents share information.</li> <li>\\(E\\) (Execution Model): A function \\( E: A \\times I \\to O \\) where \\( I \\) is the input space and \\( O \\) is the output space, defining how agents perform tasks.</li> </ul> <p>When building <code>Patterns</code>, we generall y classify them among one of the following categories, though others exist:</p> Agentic <code>Pattern</code> categories Description <code>Swarm</code> (Decentralized) Agents share tasks and self-assign responsibilities without a central orchestrator. Handoffs occur dynamically. An example of a peer-to-peer agentic pattern is the <code>CTF Agentic Pattern</code>, which involves a team of agents working together to solve a CTF challenge with dynamic handoffs. <code>Hierarchical</code> A top-level agent (e.g., \"PlannerAgent\") assigns tasks via structured handoffs to specialized sub-agents. Alternatively, the structure of the agents is harcoded into the agentic pattern with pre-defined handoffs. <code>Chain-of-Thought</code> (Sequential Workflow) A structured pipeline where Agent A produces an output, hands it to Agent B for reuse or refinement, and so on. Handoffs follow a linear sequence. An example of a chain-of-thought agentic pattern is the <code>ReasonerAgent</code>, which involves a Reasoning-type LLM that provides context to the main agent to solve a CTF challenge with a linear sequence.[1] <code>Auction-Based</code> (Competitive Allocation) Agents \"bid\" on tasks based on priority, capability, or cost. A decision agent evaluates bids and hands off tasks to the best-fit agent. <code>Recursive</code> A single agent continuously refines its own output, treating itself as both executor and evaluator, with handoffs (internal or external) to itself. An example of a recursive agentic pattern is the <code>CodeAgent</code> (when used as a recursive agent), which continuously refines its own output by executing code and updating its own instructions. <code>Parallelization</code> Multiple agents run in parallel, each handling different subtasks or independent inputs simultaneously. This approach speeds up processing when tasks do not depend on each other. For example, you can launch several agents to analyze different log files or scan multiple IP addresses at the same time, leveraging concurrency to improve efficiency. <p>Moreover in this new version we could orchestrate agents and add decision mechanism in several ways. See Orchestrating multiple agents</p>"},{"location":"cai_architecture/#turns","title":"\ud83d\udd39 Turns","text":"<p>During the agentic flow (conversation), we distinguish between interactions and turns.</p> <ul> <li>Interactions are sequential exchanges between one or multiple agents. Each agent executing its logic corresponds with one interaction. Since an <code>Agent</code> in CAI generally implements the <code>ReACT</code> agent model[3], each interaction consists of 1) a reasoning step via an LLM inference and 2) act by calling zero-to-n <code>Tools</code>. </li> <li>Turns: A turn represents a cycle of one ore more interactions which finishes when the <code>Agent</code> (or <code>Pattern</code>) executing returns <code>None</code>, judging there're no further actions to undertake.</li> </ul> <p>CAI Agents are not related to Assistants in the Assistants API. They are named similarly for convenience, but are otherwise completely unrelated. CAI is entirely powered by the Chat Completions API and is hence stateless between calls.</p>"},{"location":"cai_architecture/#tracing","title":"\ud83d\udd39 Tracing","text":"<p>\u26a0\ufe0f TRACING IS STILL IN PROGRESS</p>"},{"location":"cai_architecture/#human-in-the-loop-hitl","title":"\ud83d\udd39 Human-In-The-Loop (HITL)","text":"<pre><code>                      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                      \u2502                                 \u2502\n                      \u2502      Cybersecurity AI (CAI)     \u2502\n                      \u2502                                 \u2502\n                      \u2502       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n                      \u2502       \u2502  Autonomous AI  \u2502       \u2502\n                      \u2502       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n                      \u2502                \u2502                \u2502\n                      \u2502                \u2502                \u2502\n                      \u2502       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n                      \u2502       \u2502 HITL Interaction \u2502      \u2502\n                      \u2502       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n                      \u2502                \u2502                \u2502\n                      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                       \u2502\n                                       \u2502 Ctrl+C (cli.py)\n                                       \u2502\n                           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                           \u2502   Human Operator(s)   \u2502\n                           \u2502  Expertise | Judgment \u2502\n                           \u2502    Teleoperation      \u2502\n                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>CAI delivers a framework for building Cybersecurity AIs with a strong emphasis on semi-autonomous operation, as the reality is that fully-autonomous cybersecurity systems remain premature and face significant challenges when tackling complex tasks. While CAI explores autonomous capabilities, we recognize that effective security operations still require human teleoperation providing expertise, judgment, and oversight in the security process.</p> <p>Accordingly, the Human-In-The-Loop (<code>HITL</code>) module is a core design principle of CAI, acknowledging that human intervention and teleoperation are essential components of responsible security testing. Through the <code>cli.py</code> interface, users can seamlessly interact with agents at any point during execution by simply pressing <code>Ctrl+C</code>. </p> <p>[1] Arguably, the Chain-of-Thought agentic pattern is a special case of the Hierarchical agentic pattern. [2] Kamhoua, C. A., Leslie, N. O., &amp; Weisman, M. J. (2018). Game theoretic modeling of advanced persistent threat in internet of things. Journal of Cyber Security and Information Systems. [3] Yao, S., Zhao, J., Yu, D., Du, N., Shafran, I., Narasimhan, K., &amp; Cao, Y. (2023, January). React: Synergizing reasoning and acting in language models. In International Conference on Learning Representations (ICLR).</p>"},{"location":"cai_citation_and_acknowledgments/","title":"Citation & Acknowledgments","text":""},{"location":"cai_citation_and_acknowledgments/#citation","title":"Citation","text":"<p>If you want to cite our work, please use the following format <pre><code>@misc{mayoralvilches2025caiopenbugbountyready,\n      title={CAI: An Open, Bug Bounty-Ready Cybersecurity AI},\n      author={V\u00edctor Mayoral-Vilches and Luis Javier Navarrete-Lozano and Mar\u00eda Sanz-G\u00f3mez and Lidia Salas Espejo and Marti\u00f1o Crespo-\u00c1lvarez and Francisco Oca-Gonzalez and Francesco Balassone and Alfonso Glera-Pic\u00f3n and Unai Ayucar-Carbajo and Jon Ander Ruiz-Alcalde and Stefan Rass and Martin Pinzger and Endika Gil-Uriarte},\n      year={2025},\n      eprint={2504.06017},\n      archivePrefix={arXiv},\n      primaryClass={cs.CR},\n      url={https://arxiv.org/abs/2504.06017},\n}\n</code></pre></p>"},{"location":"cai_citation_and_acknowledgments/#acknowledgements","title":"Acknowledgements","text":"<p>CAI was initially developed by Alias Robotics and co-funded by the European EIC accelerator project RIS (GA 101161136) - HORIZON-EIC-2023-ACCELERATOR-01 call. The original agentic principles are inspired from OpenAI's <code>swarm</code> library. This project also makes use of other relevant open source building blocks including <code>LiteLLM</code>, and <code>phoenix</code></p>"},{"location":"cai_development/","title":"Development","text":"<p>Development is facilitated via VS Code dev. environments. To try out our development environment, clone the repository, open VS Code and enter de dev. container mode:</p> <p></p>"},{"location":"cai_development/#contributions","title":"Contributions","text":"<p>If you want to contribute to this project, use Pre-commit before your MR</p> <pre><code>pip install pre-commit\npre-commit # files staged\npre-commit run --all-files # all files\n</code></pre>"},{"location":"cai_development/#optional-requirements-caiextensions","title":"Optional Requirements: caiextensions","text":"<p>Currently, the extensions are not available as they have been (largely) integrated or are in the process of being integrated into the core architecture. We aim to have everything converge in version 0.4.x. Coming soon!</p>"},{"location":"cai_development/#usage-data-collection","title":"Usage Data Collection","text":"<p>CAI is provided free of charge for researchers. To improve CAI\u2019s detection accuracy and publish open security research, instead of payment for research use cases, we ask you to contribute to the CAI community by allowing usage data collection. This data helps us identify areas for improvement, understand how the framework is being used, and prioritize new features. Legal basis of data collection is under Art. 6 (1)(f) GDPR \u2014 CAI\u2019s legitimate interest in maintaining and improving security tooling, with Art. 89 safeguards for research. The collected data includes:</p> <ul> <li>Basic system information (OS type, Python version)</li> <li>Username and IP information</li> <li>Tool usage patterns and performance metrics</li> <li>Model interactions and token usage statistics</li> </ul> <p>We take your privacy seriously and only collect what's needed to make CAI better. For further info, reach out to research\uff20aliasrobotics.com. You can disable some of the data collection features via the <code>CAI_TELEMETRY</code> environment variable but we encourage you to keep it enabled and contribute back to research:</p> <pre><code>CAI_TELEMETRY=False cai\n</code></pre>"},{"location":"cai_development/#reproduce-ci-setup-locally","title":"Reproduce CI-Setup locally","text":"<p>To simulate the CI/CD pipeline, you can run the following in the Gitlab runner machines:</p> <pre><code>docker run --rm -it \\\n  --privileged \\\n  --network=exploitflow_net \\\n  --add-host=\"host.docker.internal:host-gateway\" \\\n  -v /cache:/cache \\\n  -v /var/run/docker.sock:/var/run/docker.sock:rw \\\n  registry.gitlab.com/aliasrobotics/alias_research/cai:latest bash\n</code></pre>"},{"location":"cai_faq/","title":"FAQ","text":"OLLAMA is giving me 404 errors <p>Ollama's API in OpenAI mode uses <code>/v1/chat/completions</code> whereas the <code>openai</code> library uses  <code>base_url</code> + <code>/chat/completions</code>.</p> <p>We adopt the latter for overall alignment with the gen AI community and empower the former by allowing users to add the <code>v1</code> themselves via:</p> <pre><code>OLLAMA_API_BASE=http://IP:PORT/v1\n</code></pre> <p>See the following issues that treat this topic in more detail: #76, #83 and #82</p> Where are all the caiextensions? <p>Currently, the extensions are not available as they have been (largely) integrated or are in the process of being integrated into the core architecture. We aim to have everything converge in next version. Coming soon!</p> How do I set up SSH access for Gitlab? <p>Generate a new SSH key <pre><code>ssh-keygen -t ed25519\n</code></pre></p> <p>Add the key to the SSH agent <pre><code>ssh-add ~/.ssh/id_ed25519\n</code></pre></p> <p>Add the public key to Gitlab Copy the key and add it to Gitlab under https://gitlab.com/-/user_settings/ssh_keys <pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre></p> <p>To verify it: <pre><code>ssh -T git@gitlab.com\nWelcome to GitLab, @vmayoral!\n</code></pre></p> How do I clear Python cache? <pre><code>find . -name \"*.pyc\" -delete &amp;&amp; find . -name \"__pycache__\" -delete\n</code></pre> If host networking is not working with ollama check whether it has been disabled in Docker because you are not signed in <p>Docker in OS X behaves funny sometimes. Check if the following message has shown up:</p> <p>Host networking has been disabled because you are not signed in. Please sign in to enable it.</p> <p>Make sure this has been addressed and also that the Dev Container is not forwarding the 8000 port (click on x, if necessary in the ports section).</p> <p>To verify connection, from within the VSCode devcontainer: <pre><code>curl -v http://host.docker.internal:8000/api/version\n</code></pre></p> Run CAI against any target <p></p> <p>The starting user prompt in this case is: <code>Target IP: 192.168.3.10, perform a full network scan</code>.</p> <p>The agent started performing a nmap scan. You could either interact with the agent and give it more instructions, or let it run to see what it explores next.</p> How do I interact with the agent? Type twice CTRL + C <p></p> <p>If you want to use the HITL mode, you can do it by presssing twice <code>Ctrl + C</code>. This will allow you to interact (prompt) with the agent whenever you want. The agent will not lose the previous context, as it is stored in the <code>history</code> variable, which is passed to it and any agent that is called. This enables any agent to use the previous information and be more accurate and efficient.</p> Can I change the model while CAI is running? /model <p>Use <code>/model</code> to change the model.</p> <p></p> How can I list all the agents available? /agent <p>Use <code>/agent</code> to list all the agents available.</p> <p></p> Where can I list all the environment variables? /config <p></p> How to know more about the CLI? /help <p></p> Can I expand CAI capabilities using previous run logs? <p>Absolutely! The /load command allows you to use a previously sucessful runs ( the log object is stored as a .jsonl file in the log folder ) in a new run against the same target.</p> <p>How to make use of this functionality?</p> <ol> <li>Run CAI against the target. Let's assume the target name is: <code>target001</code>.</li> <li>Get the log file path, something like: <code>logs/cai_20250408_111856.jsonl</code></li> <li>Start cai again and select the jsonl file:</li> </ol> <p></p> Can I expand CAI capabilities using scripts or extra information? <p>Currently, CAI supports text based information. You can add any extra information on the target you are facing by copy-pasting it directly into the system or user prompt.</p> <p>How? By adding it to the system (<code>system_master_template.md</code>) or the user prompt (<code>user_master_template.md</code>). You can always directly prompt the path to the model, and it will <code>cat</code> it.</p> How do I run the documentation locally? <p>To view and edit the documentation locally, you can use MkDocs, which is a static site generator for project documentation.</p> <p>Steps:</p> <ol> <li> <p>Install MkDocs and the Material theme: <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p> </li> <li> <p>Serve the documentation locally: <pre><code> python -m mkdocs serve\n</code></pre>     This will start a local server (usually at http://127.0.0.1:8000) where you can view the docs in your browser.</p> </li> <li> <p>Build the static site (optional): <pre><code>mkdocs build\n</code></pre>     This will generate a <code>site/</code> directory with the static HTML files.</p> </li> </ol> <p>For more details, see the MkDocs documentation.</p> How CAI licence works? <p>CAI\u2019s current license does not restrict usage for research purposes. You are free to use CAI for security assessments (pentests), to develop additional features, and to integrate it into your research activities, as long as you comply with local laws.</p> <p>If you or your organization start benefiting commercially from CAI (e.g., offering pentesting services powered by CAI), then a commercial license will be required to help sustain the project.</p> <p>CAI itself is not a profit-seeking initiative. Our goal is to build a sustainable open-source project. We simply ask that those who profit from CAI contribute back and support our ongoing development.</p>"},{"location":"cai_find_us/","title":"Find Us","text":"<p>We're excited to connect with you! Join our community through any of the following channels:</p> <ul> <li> <p>GitHub</p> </li> <li> <p>Discord Community</p> </li> <li> <p>Linkedin Group</p> </li> <li> <p>Alias Robotics</p> </li> </ul>"},{"location":"cai_installation/","title":"Installation","text":"<pre><code>pip install cai-framework\n</code></pre> <p>The following subsections provide a more detailed walkthrough on selected popular Operating Systems. Refer to the Development section for developer-related install instructions.</p>"},{"location":"cai_installation/#os-x","title":"OS X","text":"<pre><code>brew update &amp;&amp; \\\n    brew install git python@3.12\n\n# Create virtual environment\npython3.12 -m venv cai_env\n\n# Install the package from the local directory\nsource cai_env/bin/activate &amp;&amp; pip install cai-framework\n\n# Generate a .env file and set up with defaults\necho -e 'OPENAI_API_KEY=\"sk-1234\"\\nANTHROPIC_API_KEY=\"\"\\nOLLAMA=\"\"\\nPROMPT_TOOLKIT_NO_CPR=1' &gt; .env\n\n# Launch CAI\ncai  # first launch it can take up to 30 seconds\n</code></pre>"},{"location":"cai_installation/#ubuntu-2404","title":"Ubuntu 24.04","text":"<pre><code>sudo apt-get update &amp;&amp; \\\n    sudo apt-get install -y git python3-pip python3.12-venv\n\n# Create the virtual environment\npython3.12 -m venv cai_env\n\n# Install the package from the local directory\nsource cai_env/bin/activate &amp;&amp; pip install cai-framework\n\n# Generate a .env file and set up with defaults\necho -e 'OPENAI_API_KEY=\"sk-1234\"\\nANTHROPIC_API_KEY=\"\"\\nOLLAMA=\"\"\\nPROMPT_TOOLKIT_NO_CPR=1' &gt; .env\n\n# Launch CAI\ncai  # first launch it can take up to 30 seconds\n</code></pre>"},{"location":"cai_installation/#ubuntu-2004","title":"Ubuntu 20.04","text":"<pre><code>sudo apt-get update &amp;&amp; \\\n    sudo apt-get install -y software-properties-common\n\n# Fetch Python 3.12\nsudo add-apt-repository ppa:deadsnakes/ppa &amp;&amp; sudo apt update\nsudo apt install python3.12 python3.12-venv python3.12-dev -y\n\n# Create the virtual environment\npython3.12 -m venv cai_env\n\n# Install the package from the local directory\nsource cai_env/bin/activate &amp;&amp; pip install cai-framework\n\n# Generate a .env file and set up with defaults\necho -e 'OPENAI_API_KEY=\"sk-1234\"\\nANTHROPIC_API_KEY=\"\"\\nOLLAMA=\"\"\\nPROMPT_TOOLKIT_NO_CPR=1' &gt; .env\n\n# Launch CAI\ncai  # first launch it can take up to 30 seconds\n</code></pre>"},{"location":"cai_installation/#windows-wsl","title":"Windows WSL","text":"<p>Go to the Microsoft page: https://learn.microsoft.com/en-us/windows/wsl/install. Here you will find all the instructions to install WSL</p> <p>From Powershell write: wsl --install</p> <pre><code>sudo apt-get update &amp;&amp; \\\n    sudo apt-get install -y git python3-pip python3-venv\n\n# Create the virtual environment\npython3 -m venv cai_env\n\n# Install the package from the local directory\nsource cai_env/bin/activate &amp;&amp; pip install cai-framework\n\n# Generate a .env file and set up with defaults\necho -e 'OPENAI_API_KEY=\"sk-1234\"\\nANTHROPIC_API_KEY=\"\"\\nOLLAMA=\"\"\\nPROMPT_TOOLKIT_NO_CPR=1' &gt; .env\n\n# Launch CAI\ncai  # first launch it can take up to 30 seconds\n</code></pre>"},{"location":"cai_installation/#android","title":"Android","text":"<p>We recommend having at least 8 GB of RAM:</p> <ol> <li> <p>First of all, install userland: <code>https://play.google.com/store/apps/details?id=tech.ula&amp;hl=es</code></p> </li> <li> <p>Install Kali minimal in basic options (for free). [Or any other kali option if preferred]</p> </li> <li> <p>Update apt keys like in this example: <code>https://superuser.com/questions/1644520/apt-get-update-issue-in-kali</code>, inside UserLand's Kali terminal execute</p> </li> </ol> <pre><code># Get new apt keys\nwget http://http.kali.org/kali/pool/main/k/kali-archive-keyring/kali-archive-keyring_2024.1_all.deb\n\n# Install new apt keys\nsudo dpkg -i kali-archive-keyring_2024.1_all.deb &amp;&amp; rm kali-archive-keyring_2024.1_all.deb\n\n# Update APT repository\nsudo apt-get update\n\n# CAI requieres python 3.12, lets install it (CAI for kali in Android)\nsudo apt-get update &amp;&amp; sudo apt-get install -y git python3-pip build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev pkg-config\nwget https://www.python.org/ftp/python/3.12.4/Python-3.12.4.tar.xz\ntar xf Python-3.12.4.tar.xz\ncd ./configure --enable-optimizations\nsudo make altinstall # This command takes long to execute\n\n# Clone CAI's source code\ngit clone https://github.com/aliasrobotics/cai &amp;&amp; cd cai\n\n# Create virtual environment\npython3.12 -m venv cai_env\n\n# Install the package from the local directory\nsource cai_env/bin/activate &amp;&amp; pip3 install -e .\n\n# Generate a .env file and set up\ncp .env.example .env  # edit here your keys/models\n\n# Launch CAI\ncai\n</code></pre>"},{"location":"cai_installation/#setup-env-file","title":"Setup <code>.env</code> file","text":"<p>CAI leverages the <code>.env</code> file to load configuration at launch. To facilitate the setup, the repo provides an exemplary <code>.env.example</code> file provides a template for configuring CAI's setup and your LLM API keys to work with desired LLM models.</p> <p><pre><code>OPENAI_API_KEY=\"sk-1234\" \n# OPENAI_API_KEY MUST BE FILLED-IN. \n# It should contain either \"sk-123\" (as a placeholder) \n# or your actual API key. \n# See https://github.com/aliasrobotics/cai/issues/27\n\nANTHROPIC_API_KEY=\"\"\nOLLAMA=\"\"\nPROMPT_TOOLKIT_NO_CPR=1\n</code></pre> \u26a0\ufe0f CAI does NOT provide API keys for any model by default. </p>"},{"location":"cai_installation/#custom-openai-base-url-support","title":"Custom OpenAI Base URL Support","text":"<p><pre><code>CAI supports configuring a custom OpenAI API base URL via the `OPENAI_BASE_URL` environment variable. This allows users to redirect API calls to a custom endpoint, such as a proxy or self-hosted OpenAI-compatible service.\n\nExample `.env` entry configuration:\n</code></pre> OLLAMA_API_BASE=\"https://custom-openai-proxy.com/v1\" <pre><code>Or directly from the command line:\n```bash\nOLLAMA_API_BASE=\"https://custom-openai-proxy.com/v1\" cai\n</code></pre></p>"},{"location":"cai_list_of_models/","title":"List of Models","text":"<p>The Cybersecurity AI (CAI) platform provides seamless integration with multiple Large Language Models (LLMs). This functionality allows users to leverage state-of-the-art AI capabilities for various cybersecurity tasks. CAI acts as a bridge between your security workflows and a wide range of LLMs, enhancing both flexibility and performance of AI agents.</p> <p>CAI supports over 300 models, thanks to its integration with LiteLLM. You can choose from a wide variety of providers and models, including:</p> <ul> <li>Anthropic: Claude 3.7, Claude 3.5, Claude 3, Claude 3 Opus  </li> <li>OpenAI: O1, O1 Mini, O3 Mini, GPT-4o, GPT-4.5 Preview  </li> <li>DeepSeek: DeepSeek V3, DeepSeek R1  </li> <li>Ollama: Qwen2.5 72B, Qwen2.5 14B, and more  </li> </ul> <p>CAI is also compatibile with other platforms like OpenRouter and Ollama. Below you\u2019ll find some configurations to help you get started.</p>"},{"location":"cai_list_of_models/#openrouter-integration","title":"OpenRouter Integration","text":"<p>To enable OpenRouter support in CAI, you need to configure your environment by adding specific entries to your <code>.env</code> file. This setup ensures that CAI can interact with the OpenRouter API, facilitating the use of sophisticated models like Meta-LLaMA. Here\u2019s how you can configure it:</p> <pre><code>CAI_MODEL=openrouter/meta-llama/llama-4-maverick\nOPENROUTER_API_KEY=&lt;sk-your-key&gt;  # note, add yours\nOPENROUTER_API_BASE=https://openrouter.ai/api/v1\n</code></pre>"},{"location":"cai_list_of_models/#ollama-integration","title":"Ollama Integration","text":"<p>For local models using Ollama, add the following to your .env:</p> <pre><code>CAI_MODEL=qwen2.5:72b\nOLLAMA_API_BASE=http://localhost:8000/v1 # note, maybe you have a different endpoint\n</code></pre> <p>Make sure that the Ollama server is running and accessible at the specified base URL. You can swap the model with any other supported by your local Ollama instance.</p>"},{"location":"cai_quickstart/","title":"Quickstart","text":"<p>To start CAI after installing it, just type <code>cai</code> in the CLI:</p> <pre><code>\u2514\u2500# cai\n\n          CCCCCCCCCCCCC      ++++++++   ++++++++      IIIIIIIIII\n       CCC::::::::::::C  ++++++++++       ++++++++++  I::::::::I\n     CC:::::::::::::::C ++++++++++         ++++++++++ I::::::::I\n    C:::::CCCCCCCC::::C +++++++++    ++     +++++++++ II::::::II\n   C:::::C       CCCCCC +++++++     +++++     +++++++   I::::I\n  C:::::C                +++++     +++++++     +++++    I::::I\n  C:::::C                ++++                   ++++    I::::I\n  C:::::C                 ++                     ++     I::::I\n  C:::::C                  +   +++++++++++++++   +      I::::I\n  C:::::C                    +++++++++++++++++++        I::::I\n  C:::::C                     +++++++++++++++++         I::::I\n   C:::::C       CCCCCC        +++++++++++++++          I::::I\n    C:::::CCCCCCCC::::C         +++++++++++++         II::::::II\n     CC:::::::::::::::C           +++++++++           I::::::::I\n       CCC::::::::::::C             +++++             I::::::::I\n          CCCCCCCCCCCCC               ++              IIIIIIIIII\n\n                      Cybersecurity AI (CAI), v0.4.0\n                          Bug bounty-ready AI\n\nCAI&gt;\n</code></pre> <p>That should initialize CAI and provide a prompt to execute any security task you want to perform. The navigation bar at the bottom displays important system information. This information helps you understand your environment while working with CAI.</p> <p>Here's a quick demo video to help you get started with CAI. We'll walk through the basic steps \u2014 from launching the tool to running your first AI-powered task in the terminal. Whether you're a beginner or just curious, this guide will show you how easy it is to begin using CAI.</p> <p>From here on, type on <code>CAI</code> and start your security exercise. Best way to learn is by example:</p>"},{"location":"cai_quickstart/#environment-variables","title":"Environment Variables","text":"List of Environment Variables Variable Description CTF_NAME Name of the CTF challenge to run (e.g. \"picoctf_static_flag\") CTF_CHALLENGE Specific sub challenge name within the CTF to test (e.g. CTF_NAME=\"kiddoctf\" contains 4 subchallenges. For running one of them: \"01 linux i\") CTF_SUBNET Network subnet for the CTF container CTF_IP IP address for the CTF container CTF_INSIDE Whether to conquer the CTF from within container CAI_MODEL Model to use for agents \u26a0\ufe0f CAI_DEBUG Set debug output level (0: Only tool outputs, 1: Verbose debug output, 2: CLI debug output) \u26a0\ufe0f CAI_BRIEF Enable/disable brief output mode CAI_MAX_TURNS Maximum number of turns for agent interactions \u26a0\ufe0f CAI_TRACING Enable/disable OpenTelemetry tracing CAI_AGENT_TYPE Specify the agents to use (e.g. \"boot2root\") CAI_PRICE_LIMIT Price limit for the conversation in dollars CAI_WORKSPACE Defines the name of the workspace"},{"location":"cai_quickstart/#setting-environment-variables","title":"Setting Environment Variables","text":"<p>There are several ways to configure environment variables for CAI:</p>"},{"location":"cai_quickstart/#1-using-the-env-file","title":"1. Using the <code>.env</code> file","text":"<pre><code># Add any env variable to your .env file\nCAI_PRICE_LIMIT=\"0.004\"\nCAI_MODEL=\"qwen2.5:72b\"\n</code></pre>"},{"location":"cai_quickstart/#2-command-line-parameters","title":"2. Command-line parameters","text":"<p>Pass variables directly when launching CAI</p> <pre><code>CAI_PRICE_LIMIT=\"0.004\" CAI_MODEL=\"qwen2.5:72b\" cai\n</code></pre>"},{"location":"cai_quickstart/#3-runtime-configuration","title":"3. Runtime configuration","text":"<p>After running CAI, use <code>/config</code></p> <pre><code>  /config set &lt;number&gt; &lt;value&gt; to configure a variable # see `config.py` or type `/help`\n</code></pre> <pre><code>  cai\n  /config # It will display a panel with all the environment variables.\n        # You must pick its reference NUMBER (1st column left)\n  # `18` is the corresponding number for CAI_PRICE_LIMIT\n  /config set 18 \"0.004\"\n</code></pre>"},{"location":"config/","title":"Configuring the SDK","text":""},{"location":"config/#api-keys-and-clients","title":"API keys and clients","text":"<p>By default, the SDK looks for the <code>OPENAI_API_KEY</code> environment variable for LLM requests and tracing, as soon as it is imported. If you are unable to set that environment variable before your app starts, you can use the <code>set_default_openai_key()</code> function to set the key.</p> <pre><code>from cai.sdk.agents import set_default_openai_key\n\nset_default_openai_key(\"sk-...\")\n</code></pre> <p>Alternatively, you can also configure an OpenAI client to be used. By default, the SDK creates an <code>AsyncOpenAI</code> instance, using the API key from the environment variable or the default key set above. You can change this by using the <code>set_default_openai_client()</code> function.</p> <pre><code>from openai import AsyncOpenAI\nfrom cai.sdk.agents import set_default_openai_client\n\ncustom_client = AsyncOpenAI(base_url=\"...\", api_key=\"...\")\nset_default_openai_client(custom_client)\n</code></pre> <p>Finally, you can also customize the OpenAI API that is used. By default, we use the OpenAI Responses API. You can override this to use the Chat Completions API by using the <code>set_default_openai_api()</code> function.</p> <pre><code>from cai.sdk.agents import set_default_openai_api\n\nset_default_openai_api(\"chat_completions\")\n</code></pre>"},{"location":"config/#tracing","title":"Tracing","text":"<p>Tracing is enabled by default. It uses the OpenAI API keys from the section above by default (i.e. the environment variable or the default key you set). You can specifically set the API key used for tracing by using the <code>set_tracing_export_api_key</code> function.</p> <pre><code>from cai.sdk.agents import set_tracing_export_api_key\n\nset_tracing_export_api_key(\"sk-...\")\n</code></pre> <p>You can also disable tracing entirely by using the <code>set_tracing_disabled()</code> function.</p> <pre><code>from cai.sdk.agents import set_tracing_disabled\n\nset_tracing_disabled(True)\n</code></pre>"},{"location":"config/#debug-logging","title":"Debug logging","text":"<p>The SDK has two Python loggers without any handlers set. By default, this means that warnings and errors are sent to <code>stdout</code>, but other logs are suppressed.</p> <p>To enable verbose logging, use the <code>enable_verbose_stdout_logging()</code> function.</p> <pre><code>from cai.sdk.agents import enable_verbose_stdout_logging\n\nenable_verbose_stdout_logging()\n</code></pre> <p>Alternatively, you can customize the logs by adding handlers, filters, formatters, etc. You can read more in the Python logging guide.</p> <pre><code>import logging\n\nlogger =  logging.getLogger(\"openai.agents\") # or openai.agents.tracing for the Tracing logger\n\n# To make all logs show up\nlogger.setLevel(logging.DEBUG)\n# To make info and above show up\nlogger.setLevel(logging.INFO)\n# To make warning and above show up\nlogger.setLevel(logging.WARNING)\n# etc\n\n# You can customize this as needed, but this will output to `stderr` by default\nlogger.addHandler(logging.StreamHandler())\n</code></pre>"},{"location":"config/#sensitive-data-in-logs","title":"Sensitive data in logs","text":"<p>Certain logs may contain sensitive data (for example, user data). If you want to disable this data from being logged, set the following environment variables.</p> <p>To disable logging LLM inputs and outputs:</p> <pre><code>export OPENAI_AGENTS_DONT_LOG_MODEL_DATA=1\n</code></pre> <p>To disable logging tool inputs and outputs:</p> <pre><code>export OPENAI_AGENTS_DONT_LOG_TOOL_DATA=1\n</code></pre>"},{"location":"context/","title":"Context management","text":"<p>Context is an overloaded term. There are two main classes of context you might care about:</p> <ol> <li>Context available locally to your code: this is data and dependencies you might need when tool functions run, during callbacks like <code>on_handoff</code>, in lifecycle hooks, etc.</li> <li>Context available to LLMs: this is data the LLM sees when generating a response.</li> </ol>"},{"location":"context/#local-context","title":"Local context","text":"<p>This is represented via the <code>RunContextWrapper</code> class and the <code>context</code> property within it. The way this works is:</p> <ol> <li>You create any Python object you want. A common pattern is to use a dataclass or a Pydantic object.</li> <li>You pass that object to the various run methods (e.g. <code>Runner.run(..., **context=whatever**))</code>).</li> <li>All your tool calls, lifecycle hooks etc will be passed a wrapper object, <code>RunContextWrapper[T]</code>, where <code>T</code> represents your context object type which you can access via <code>wrapper.context</code>.</li> </ol> <p>The most important thing to be aware of: every agent, tool function, lifecycle, etc for a given agent run must use the same type of context.</p> <p>You can use the context for things like:</p> <ul> <li>Contextual data for your run (e.g. things like a username/uid or other information about the user)</li> <li>Dependencies (e.g. logger objects, data fetchers, etc)</li> <li>Helper functions</li> </ul> <p>Note</p> <p>The context object is not sent to the LLM. It is purely a local object that you can read from, write to and call methods on it.</p> <pre><code>import asyncio\nfrom dataclasses import dataclass\n\nfrom cai.sdk.agents import Agent, RunContextWrapper, Runner, function_tool\n\n@dataclass\nclass SecurityAlert:  # (1)!\n    ip_address: str\n    threat_id: int\n\n@function_tool\nasync def fetch_threat_details(wrapper: RunContextWrapper[SecurityAlert]) -&gt; str:  # (2)!\n    return f\"IP {wrapper.context.ip_address} is associated with a DDoS attack\"\n\nasync def main():\n    security_alert = SecurityAlert(ip_address=\"192.168.1.100\", threat_id=507)\n\n    agent = Agent[SecurityAlert](  # (3)!\n        name=\"SecurityAnalyst\",\n        tools=[fetch_threat_details],\n    )\n\n    result = await Runner.run(  # (4)!\n        starting_agent=agent,\n        input=\"What type of threat is associated with this IP?\",\n        context=security_alert,\n    )\n\n    print(result.final_output)  # (5)!\n    # IP 192.168.1.100 is associated with a DDoS attack.\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <ol> <li>This is the context object. We've used a dataclass here, but you can use any type.</li> <li>This is a tool. You can see it takes a <code>RunContextWrapper[SecurityAlert]</code>. The tool implementation reads from the context.</li> <li>We mark the agent with the generic <code>SecurityAlert</code>, so that the typechecker can catch errors (for example, if we tried to pass a tool that took a different context type).</li> <li>The context is passed to the <code>run</code> function.</li> <li>The agent correctly calls the tool and gets the threat information.</li> </ol>"},{"location":"context/#agentllm-context","title":"Agent/LLM context","text":"<p>When an LLM is called, the only data it can see is from the conversation history. This means that if you want to make some new data available to the LLM, you must do it in a way that makes it available in that history. There are a few ways to do this:</p> <ol> <li>You can add it to the Agent <code>instructions</code>. This is also known as a \"system prompt\" or \"developer message\". System prompts can be static strings, or they can be dynamic functions that receive the context and output a string. This is a common tactic for information that is always useful (for example, the user's name or the current date).</li> <li>Add it to the <code>input</code> when calling the <code>Runner.run</code> functions. This is similar to the <code>instructions</code> tactic, but allows you to have messages that are lower in the chain of command.</li> <li>Expose it via function tools. This is useful for on-demand context - the LLM decides when it needs some data, and can call the tool to fetch that data.</li> <li>Use retrieval or web search. These are special tools that are able to fetch relevant data from files or databases (retrieval), or from the web (web search). This is useful for \"grounding\" the response in relevant contextual data.</li> </ol>"},{"location":"examples/","title":"Examples","text":"<p>Check out a variety of sample implementations of the SDK in the examples section of the repo. The examples are organized into several categories that demonstrate different patterns and capabilities.</p>"},{"location":"examples/#categories","title":"Categories","text":"<ul> <li> <p>agent_patterns:   Examples in this category illustrate common agent design patterns, such as</p> <ul> <li>Deterministic workflows</li> <li>Agents as tools</li> <li>Parallel agent execution</li> </ul> </li> <li> <p>basic:   These examples showcase foundational capabilities of the SDK, such as</p> <ul> <li>Dynamic system prompts</li> <li>Streaming outputs</li> <li>Lifecycle events</li> </ul> </li> <li> <p>tool examples:   Learn how to implement OAI hosted tools such as web search and file search,    and integrate them into your agents.</p> </li> <li> <p>model providers:   Explore how to use non-OpenAI models with the SDK.</p> </li> <li> <p>handoffs:   See practical examples of agent handoffs.</p> </li> <li> <p>customer_service and research_bot:   Two more built-out examples that illustrate real-world applications</p> <ul> <li>customer_service: Example customer service system for an airline.</li> <li>research_bot: Simple deep research clone.</li> </ul> </li> </ul>"},{"location":"guardrails/","title":"Guardrails","text":"<p>Guardrails run in parallel to your agents, enabling you to do checks and validations of user input. For example, imagine you have an agent that uses a very smart (and hence slow/expensive) model to help with customer requests. You wouldn't want malicious users to ask the model to help them with their math homework. So, you can run a guardrail with a fast/cheap model. If the guardrail detects malicious usage, it can immediately raise an error, which stops the expensive model from running and saves you time/money.</p> <p>There are two kinds of guardrails:</p> <ol> <li>Input guardrails run on the initial user input</li> <li>Output guardrails run on the final agent output</li> </ol>"},{"location":"guardrails/#input-guardrails","title":"Input guardrails","text":"<p>Input guardrails run in 3 steps:</p> <ol> <li>First, the guardrail receives the same input passed to the agent.</li> <li>Next, the guardrail function runs to produce a <code>GuardrailFunctionOutput</code>, which is then wrapped in an <code>InputGuardrailResult</code></li> <li>Finally, we check if <code>.tripwire_triggered</code> is true. If true, an <code>InputGuardrailTripwireTriggered</code> exception is raised, so you can appropriately respond to the user or handle the exception.</li> </ol> <p>Note</p> <p>Input guardrails are intended to run on user input, so an agent's guardrails only run if the agent is the first agent. You might wonder, why is the <code>guardrails</code> property on the agent instead of passed to <code>Runner.run</code>? It's because guardrails tend to be related to the actual Agent - you'd run different guardrails for different agents, so colocating the code is useful for readability.</p>"},{"location":"guardrails/#output-guardrails","title":"Output guardrails","text":"<p>Output guardrails run in 3 steps:</p> <ol> <li>First, the guardrail receives the same input passed to the agent.</li> <li>Next, the guardrail function runs to produce a <code>GuardrailFunctionOutput</code>, which is then wrapped in an <code>OutputGuardrailResult</code></li> <li>Finally, we check if <code>.tripwire_triggered</code> is true. If true, an <code>OutputGuardrailTripwireTriggered</code> exception is raised, so you can appropriately respond to the user or handle the exception.</li> </ol> <p>Note</p> <p>Output guardrails are intended to run on the final agent output, so an agent's guardrails only run if the agent is the last agent. Similar to the input guardrails, we do this because guardrails tend to be related to the actual Agent - you'd run different guardrails for different agents, so colocating the code is useful for readability.</p>"},{"location":"guardrails/#tripwires","title":"Tripwires","text":"<p>If the input or output fails the guardrail, the Guardrail can signal this with a tripwire. As soon as we see a guardrail that has triggered the tripwires, we immediately raise a <code>{Input,Output}GuardrailTripwireTriggered</code> exception and halt the Agent execution.</p>"},{"location":"guardrails/#implementing-a-guardrail","title":"Implementing a guardrail","text":"<p>You need to provide a function that receives input, and returns a <code>GuardrailFunctionOutput</code>. In this example, we'll do this by running an Agent under the hood.</p> <pre><code>from pydantic import BaseModel\nfrom cai.sdk.agents import (\n    Agent,\n    GuardrailFunctionOutput,\n    InputGuardrailTripwireTriggered,\n    RunContextWrapper,\n    Runner,\n    TResponseInputItem,\n    input_guardrail,\n)\n\nclass MaliciousRequestOutput(BaseModel):\n    is_malicious_request: bool\n    reasoning: str\n\nguardrail_agent = Agent( # (1)!\n    name=\"Security Guardrail Check\",\n    instructions=\"Check if the user is asking for help with hacking or bypassing security systems.\",\n    output_type=MaliciousRequestOutput,\n)\n\n\n@input_guardrail\nasync def security_guardrail( # (2)!\n    ctx: RunContextWrapper[None], agent: Agent, input: str | list[TResponseInputItem]\n) -&gt; GuardrailFunctionOutput:\n    result = await Runner.run(guardrail_agent, input, context=ctx.context)\n\n    return GuardrailFunctionOutput(\n        output_info=result.final_output, # (3)!\n        tripwire_triggered=result.final_output.is_malicious_request,\n    )\n\n\nagent = Agent(  # (4)!\n    name=\"Security assistant\",\n    instructions=\"You are a security assistant. You help users with legitimate security questions.\",\n    input_guardrails=[security_guardrail],\n)\n\nasync def main():\n    # This should trip the guardrail\n    try:\n        await Runner.run(agent, \"Hello, can you help me bypass the firewall on this corporate network?\")\n        print(\"Guardrail didn't trip - this is unexpected\")\n\n    except InputGuardrailTripwireTriggered:\n        print(\"Security guardrail tripped\")\n</code></pre> <ol> <li>We'll use this agent in our guardrail function.</li> <li>This is the guardrail function that receives the agent's input/context, and returns the result.</li> <li>We can include extra information in the guardrail result.</li> <li>This is the actual agent that defines the workflow.</li> </ol> <p>Output guardrails are similar.</p> <pre><code>from pydantic import BaseModel\nfrom cai.sdk.agents import (\n    Agent,\n    GuardrailFunctionOutput,\n    OutputGuardrailTripwireTriggered,\n    RunContextWrapper,\n    Runner,\n    output_guardrail,\n)\nclass MessageOutput(BaseModel): # (1)!\n    response: str\n\nclass SecurityOutput(BaseModel): # (2)!\n    reasoning: str\n    contains_sensitive_data: bool\n\nguardrail_agent = Agent(\n    name=\"Data Leakage Guardrail Check\",\n    instructions=\"Check if the output includes any sensitive data like passwords or API keys.\",\n    output_type=SecurityOutput,\n)\n\n@output_guardrail\nasync def data_leakage_guardrail(  # (3)!\n    ctx: RunContextWrapper, agent: Agent, output: MessageOutput\n) -&gt; GuardrailFunctionOutput:\n    result = await Runner.run(guardrail_agent, output.response, context=ctx.context)\n\n    return GuardrailFunctionOutput(\n        output_info=result.final_output,\n        tripwire_triggered=result.final_output.contains_sensitive_data,\n    )\n\nagent = Agent( # (4)!\n    name=\"Security assistant\",\n    instructions=\"You are a security assistant. You help users with legitimate security questions.\",\n    output_guardrails=[data_leakage_guardrail],\n    output_type=ResponseOutput,\n)\n\nasync def main():\n    # This should trip the guardrail\n    try:\n        await Runner.run(agent, \"What are the best practices for storing API keys in code?\")\n        print(\"Guardrail didn't trip - this is unexpected\")\n\n    except OutputGuardrailTripwireTriggered:\n        print(\"Data leakage guardrail tripped\")\n</code></pre> <ol> <li>This is the actual agent's output type.</li> <li>This is the guardrail's output type.</li> <li>This is the guardrail function that receives the agent's output, and returns the result.</li> <li>This is the actual agent that defines the workflow.</li> </ol>"},{"location":"handoffs/","title":"Handoffs","text":"<p>Handoffs allow an agent to delegate tasks to another agent. This is particularly useful in scenarios where different agents specialize in distinct areas. For example, a customer support app might have agents that each specifically handle tasks like order status, refunds, FAQs, etc.</p> <p>Handoffs are represented as tools to the LLM. So if there's a handoff to an agent named <code>Flag Discriminator</code>, the tool would be called <code>transfer_to_flag_discriminator</code>.</p>"},{"location":"handoffs/#creating-a-handoff","title":"Creating a handoff","text":"<p>All agents have a <code>handoffs</code> param, which can either take an <code>Agent</code> directly, or a <code>Handoff</code> object that customizes the Handoff.</p> <p>You can create a handoff using the <code>handoff()</code> function provided. This function allows you to specify the agent to hand off to, along with optional overrides and input filters.</p>"},{"location":"handoffs/#basic-usage","title":"Basic Usage","text":"<p>Here's how you can create a simple handoff:</p> <pre><code>from cai.sdk.agents import Agent, handoff\n\ncrypto_agent = Agent(name=\"Cryptography Agent\")\nbash_agent = Agent(name=\"Bash Agent\")\n\n# (1)!\ncybersecurity_lead = Agent(name=\"Cybersecurity Lead Agent\", handoffs=[crypto_agent, handoff(bash_agent)])\n</code></pre> <ol> <li>You can use the agent directly (as in <code>crypto_agent</code>), or you can use the <code>handoff()</code> function.</li> </ol>"},{"location":"handoffs/#customizing-handoffs-via-the-handoff-function","title":"Customizing handoffs via the <code>handoff()</code> function","text":"<p>The <code>handoff()</code> function lets you customize things.</p> <ul> <li><code>agent</code>: This is the agent to which things will be handed off.</li> <li><code>tool_name_override</code>: By default, the <code>Handoff.default_tool_name()</code> function is used, which resolves to <code>transfer_to_&lt;agent_name&gt;</code>. You can override this.</li> <li><code>tool_description_override</code>: Override the default tool description from <code>Handoff.default_tool_description()</code></li> <li><code>on_handoff</code>: A callback function executed when the handoff is invoked. This is useful for things like kicking off some data fetching as soon as you know a handoff is being invoked. This function receives the agent context, and can optionally also receive LLM generated input. The input data is controlled by the <code>input_type</code> param.</li> <li><code>input_type</code>: The type of input expected by the handoff (optional).</li> <li><code>input_filter</code>: This lets you filter the input received by the next agent. See below for more.</li> </ul> <pre><code>from cai.sdk.agents import Agent, handoff, RunContextWrapper\n\ndef on_handoff(ctx: RunContextWrapper[None]):\n    print(\"Handoff called\")\n\nagent = Agent(name=\"My agent\")\n\nhandoff_obj = handoff(\n    agent=agent,\n    on_handoff=on_handoff,\n    tool_name_override=\"custom_handoff_tool\",\n    tool_description_override=\"Custom description\",\n)\n</code></pre>"},{"location":"handoffs/#handoff-inputs","title":"Handoff inputs","text":"<p>In certain situations, you want the LLM to provide some data when it calls a handoff. For example, imagine a handoff to an \"Escalation agent\". You might want a reason to be provided, so you can log it.</p> <pre><code>from pydantic import BaseModel\n\nfrom cai.sdk.agents import Agent, handoff, RunContextWrapper\n\nclass EscalationData(BaseModel):\n    reason: str\n\nasync def on_handoff(ctx: RunContextWrapper[None], input_data: EscalationData):\n    print(f\"Escalation agent called with reason: {input_data.reason}\")\n\nagent = Agent(name=\"Escalation agent\")\n\nhandoff_obj = handoff(\n    agent=agent,\n    on_handoff=on_handoff,\n    input_type=EscalationData,\n)\n</code></pre>"},{"location":"handoffs/#input-filters","title":"Input filters","text":"<p>When a handoff occurs, it's as though the new agent takes over the conversation, and gets to see the entire previous conversation history. If you want to change this, you can set an <code>input_filter</code>. An input filter is a function that receives the existing input via a <code>HandoffInputData</code>, and must return a new <code>HandoffInputData</code>.</p> <p>There are some common patterns (for example removing all tool calls from the history), which are implemented for you in <code>cai.sdk.agents.extensions.handoff_filters</code></p> <pre><code>from cai.sdk.agents import Agent, handoff\nfrom agents.extensions import handoff_filters\n\nnetwork_agent = Agent(name=\"Network Agent\")\n\nhandoff_obj = handoff(\n    agent=network_agent,\n    input_filter=handoff_filters.remove_all_tools, # (1)!\n)\n</code></pre> <p>(1). This will automatically remove all tools from the history when <code>Network Agent</code> is called.</p>"},{"location":"handoffs/#recommended-prompts","title":"Recommended prompts","text":"<p>To make sure that LLMs understand handoffs properly, we recommend including information about handoffs in your agents. We have a suggested prefix in <code>cai.sdk.agents.extensions.handoff_prompt.RECOMMENDED_PROMPT_PREFIX</code>, or you can call <code>cai.sdk.agents.extensions.handoff_prompt.prompt_with_handoff_instructions</code> to automatically add recommended data to your prompts.</p> <pre><code>from cai.sdk.agents import Agent\nfrom agents.extensions.handoff_prompt import RECOMMENDED_PROMPT_PREFIX\n\nbilling_agent = Agent(\n    name=\"Phising Agent\",\n    instructions=f\"\"\"{RECOMMENDED_PROMPT_PREFIX}\n    &lt;Fill in the rest of your prompt here&gt;.\"\"\",\n)\n</code></pre>"},{"location":"handoffs/#all-in-one-example","title":"All-in-one example","text":"<pre><code>We will represent the following workflow. You can make it more or less complex, depending on your needs.\n\n                     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                     \u2502 Cybersecurity     \u2502\nUser Request \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 Lead Agent        \u2502\n                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n              \u2502                             \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 Bash Agent       \u2502         \u2502 Crypto Agent     \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 Flag             \u2502\n    \u2502 Discriminator    \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>from cai.sdk.agents import Agent, OpenAIChatCompletionsModel\nfrom openai import AsyncOpenAI\nfrom cai.sdk.agents import handoff, function_tool, trace\nfrom cai.sdk.agents import Runner\nfrom cai.tools.common import run_command\nfrom cai.sdk.agents.extensions.handoff_prompt import RECOMMENDED_PROMPT_PREFIX\nimport os\nimport asyncio\n\n\n@function_tool\ndef execute_cli_command(command: str) -&gt; str:\n    \"\"\"Execute a command-line command and return its output.\"\"\"\n    return run_command(command)\n\n\n# Create the Flag Discriminator Agent (terminal agent in the chain)\nflag_discriminator = Agent(\n    name=\"Flag Discriminator Agent\",\n    description=\"Agent specialized in verifying if content matches the expected flag format in CTF challenges\",\n    instructions=f\"\"\"{RECOMMENDED_PROMPT_PREFIX}\n    You are an expert at identifying CTF flags. The final flag is the first file of a -ls command. You return the flag with this format: flag{{filename}}\"\"\",\n    handoff_description=\"Specialized agent in determining whether the content corresponds to the flag of the CTF challenge\",\n    handoffs=[],\n    model=OpenAIChatCompletionsModel(\n        model=os.getenv('CAI_MODEL', \"qwen2.5:72b\"),\n        openai_client=AsyncOpenAI(),\n    )\n)\n\n# Create the Bash Agent (can hand off to Flag Discriminator)\nbash_agent = Agent(\n    name=\"Bash Agent\",\n    description=\"Agent specialized in Bash commands and Linux operations\",\n    instructions=f\"\"\"{RECOMMENDED_PROMPT_PREFIX}\n    You are a Bash and Linux expert. Use your knowledge to navigate the file system and execute commands.\n    The final flag is the first element listed in the directory. \n    When you find the name of the file, handoff to the Flag Discriminator Agent for verification.\"\"\",\n    tools=[execute_cli_command],\n    handoffs=[handoff(flag_discriminator)],\n    handoff_description=\"Specialized agent in Bash commands and Linux operations\",\n    model=OpenAIChatCompletionsModel(\n        model=os.getenv('CAI_MODEL', \"qwen2.5:14b\"),\n        openai_client=AsyncOpenAI(),\n    )\n)\n\n# Create the Crypto Agent\ncrypto_agent = Agent(\n    name=\"Cryptography Agent\",\n    description=\"Agent specialized in cryptography, ciphers, and encoding/decoding\",\n    instructions=f\"\"\"{RECOMMENDED_PROMPT_PREFIX}\n    You are a cryptography expert. Help decipher and decode encrypted messages or files.\"\"\",\n    tools=[execute_cli_command],\n    handoffs=[],\n    handoff_description=\"Specialized agent in cryptography and codebreaking\",\n    model=OpenAIChatCompletionsModel(\n        model=os.getenv('CAI_MODEL', \"qwen2.5:14b\"),\n        openai_client=AsyncOpenAI(),\n    )\n)\n\n# Create the Cybersecurity Lead Agent (can hand off to both Bash and Crypto)\ncybersecurity_lead = Agent(\n    name=\"Cybersecurity Lead Agent\",\n    description=\"Lead agent focused on conquering security challenges by delegating to specialist agents\",\n    instructions=f\"\"\"{RECOMMENDED_PROMPT_PREFIX}\n    You are a Cybersecurity expert Leader facing cybersecurity challenges. \n    - Hand off to the Bash Agent when you need to execute Linux commands or navigate the file system.\n    - Hand off to the Cryptography Agent when you encounter encrypted data or codes that need deciphering.\"\"\",\n    tools=[execute_cli_command],\n    handoffs=[\n        handoff(bash_agent),\n        handoff(crypto_agent)\n    ],\n    handoff_description=\"Lead agent in cybersecurity operations\",\n    model=OpenAIChatCompletionsModel(\n        model=os.getenv('CAI_MODEL', \"qwen2.5:14b\"),\n        openai_client=AsyncOpenAI(),\n    )\n)\n\n\nasync def main():\n    # Trace the entire run as a single workflow\n    with trace(workflow_name=\"CTF Workflow\"):\n        # Run with cybersecurity_lead directly\n        result = await Runner.run(cybersecurity_lead, \"List directories to find the flag\")\n\n    print(result.final_output)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"index2/","title":"OpenAI Agents SDK","text":"<p>The OpenAI Agents SDK enables you to build agentic AI apps in a lightweight, easy-to-use package with very few abstractions. It's a production-ready upgrade of our previous experimentation for agents, Swarm. The Agents SDK has a very small set of primitives:</p> <ul> <li>Agents, which are LLMs equipped with instructions and tools</li> <li>Handoffs, which allow agents to delegate to other agents for specific tasks</li> <li>Guardrails, which enable the inputs to agents to be validated</li> </ul> <p>In combination with Python, these primitives are powerful enough to express complex relationships between tools and agents, and allow you to build real-world applications without a steep learning curve. In addition, the SDK comes with built-in tracing that lets you visualize and debug your agentic flows, as well as evaluate them and even fine-tune models for your application.</p>"},{"location":"index2/#why-use-the-agents-sdk","title":"Why use the Agents SDK","text":"<p>The SDK has two driving design principles:</p> <ol> <li>Enough features to be worth using, but few enough primitives to make it quick to learn.</li> <li>Works great out of the box, but you can customize exactly what happens.</li> </ol> <p>Here are the main features of the SDK:</p> <ul> <li>Agent loop: Built-in agent loop that handles calling tools, sending results to the LLM, and looping until the LLM is done.</li> <li>Python-first: Use built-in language features to orchestrate and chain agents, rather than needing to learn new abstractions.</li> <li>Handoffs: A powerful feature to coordinate and delegate between multiple agents.</li> <li>Guardrails: Run input validations and checks in parallel to your agents, breaking early if the checks fail.</li> <li>Function tools: Turn any Python function into a tool, with automatic schema generation and Pydantic-powered validation.</li> <li>Tracing: Built-in tracing that lets you visualize, debug and monitor your workflows, as well as use the OpenAI suite of evaluation, fine-tuning and distillation tools.</li> </ul>"},{"location":"index2/#installation","title":"Installation","text":"<pre><code>pip install openai-agents\n</code></pre>"},{"location":"index2/#hello-world-example","title":"Hello world example","text":"<pre><code>from cai.sdk.agents import Agent, Runner\n\nagent = Agent(name=\"Assistant\", instructions=\"You are a helpful assistant\")\n\nresult = Runner.run_sync(agent, \"Write a haiku about recursion in programming.\")\nprint(result.final_output)\n\n# Code within the code,\n# Functions calling themselves,\n# Infinite loop's dance.\n</code></pre> <p>(If running this, ensure you set the <code>OPENAI_API_KEY</code> environment variable)</p> <pre><code>export OPENAI_API_KEY=sk-...\n</code></pre>"},{"location":"mcp/","title":"Model context protocol (MCP)","text":"<p>The Model context protocol (aka MCP) is a way to provide tools and context to the LLM. From the MCP docs:</p> <p>MCP is an open protocol that standardizes how applications provide context to LLMs. Think of MCP like a USB-C port for AI applications. Just as USB-C provides a standardized way to connect your devices to various peripherals and accessories, MCP provides a standardized way to connect AI models to different data sources and tools.</p> <p>MCP enables you to use a wide range of MCP servers to provide tools to your Agents.</p>"},{"location":"mcp/#mcp-servers","title":"MCP servers","text":"<p>Currently, the MCP spec defines two kinds of servers, based on the transport mechanism they use:</p> <ol> <li>stdio servers run as a subprocess of your application. You can think of them as running \"locally\".</li> <li>HTTP over SSE servers run remotely. You connect to them via a URL.</li> </ol> <p>You can use the <code>MCPServerStdio</code> and <code>MCPServerSse</code> classes to connect to these servers.</p> <p>For example, this is how you'd use the official MCP filesystem server.</p> <pre><code>async with MCPServerStdio(\n    params={\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", samples_dir],\n    }\n) as server:\n    tools = await server.list_tools()\n</code></pre>"},{"location":"mcp/#using-mcp-servers","title":"Using MCP servers","text":"<p>MCP servers can be added to Agents. The Agents SDK will call <code>list_tools()</code> on the MCP servers each time the Agent is run. This makes the LLM aware of the MCP server's tools. When the LLM calls a tool from an MCP server, the SDK calls <code>call_tool()</code> on that server.</p> <pre><code>```python\nfrom cai.sdk.agents import Agent\ncybersecurity_lead = Agent(\n    name=\"Cybersecurity Lead Agent\",\n    instructions=\"Use the tools to solve the\",\n    mcp_servers=[mcp_server_1, mcp_server_2]\n)\n</code></pre>"},{"location":"mcp/#caching","title":"Caching","text":"<p>Every time an Agent runs, it calls <code>list_tools()</code> on the MCP server. This can be a latency hit, especially if the server is a remote server. To automatically cache the list of tools, you can pass <code>cache_tools_list=True</code> to both <code>MCPServerStdio</code> and <code>MCPServerSse</code>. You should only do this if you're certain the tool list will not change.</p> <p>If you want to invalidate the cache, you can call <code>invalidate_tools_cache()</code> on the servers.</p>"},{"location":"mcp/#end-to-end-examples","title":"End-to-end examples","text":"<p>View complete working examples at examples/mcp.</p>"},{"location":"mcp/#tracing","title":"Tracing","text":"<p>Tracing automatically captures MCP operations, including:</p> <ol> <li>Calls to the MCP server to list tools</li> <li>MCP-related info on function calls </li> </ol>"},{"location":"models/","title":"Models","text":"<p>The Agents SDK comes with out-of-the-box support for OpenAI models in two flavors:</p> <ul> <li>Recommended: the <code>OpenAIResponsesModel</code>, which calls OpenAI APIs using the new Responses API.</li> <li>The <code>OpenAIChatCompletionsModel</code>, which calls OpenAI APIs using the Chat Completions API.</li> </ul>"},{"location":"models/#mixing-and-matching-models","title":"Mixing and matching models","text":"<p>Within a single workflow, you may want to use different models for each agent. For example, you could use a smaller, faster model for triage, while using a larger, more capable model for complex tasks. When configuring an <code>Agent</code>, you can select a specific model by either:</p> <ol> <li>Passing the name of an OpenAI model.</li> <li>Passing any model name + a <code>ModelProvider</code> that can map that name to a Model instance.</li> <li>Directly providing a <code>Model</code> implementation.</li> </ol> <p>Note</p> <p>While our SDK supports both the <code>OpenAIResponsesModel</code> and the <code>OpenAIChatCompletionsModel</code> shapes, we recommend using a single model shape for each workflow because the two shapes support a different set of features and tools. If your workflow requires mixing and matching model shapes, make sure that all the features you're using are available on both.</p> <pre><code>from cai.sdk.agents import Agent, Runner, AsyncOpenAI, OpenAIChatCompletionsModel\nimport asyncio\n\nspanish_agent = Agent(\n    name=\"Spanish agent\",\n    instructions=\"You only speak Spanish.\",\n    model=\"o3-mini\", # (1)!\n)\n\nenglish_agent = Agent(\n    name=\"English agent\",\n    instructions=\"You only speak English\",\n    model=OpenAIChatCompletionsModel( # (2)!\n        model=\"gpt-4o\",\n        openai_client=AsyncOpenAI()\n    ),\n)\n\ntriage_agent = Agent(\n    name=\"Triage agent\",\n    instructions=\"Handoff to the appropriate agent based on the language of the request.\",\n    handoffs=[spanish_agent, english_agent],\n    model=\"gpt-3.5-turbo\",\n)\n\nasync def main():\n    result = await Runner.run(triage_agent, input=\"Hola, \u00bfc\u00f3mo est\u00e1s?\")\n    print(result.final_output)\n</code></pre> <ol> <li>Sets the name of an OpenAI model directly.</li> <li>Provides a <code>Model</code> implementation.</li> </ol>"},{"location":"models/#using-other-llm-providers","title":"Using other LLM providers","text":"<p>You can use other LLM providers in 3 ways (examples here):</p> <ol> <li><code>set_default_openai_client</code> is useful in cases where you want to globally use an instance of <code>AsyncOpenAI</code> as the LLM client. This is for cases where the LLM provider has an OpenAI compatible API endpoint, and you can set the <code>base_url</code> and <code>api_key</code>. See a configurable example in examples/model_providers/custom_example_global.py.</li> <li><code>ModelProvider</code> is at the <code>Runner.run</code> level. This lets you say \"use a custom model provider for all agents in this run\". See a configurable example in examples/model_providers/custom_example_provider.py.</li> <li><code>Agent.model</code> lets you specify the model on a specific Agent instance. This enables you to mix and match different providers for different agents. See a configurable example in examples/model_providers/custom_example_agent.py.</li> </ol> <p>In cases where you do not have an API key from <code>platform.openai.com</code>, we recommend disabling tracing via <code>set_tracing_disabled()</code>, or setting up a different tracing processor.</p> <p>Note</p> <p>In these examples, we use the Chat Completions API/model, because most LLM providers don't yet support the Responses API. If your LLM provider does support it, we recommend using Responses.</p>"},{"location":"models/#common-issues-with-using-other-llm-providers","title":"Common issues with using other LLM providers","text":""},{"location":"models/#tracing-client-error-401","title":"Tracing client error 401","text":"<p>If you get errors related to tracing, this is because traces are uploaded to OpenAI servers, and you don't have an OpenAI API key. You have three options to resolve this:</p> <ol> <li>Disable tracing entirely: <code>set_tracing_disabled(True)</code>.</li> <li>Set an OpenAI key for tracing: <code>set_tracing_export_api_key(...)</code>. This API key will only be used for uploading traces, and must be from platform.openai.com.</li> <li>Use a non-OpenAI trace processor. See the tracing docs.</li> </ol>"},{"location":"models/#responses-api-support","title":"Responses API support","text":"<p>The SDK uses the Responses API by default, but most other LLM providers don't yet support it. You may see 404s or similar issues as a result. To resolve, you have two options:</p> <ol> <li>Call <code>set_default_openai_api(\"chat_completions\")</code>. This works if you are setting <code>OPENAI_API_KEY</code> and <code>OPENAI_BASE_URL</code> via environment vars.</li> <li>Use <code>OpenAIChatCompletionsModel</code>. There are examples here.</li> </ol>"},{"location":"models/#structured-outputs-support","title":"Structured outputs support","text":"<p>Some model providers don't have support for structured outputs. This sometimes results in an error that looks something like this:</p> <pre><code>BadRequestError: Error code: 400 - {'error': {'message': \"'response_format.type' : value is not one of the allowed values ['text','json_object']\", 'type': 'invalid_request_error'}}\n</code></pre> <p>This is a shortcoming of some model providers - they support JSON outputs, but don't allow you to specify the <code>json_schema</code> to use for the output. We are working on a fix for this, but we suggest relying on providers that do have support for JSON schema output, because otherwise your app will often break because of malformed JSON.</p>"},{"location":"multi_agent/","title":"Orchestrating multiple agents","text":"<p>Orchestration refers to the flow of agents in your app. Which agents run, in what order, and how do they decide what happens next? There are two main ways to orchestrate agents:</p> <ol> <li>Allowing the LLM to make decisions: this uses the intelligence of an LLM to plan, reason, and decide on what steps to take based on that.</li> <li>Orchestrating via code: determining the flow of agents via your code.</li> </ol> <p>You can mix and match these patterns. Each has their own tradeoffs, described below.</p> <p>We have a number of examples in examples/cai/agent_patterns.</p>"},{"location":"multi_agent/#orchestrating-via-llm","title":"\u25c9\u00a0Orchestrating via LLM","text":"<p>An agent is an LLM equipped with instructions, tools and handoffs. This means that given an open-ended task, the LLM can autonomously plan how it will tackle the task, using tools to take actions and acquire data, and using handoffs to delegate tasks to sub-agents. </p> <p>You could also use an agent as a tool. The agents operates independently on its provided input \u2014without access to prior conversation history or \"taking over\" the conversation - completes its specific task, and returns the result to the calling (parent) agent.</p>"},{"location":"multi_agent/#orchestrating-via-code","title":"\u25c9\u00a0Orchestrating via code","text":"<p>While orchestrating via LLM is powerful, orchestrating via code makes tasks more deterministic and predictable, in terms of speed, cost and performance. Common patterns here are:</p> <ul> <li> <p>Using structured outputs to generate well formed data that you can inspect with your code. </p> </li> <li> <p>Using a determinitstic pattern: Breaking down a task into a series of smaller steps. Chaining multiple agents, each step can be performed by an agent, and the output of one agent is used as input to the next. </p> </li> <li> <p>Using Guardrails and LLM_as_judge: They are agents that evaluates and provides feedback, until they says the inputs/outputs passes certain criteria. The agent ensures inputs/outputs are appropriate.</p> </li> <li> <p>Paralelization of task: Running multiple agents in parallel. This is useful for speed when you have multiple tasks that don't depend on each other.</p> </li> </ul>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#create-a-project-and-virtual-environment","title":"Create a project and virtual environment","text":"<p>You'll only need to do this once.</p> <pre><code>mkdir my_project\ncd my_project\npython -m venv .venv\n</code></pre>"},{"location":"quickstart/#activate-the-virtual-environment","title":"Activate the virtual environment","text":"<p>Do this every time you start a new terminal session.</p> <pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"quickstart/#install-the-agents-sdk","title":"Install the Agents SDK","text":"<pre><code>pip install openai-agents # or `uv add openai-agents`, etc\n</code></pre>"},{"location":"quickstart/#set-an-openai-api-key","title":"Set an OpenAI API key","text":"<p>If you don't have one, follow these instructions to create an OpenAI API key.</p> <pre><code>export OPENAI_API_KEY=sk-...\n</code></pre>"},{"location":"quickstart/#create-your-first-agent","title":"Create your first agent","text":"<p>Agents are defined with instructions, a name, and optional config (such as <code>model_config</code>)</p> <pre><code>from cai.sdk.agents import Agent\n\nagent = Agent(\n    name=\"Math Tutor\",\n    instructions=\"You provide help with math problems. Explain your reasoning at each step and include examples\",\n)\n</code></pre>"},{"location":"quickstart/#add-a-few-more-agents","title":"Add a few more agents","text":"<p>Additional agents can be defined in the same way. <code>handoff_descriptions</code> provide additional context for determining handoff routing</p> <pre><code>from cai.sdk.agents import Agent\n\nhistory_tutor_agent = Agent(\n    name=\"History Tutor\",\n    handoff_description=\"Specialist agent for historical questions\",\n    instructions=\"You provide assistance with historical queries. Explain important events and context clearly.\",\n)\n\nmath_tutor_agent = Agent(\n    name=\"Math Tutor\",\n    handoff_description=\"Specialist agent for math questions\",\n    instructions=\"You provide help with math problems. Explain your reasoning at each step and include examples\",\n)\n</code></pre>"},{"location":"quickstart/#define-your-handoffs","title":"Define your handoffs","text":"<p>On each agent, you can define an inventory of outgoing handoff options that the agent can choose from to decide how to make progress on their task.</p> <pre><code>triage_agent = Agent(\n    name=\"Triage Agent\",\n    instructions=\"You determine which agent to use based on the user's homework question\",\n    handoffs=[history_tutor_agent, math_tutor_agent]\n)\n</code></pre>"},{"location":"quickstart/#run-the-agent-orchestration","title":"Run the agent orchestration","text":"<p>Let's check that the workflow runs and the triage agent correctly routes between the two specialist agents.</p> <pre><code>from cai.sdk.agents import Runner\n\nasync def main():\n    result = await Runner.run(triage_agent, \"What is the capital of France?\")\n    print(result.final_output)\n</code></pre>"},{"location":"quickstart/#add-a-guardrail","title":"Add a guardrail","text":"<p>You can define custom guardrails to run on the input or output.</p> <pre><code>from cai.sdk.agents import GuardrailFunctionOutput, Agent, Runner\nfrom pydantic import BaseModel\n\nclass HomeworkOutput(BaseModel):\n    is_homework: bool\n    reasoning: str\n\nguardrail_agent = Agent(\n    name=\"Guardrail check\",\n    instructions=\"Check if the user is asking about homework.\",\n    output_type=HomeworkOutput,\n)\n\nasync def homework_guardrail(ctx, agent, input_data):\n    result = await Runner.run(guardrail_agent, input_data, context=ctx.context)\n    final_output = result.final_output_as(HomeworkOutput)\n    return GuardrailFunctionOutput(\n        output_info=final_output,\n        tripwire_triggered=not final_output.is_homework,\n    )\n</code></pre>"},{"location":"quickstart/#put-it-all-together","title":"Put it all together","text":"<p>Let's put it all together and run the entire workflow, using handoffs and the input guardrail.</p> <pre><code>from cai.sdk.agents import Agent, InputGuardrail,GuardrailFunctionOutput, Runner\nfrom pydantic import BaseModel\nimport asyncio\n\nclass HomeworkOutput(BaseModel):\n    is_homework: bool\n    reasoning: str\n\nguardrail_agent = Agent(\n    name=\"Guardrail check\",\n    instructions=\"Check if the user is asking about homework.\",\n    output_type=HomeworkOutput,\n)\n\nmath_tutor_agent = Agent(\n    name=\"Math Tutor\",\n    handoff_description=\"Specialist agent for math questions\",\n    instructions=\"You provide help with math problems. Explain your reasoning at each step and include examples\",\n)\n\nhistory_tutor_agent = Agent(\n    name=\"History Tutor\",\n    handoff_description=\"Specialist agent for historical questions\",\n    instructions=\"You provide assistance with historical queries. Explain important events and context clearly.\",\n)\n\n\nasync def homework_guardrail(ctx, agent, input_data):\n    result = await Runner.run(guardrail_agent, input_data, context=ctx.context)\n    final_output = result.final_output_as(HomeworkOutput)\n    return GuardrailFunctionOutput(\n        output_info=final_output,\n        tripwire_triggered=not final_output.is_homework,\n    )\n\ntriage_agent = Agent(\n    name=\"Triage Agent\",\n    instructions=\"You determine which agent to use based on the user's homework question\",\n    handoffs=[history_tutor_agent, math_tutor_agent],\n    input_guardrails=[\n        InputGuardrail(guardrail_function=homework_guardrail),\n    ],\n)\n\nasync def main():\n    result = await Runner.run(triage_agent, \"who was the first president of the united states?\")\n    print(result.final_output)\n\n    result = await Runner.run(triage_agent, \"what is life\")\n    print(result.final_output)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"quickstart/#view-your-traces","title":"View your traces","text":"<p>To review what happened during your agent run, navigate to the Trace viewer in the OpenAI Dashboard to view traces of your agent runs.</p>"},{"location":"quickstart/#next-steps","title":"Next steps","text":"<p>Learn how to build more complex agentic flows:</p> <ul> <li>Learn about how to configure Agents.</li> <li>Learn about running agents.</li> <li>Learn about tools, guardrails and models.</li> </ul>"},{"location":"results/","title":"Results","text":"<p>When you call the <code>Runner.run</code> methods, you either get a:</p> <ul> <li><code>RunResult</code> if you call <code>run</code> or <code>run_sync</code></li> <li><code>RunResultStreaming</code> if you call <code>run_streamed</code></li> </ul> <p>Both of these inherit from <code>RunResultBase</code>, which is where most useful information is present.</p>"},{"location":"results/#final-output","title":"Final output","text":"<p>The <code>final_output</code> property contains the final output of the last agent that ran. This is either:</p> <ul> <li>a <code>str</code>, if the last agent didn't have an <code>output_type</code> defined</li> <li>an object of type <code>last_agent.output_type</code>, if the agent had an output type defined.</li> </ul> <p>Note</p> <p><code>final_output</code> is of type <code>Any</code>. We can't statically type this, because of handoffs. If handoffs occur, that means any Agent might be the last agent, so we don't statically know the set of possible output types.</p>"},{"location":"results/#inputs-for-the-next-turn","title":"Inputs for the next turn","text":"<p>You can use <code>result.to_input_list()</code> to turn the result into an input list that concatenates the original input you provided, to the items generated during the agent run. This makes it convenient to take the outputs of one agent run and pass them into another run, or to run it in a loop and append new user inputs each time.</p>"},{"location":"results/#last-agent","title":"Last agent","text":"<p>The <code>last_agent</code> property contains the last agent that ran. Depending on your application, this is often useful for the next time the user inputs something. For example, if you have a frontline triage agent that hands off to a language-specific agent, you can store the last agent, and re-use it the next time the user messages the agent.</p>"},{"location":"results/#new-items","title":"New items","text":"<p>The <code>new_items</code> property contains the new items generated during the run. The items are <code>RunItem</code>s. A run item wraps the raw item generated by the LLM.</p> <ul> <li><code>MessageOutputItem</code> indicates a message from the LLM. The raw item is the message generated.</li> <li><code>HandoffCallItem</code> indicates that the LLM called the handoff tool. The raw item is the tool call item from the LLM.</li> <li><code>HandoffOutputItem</code> indicates that a handoff occurred. The raw item is the tool response to the handoff tool call. You can also access the source/target agents from the item.</li> <li><code>ToolCallItem</code> indicates that the LLM invoked a tool.</li> <li><code>ToolCallOutputItem</code> indicates that a tool was called. The raw item is the tool response. You can also access the tool output from the item.</li> <li><code>ReasoningItem</code> indicates a reasoning item from the LLM. The raw item is the reasoning generated.</li> </ul>"},{"location":"results/#other-information","title":"Other information","text":""},{"location":"results/#guardrail-results","title":"Guardrail results","text":"<p>The <code>input_guardrail_results</code> and <code>output_guardrail_results</code> properties contain the results of the guardrails, if any. Guardrail results can sometimes contain useful information you want to log or store, so we make these available to you.</p>"},{"location":"results/#raw-responses","title":"Raw responses","text":"<p>The <code>raw_responses</code> property contains the <code>ModelResponse</code>s generated by the LLM.</p>"},{"location":"results/#original-input","title":"Original input","text":"<p>The <code>input</code> property contains the original input you provided to the <code>run</code> method. In most cases you won't need this, but it's available in case you do.</p>"},{"location":"running_agents/","title":"Running agents","text":"<p>You can run agents via the <code>Runner</code> class. You have 3 options:</p> <ol> <li><code>Runner.run()</code>, which runs async and returns a <code>RunResult</code>.</li> <li><code>Runner.run_sync()</code>, which is a sync method and just runs <code>.run()</code> under the hood.</li> <li><code>Runner.run_streamed()</code>, which runs async and returns a <code>RunResultStreaming</code>. It calls the LLM in streaming mode, and streams those events to you as they are received.</li> </ol> <pre><code>from cai.sdk.agents import Agent, Runner\n\nasync def main():\n    agent = Agent(name=\"Assistant\", instructions=\"You are a helpful assistant\")\n\n    result = await Runner.run(agent, \"Write a haiku about recursion in programming.\")\n    print(result.final_output)\n    # Code within the code,\n    # Functions calling themselves,\n    # Infinite loop's dance.\n</code></pre> <p>Read more in the results guide.</p>"},{"location":"running_agents/#the-agent-loop","title":"The agent loop","text":"<p>When you use the run method in <code>Runner</code>, you pass in a starting agent and input. The input can either be a string (which is considered a user message), or a list of input items, which are the items in the OpenAI Responses API.</p> <p>The runner then runs a loop:</p> <ol> <li>We call the LLM for the current agent, with the current input.</li> <li>The LLM produces its output.<ol> <li>If the LLM returns a <code>final_output</code>, the loop ends and we return the result.</li> <li>If the LLM does a handoff, we update the current agent and input, and re-run the loop.</li> <li>If the LLM produces tool calls, we run those tool calls, append the results, and re-run the loop.</li> </ol> </li> <li>If we exceed the <code>max_turns</code> passed, we raise a <code>MaxTurnsExceeded</code> exception.</li> </ol> <p>Note</p> <p>The rule for whether the LLM output is considered as a \"final output\" is that it produces text output with the desired type, and there are no tool calls.</p>"},{"location":"running_agents/#streaming","title":"Streaming","text":"<p>Streaming allows you to additionally receive streaming events as the LLM runs. Once the stream is done, the <code>RunResultStreaming</code> will contain the complete information about the run, including all the new outputs produces. You can call <code>.stream_events()</code> for the streaming events. Read more in the streaming guide.</p>"},{"location":"running_agents/#run-config","title":"Run config","text":"<p>The <code>run_config</code> parameter lets you configure some global settings for the agent run:</p> <ul> <li><code>model</code>: Allows setting a global LLM model to use, irrespective of what <code>model</code> each Agent has.</li> <li><code>model_provider</code>: A model provider for looking up model names, which defaults to OpenAI.</li> <li><code>model_settings</code>: Overrides agent-specific settings. For example, you can set a global <code>temperature</code> or <code>top_p</code>.</li> <li><code>input_guardrails</code>, <code>output_guardrails</code>: A list of input or output guardrails to include on all runs.</li> <li><code>handoff_input_filter</code>: A global input filter to apply to all handoffs, if the handoff doesn't already have one. The input filter allows you to edit the inputs that are sent to the new agent. See the documentation in <code>Handoff.input_filter</code> for more details.</li> <li><code>tracing_disabled</code>: Allows you to disable tracing for the entire run.</li> <li><code>trace_include_sensitive_data</code>: Configures whether traces will include potentially sensitive data, such as LLM and tool call inputs/outputs.</li> <li><code>workflow_name</code>, <code>trace_id</code>, <code>group_id</code>: Sets the tracing workflow name, trace ID and trace group ID for the run. We recommend at least setting <code>workflow_name</code>. The session ID is an optional field that lets you link traces across multiple runs.</li> <li><code>trace_metadata</code>: Metadata to include on all traces.</li> </ul>"},{"location":"running_agents/#conversationschat-threads","title":"Conversations/chat threads","text":"<p>Calling any of the run methods can result in one or more agents running (and hence one or more LLM calls), but it represents a single logical turn in a chat conversation. For example:</p> <ol> <li>User turn: user enter text</li> <li>Runner run: first agent calls LLM, runs tools, does a handoff to a second agent, second agent runs more tools, and then produces an output.</li> </ol> <p>At the end of the agent run, you can choose what to show to the user. For example, you might show the user every new item generated by the agents, or just the final output. Either way, the user might then ask a followup question, in which case you can call the run method again.</p> <p>You can use the base <code>RunResultBase.to_input_list()</code> method to get the inputs for the next turn.</p> <pre><code>async def main():\n    agent = Agent(name=\"Assistant\", instructions=\"Reply very concisely.\")\n\n    with trace(workflow_name=\"Conversation\", group_id=thread_id):\n        # First turn\n        result = await Runner.run(agent, \"What is phishing?\")\n        print(result.final_output)\n        # Expected: A type of cyberattack where users are tricked into giving sensitive info.\n\n        # Second turn\n        new_input = result.to_input_list() + [{\"role\": \"user\", \"content\": \"How can I protect myself from it?\"}]\n        result = await Runner.run(agent, new_input)\n        print(result.final_output)\n        # Expected: Use email filters, don't click unknown links, and enable 2FA.\n</code></pre>"},{"location":"running_agents/#exceptions","title":"Exceptions","text":"<p>The SDK raises exceptions in certain cases. The full list is in <code>cai.sdk.agents.exceptions</code>. As an overview:</p> <ul> <li><code>AgentsException</code> is the base class for all exceptions raised.</li> <li><code>MaxTurnsExceeded</code> is raised when the run exceeds the <code>max_turns</code> passed to the run methods.</li> <li><code>ModelBehaviorError</code> is raised when the model produces invalid outputs, e.g. malformed JSON or using non-existent tools.</li> <li><code>UserError</code> is raised when you (the person writing code using CAI) make an error using it .</li> <li><code>InputGuardrailTripwireTriggered</code>, <code>OutputGuardrailTripwireTriggered</code> is raised when a guardrail is tripped.</li> </ul>"},{"location":"streaming/","title":"Streaming","text":"<p>Streaming lets you subscribe to updates of the agent run as it proceeds. This can be useful for showing the end-user progress updates and partial responses.</p> <p>To stream, you can call <code>Runner.run_streamed()</code>, which will give you a <code>RunResultStreaming</code>. Calling <code>result.stream_events()</code> gives you an async stream of <code>StreamEvent</code> objects, which are described below.</p>"},{"location":"streaming/#raw-response-events","title":"Raw response events","text":"<p><code>RawResponsesStreamEvent</code> are raw events passed directly from the LLM. They are in OpenAI Responses API format, which means each event has a type (like <code>response.created</code>, <code>response.output_text.delta</code>, etc) and data. These events are useful if you want to stream response messages to the user as soon as they are generated.</p> <p>For example, this will output the text generated by the LLM token-by-token.</p> <pre><code>import asyncio\nfrom openai.types.responses import ResponseTextDeltaEvent\nfrom cai.sdk.agents import Agent, Runner\n\nasync def main():\n    agent = Agent(\n        name=\"Joker\",\n        instructions=\"CyberGuard.\",\n    )\n\n    result = Runner.run_streamed(agent, input=\"Please tell me 5 cybersecurity tips.\")\n    async for event in result.stream_events():\n        if event.type == \"raw_response_event\" and isinstance(event.data, ResponseTextDeltaEvent):\n            print(event.data.delta, end=\"\", flush=True)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"streaming/#run-item-events-and-agent-events","title":"Run item events and agent events","text":"<p><code>RunItemStreamEvent</code>s are higher level events. They inform you when an item has been fully generated. This allows you to push progress updates at the level of \"message generated\", \"tool ran\", etc, instead of each token. Similarly, <code>AgentUpdatedStreamEvent</code> gives you updates when the current agent changes (e.g. as the result of a handoff).</p> <p>For example, this will ignore raw events and stream updates to the user.</p> <pre><code>import asyncio\nimport random\nfrom cai.sdk.agents import Agent, ItemHelpers, Runner, function_tool\n\n@function_tool\ndef how_many_tips() -&gt; int:\n    return random.randint(1, 10)\n\n\nasync def main():\n    agent = Agent(\n        name=\"Joker\",\n        instructions=\"First call the `how_many_tips` tool, then tell that many cybersecurity tips.\",\n        tools=[how_many_tips],\n    )\n\n    result = Runner.run_streamed(\n        agent,\n        input=\"Hello\",\n    )\n    print(\"=== Run starting ===\")\n\n    async for event in result.stream_events():\n        # We'll ignore the raw responses event deltas\n        if event.type == \"raw_response_event\":\n            continue\n        # When the agent updates, print that\n        elif event.type == \"agent_updated_stream_event\":\n            print(f\"Agent updated: {event.new_agent.name}\")\n            continue\n        # When items are generated, print them\n        elif event.type == \"run_item_stream_event\":\n            if event.item.type == \"tool_call_item\":\n                print(\"-- Tool was called\")\n            elif event.item.type == \"tool_call_output_item\":\n                print(f\"-- Tool output: {event.item.output}\")\n            elif event.item.type == \"message_output_item\":\n                print(f\"-- Message output:\\n {ItemHelpers.text_message_output(event.item)}\")\n            else:\n                pass  # Ignore other event types\n\n    print(\"=== Run complete ===\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"tools/","title":"Tools","text":"<p>Tools let agents take actions: things like fetching data, running code, calling external APIs, and even using a computer. There are three classes of tools in the CAI Agents</p> <ul> <li>Hosted tools: these run on LLM servers alongside the AI models. CAI offers some tools</li> <li>Function calling: these allow you to use any Python function as a tool.</li> <li>Agents as tools: this allows you to use an agent as a tool, allowing Agents to call other agents without handing off to them.</li> </ul>"},{"location":"tools/#hosted-tools","title":"Hosted tools","text":"<p>CAI offers a few built-in tools when using the <code>OpenAIResponsesModel</code>. They are in tools and grouped in 6 major categories inspired by the security kill chain[2]:</p> <ol> <li>Reconnaissance and weaponization - reconnaissance  (crypto, listing, etc)</li> <li>Exploitation - exploitation</li> <li>Privilege escalation - escalation</li> <li>Lateral movement - lateral</li> <li>Data exfiltration - exfiltration</li> <li>Command and control - control</li> </ol> <pre><code>from cai.sdk.agents import Agent, Runner, OpenAIChatCompletionsModel\nfrom cai.tools.reconnaissance.generic_linux_command import generic_linux_command \nfrom openai import AsyncOpenAI\n\none_tool_agent = Agent(\n    name=\"CTF agent\",\n    description=\"Agent focused on listing directories\",\n    instructions=\"You are a Cybersecurity expert Leader facing a CTF challenge.\",\n    tools=[\n        generic_linux_command,\n    ],\n    model=OpenAIChatCompletionsModel(\n        model=\"qwen2.5:14b\",\n        openai_client=AsyncOpenAI(),\n    )\n)\nasync def main():\n    result = await Runner.run(one_tool_agent, \"List all directories\")\n    print(result.final_output)\n</code></pre>"},{"location":"tools/#function-tools","title":"Function tools","text":"<p>You can use any Python function as a tool. The CAI will setup the tool automatically:</p> <ul> <li>The name of the tool will be the name of the Python function (or you can provide a name)</li> <li>Tool description will be taken from the docstring of the function (or you can provide a description)</li> <li>The schema for the function inputs is automatically created from the function's arguments</li> <li>Descriptions for each input are taken from the docstring of the function, unless disabled</li> </ul> <p>We use Python's <code>inspect</code> module to extract the function signature, along with <code>griffe</code> to parse docstrings and <code>pydantic</code> for schema creation.</p> <pre><code>import json\nfrom typing_extensions import TypedDict, Any\nfrom cai.sdk.agents import Agent, FunctionTool, RunContextWrapper, function_tool, OpenAIChatCompletionsModel\nfrom openai import AsyncOpenAI\n\nclass IPAddress(TypedDict):\n    ip: str\n\n\n@function_tool\nasync def check_ip_reputation(ip_data: IPAddress) -&gt; str:\n    \"\"\"Check if an IP address has a bad reputation.\n\n    Args:\n        ip_data: A dictionary with the IP address to check.\n    \"\"\"\n    # In a real system, this would query an IP reputation API\n    return \"malicious\" if ip_data[\"ip\"].startswith(\"192.168\") else \"clean\"\n\n\n@function_tool(name_override=\"read_log_file\")\ndef read_log_file(ctx: RunContextWrapper[Any], path: str, directory: str | None = None) -&gt; str:\n    \"\"\"Read the contents of a log file.\n\n    Args:\n        path: The path to the log file.\n        directory: The optional directory to search in.\n    \"\"\"\n    # In a real system, this would read from the filesystem logs\n    return \"&lt;log file contents: suspicious activity found&gt;\"\n\n\n# Create the cybersecurity agent\nagent = Agent(\n    name=\"CyberSecBot\",\n    tools=[check_ip_reputation, read_log_file],\n    model=OpenAIChatCompletionsModel(\n        model=\"qwen2.5:14b\",\n        openai_client=AsyncOpenAI(),\n    )\n)\n\n# Display metadata for each available tool\nfor tool in agent.tools:\n    if isinstance(tool, FunctionTool):\n        print(tool.name)\n        print(tool.description)\n        print(json.dumps(tool.params_json_schema, indent=2))\n        print()\n</code></pre> <ol> <li>You can use any Python types as arguments to your functions, and the function can be sync or async.</li> <li>Docstrings, if present, are used to capture descriptions and argument descriptions</li> <li>Functions can optionally take the <code>context</code> (must be the first argument). You can also set overrides, like the name of the tool, description, which docstring style to use, etc.</li> <li>You can pass the decorated functions to the list of tools.</li> </ol> Expand to see output <pre><code>check_ip_reputation\nCheck if an IP address has a bad reputation.\n{\n  \"$defs\": {\n    \"IPAddress\": {\n      \"properties\": {\n        \"ip\": {\n          \"title\": \"Ip\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"ip\"\n      ],\n      \"title\": \"IPAddress\",\n      \"type\": \"object\",\n      \"additionalProperties\": false\n    }\n  },\n  \"properties\": {\n    \"ip_data\": {\n      \"description\": \"A dictionary with the IP address to check.\",\n      \"properties\": {\n        \"ip\": {\n          \"title\": \"Ip\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"ip\"\n      ],\n      \"title\": \"IPAddress\",\n      \"type\": \"object\",\n      \"additionalProperties\": false\n    }\n  },\n  \"required\": [\n    \"ip_data\"\n  ],\n  \"title\": \"check_ip_reputation_args\",\n  \"type\": \"object\",\n  \"additionalProperties\": false\n}\n\nread_log_file\nRead the contents of a log file.\n{\n  \"properties\": {\n    \"path\": {\n      \"description\": \"The path to the log file.\",\n      \"title\": \"Path\",\n      \"type\": \"string\"\n    },\n    \"directory\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"description\": \"The optional directory to search in.\",\n      \"title\": \"Directory\"\n    }\n  },\n  \"required\": [\n    \"path\",\n    \"directory\"\n  ],\n  \"title\": \"read_log_file_args\",\n  \"type\": \"object\",\n  \"additionalProperties\": false\n}\n</code></pre>"},{"location":"tools/#custom-function-tools","title":"Custom function tools","text":"<p>Sometimes, you don't want to use a Python function as a tool. You can directly create a <code>FunctionTool</code> if you prefer. You'll need to provide:</p> <ul> <li><code>name</code></li> <li><code>description</code></li> <li><code>params_json_schema</code>, which is the JSON schema for the arguments</li> <li><code>on_invoke_tool</code>, which is an async function that receives the context and the arguments as a JSON string, and must return the tool output as a string.</li> </ul> <pre><code>from typing import Any\nfrom pydantic import BaseModel\nfrom cai.sdk.agents import RunContextWrapper, FunctionTool\n\n\ndef do_some_work(data: str) -&gt; str:\n    return \"done\"\n\nclass FunctionArgs(BaseModel):\n    username: str\n    age: int\n\n\nasync def run_function(ctx: RunContextWrapper[Any], args: str) -&gt; str:\n    parsed = FunctionArgs.model_validate_json(args)\n    return do_some_work(data=f\"{parsed.username} is {parsed.age} years old\")\n\n\ntool = FunctionTool(\n    name=\"process_user\",\n    description=\"Processes extracted user data\",\n    params_json_schema=FunctionArgs.model_json_schema(),\n    on_invoke_tool=run_function,\n)\n</code></pre>"},{"location":"tools/#automatic-argument-and-docstring-parsing","title":"Automatic argument and docstring parsing","text":"<p>As mentioned before, we automatically parse the function signature to extract the schema for the tool, and we parse the docstring to extract descriptions for the tool and for individual arguments. Some notes on that:</p> <ol> <li>The signature parsing is done via the <code>inspect</code> module. We use type annotations to understand the types for the arguments, and dynamically build a Pydantic model to represent the overall schema. It supports most types, including Python primitives, Pydantic models, TypedDicts, and more.</li> <li>We use <code>griffe</code> to parse docstrings. Supported docstring formats are <code>google</code>, <code>sphinx</code> and <code>numpy</code>. We attempt to automatically detect the docstring format, but this is best-effort and you can explicitly set it when calling <code>function_tool</code>. You can also disable docstring parsing by setting <code>use_docstring_info</code> to <code>False</code>.</li> </ol> <p>The code for the schema extraction lives in <code>cai.sdk.agents.function_schema</code>.</p>"},{"location":"tools/#agents-as-tools","title":"Agents as tools","text":"<p>In some workflows, you may want a central agent to orchestrate a network of specialized agents, instead of handing off control. You can do this by modeling agents as tools.</p> <pre><code>from cai.sdk.agents import Agent, Runner, OpenAIChatCompletionsModel\nfrom openai import AsyncOpenAI\nimport asyncio\n\n# Agent that simulates scanning an IP for threats\nip_scanner_agent = Agent(\n    name=\"IP Scanner\",\n    instructions=\"You receive an IP address and respond with its threat status (e.g., malicious or clean).\",\n)\n\n# Agent that simulates analyzing a log file\nlog_analyzer_agent = Agent(\n    name=\"Log Analyzer\",\n    instructions=\"You receive a log file path and respond with any suspicious findings from the logs.\",\n    model=OpenAIChatCompletionsModel(\n        model=\"qwen2.5:14b\",\n        openai_client=AsyncOpenAI(),\n    )\n)\n\n# Orchestrator agent that routes cybersecurity tasks to the correct tool\ncyber_orchestrator_agent = Agent(\n    name=\"Cyber Orchestrator\",\n    instructions=(\n        \"You are a cybersecurity assistant. Based on the user's request, you decide whether to scan an IP or analyze a log. \"\n        \"Use the appropriate tool for each task.\"\n    ),\n    tools=[\n        ip_scanner_agent.as_tool(\n            tool_name=\"scan_ip\",\n            tool_description=\"Scan an IP address for possible threats\",\n        ),\n        log_analyzer_agent.as_tool(\n            tool_name=\"analyze_log\",\n            tool_description=\"Analyze a system log file for suspicious activity\",\n        ),\n    ],\n    model=OpenAIChatCompletionsModel(\n        model=\"qwen2.5:14b\",\n        openai_client=AsyncOpenAI(),\n    )\n)\n\n# Main function that asks the orchestrator to scan an IP\nasync def main():\n    # Example input to scan an IP\n    result = await Runner.run(cyber_orchestrator_agent, input=\"Scan the IP address 192.168.0.10 for threats.\")\n    print(result.final_output)\n\n# Run the asynchronous main function\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"tools/#handling-errors-in-function-tools","title":"Handling errors in function tools","text":"<p>When you create a function tool via <code>@function_tool</code>, you can pass a <code>failure_error_function</code>. This is a function that provides an error response to the LLM in case the tool call crashes.</p> <ul> <li>By default (i.e. if you don't pass anything), it runs a <code>default_tool_error_function</code> which tells the LLM an error occurred.</li> <li>If you pass your own error function, it runs that instead, and sends the response to the LLM.</li> <li>If you explicitly pass <code>None</code>, then any tool call errors will be re-raised for you to handle. This could be a <code>ModelBehaviorError</code> if the model produced invalid JSON, or a <code>UserError</code> if your code crashed, etc.</li> </ul> <p>If you are manually creating a <code>FunctionTool</code> object, then you must handle errors inside the <code>on_invoke_tool</code> function.</p> <p>[1] Arguably, the Chain-of-Thought agentic pattern is a special case of the Hierarchical agentic pattern. [2] Kamhoua, C. A., Leslie, N. O., &amp; Weisman, M. J. (2018). Game theoretic modeling of advanced persistent threat in internet of things. Journal of Cyber Security and Information Systems. [3] Yao, S., Zhao, J., Yu, D., Du, N., Shafran, I., Narasimhan, K., &amp; Cao, Y. (2023, January). React: Synergizing reasoning and acting in language models. In International Conference on Learning Representations (ICLR).</p>"},{"location":"tracing/","title":"\u26a0\ufe0f Tracing","text":"<p>Warning</p> <p>The tracing feature is disabled as we're re-implementing it to be in-line with OpenTelemetry standards. The new implementation will be available in the future.</p> <p>The Agents SDK includes built-in tracing, collecting a comprehensive record of events during an agent run: LLM generations, tool calls, handoffs, guardrails, and even custom events that occur. Using the Traces dashboard, you can debug, visualize, and monitor your workflows during development and in production.</p> <p>Note</p> <p>Tracing is enabled by default. There are two ways to disable tracing:</p> <ol> <li>You can globally disable tracing by setting the env var <code>OPENAI_AGENTS_DISABLE_TRACING=1</code></li> <li>You can disable tracing for a single run by setting <code>cai.sdk.agents.run.RunConfig.tracing_disabled</code> to <code>True</code></li> </ol> <p>For organizations operating under a Zero Data Retention (ZDR) policy using OpenAI's APIs, tracing is unavailable.</p>"},{"location":"tracing/#traces-and-spans","title":"Traces and spans","text":"<ul> <li>Traces represent a single end-to-end operation of a \"workflow\". They're composed of Spans. Traces have the following properties:<ul> <li><code>workflow_name</code>: This is the logical workflow or app. For example \"Code generation\" or \"Customer service\".</li> <li><code>trace_id</code>: A unique ID for the trace. Automatically generated if you don't pass one. Must have the format <code>trace_&lt;32_alphanumeric&gt;</code>.</li> <li><code>group_id</code>: Optional group ID, to link multiple traces from the same conversation. For example, you might use a chat thread ID.</li> <li><code>disabled</code>: If True, the trace will not be recorded.</li> <li><code>metadata</code>: Optional metadata for the trace.</li> </ul> </li> <li>Spans represent operations that have a start and end time. Spans have:<ul> <li><code>started_at</code> and <code>ended_at</code> timestamps.</li> <li><code>trace_id</code>, to represent the trace they belong to</li> <li><code>parent_id</code>, which points to the parent Span of this Span (if any)</li> <li><code>span_data</code>, which is information about the Span. For example, <code>AgentSpanData</code> contains information about the Agent, <code>GenerationSpanData</code> contains information about the LLM generation, etc.</li> </ul> </li> </ul>"},{"location":"tracing/#default-tracing","title":"Default tracing","text":"<p>By default, the SDK traces the following:</p> <ul> <li>The entire <code>Runner.{run, run_sync, run_streamed}()</code> is wrapped in a <code>trace()</code>.</li> <li>Each time an agent runs, it is wrapped in <code>agent_span()</code></li> <li>LLM generations are wrapped in <code>generation_span()</code></li> <li>Function tool calls are each wrapped in <code>function_span()</code></li> <li>Guardrails are wrapped in <code>guardrail_span()</code></li> <li>Handoffs are wrapped in <code>handoff_span()</code></li> <li>Audio inputs (speech-to-text) are wrapped in a <code>transcription_span()</code></li> <li>Audio outputs (text-to-speech) are wrapped in a <code>speech_span()</code></li> <li>Related audio spans may be parented under a <code>speech_group_span()</code></li> </ul> <p>By default, the trace is named \"Agent trace\". You can set this name if you use <code>trace</code>, or you can can configure the name and other properties with the <code>RunConfig</code>.</p> <p>In addition, you can set up custom trace processors to push traces to other destinations (as a replacement, or secondary destination).</p>"},{"location":"tracing/#higher-level-traces","title":"Higher level traces","text":"<p>Sometimes, you might want multiple calls to <code>run()</code> to be part of a single trace. You can do this by wrapping the entire code in a <code>trace()</code>.</p> <pre><code>from cai.sdk.agents import Agent, Runner, trace\n\nasync def main():\n    agent = Agent(name=\"Joke generator\", instructions=\"Tell funny jokes.\")\n\n    with trace(\"Joke workflow\"): # (1)!\n        first_result = await Runner.run(agent, \"Tell me a joke\")\n        second_result = await Runner.run(agent, f\"Rate this joke: {first_result.final_output}\")\n        print(f\"Joke: {first_result.final_output}\")\n        print(f\"Rating: {second_result.final_output}\")\n</code></pre> <ol> <li>Because the two calls to <code>Runner.run</code> are wrapped in a <code>with trace()</code>, the individual runs will be part of the overall trace rather than creating two traces.</li> </ol>"},{"location":"tracing/#creating-traces","title":"Creating traces","text":"<p>You can use the <code>trace()</code> function to create a trace. Traces need to be started and finished. You have two options to do so:</p> <ol> <li>Recommended: use the trace as a context manager, i.e. <code>with trace(...) as my_trace</code>. This will automatically start and end the trace at the right time.</li> <li>You can also manually call <code>trace.start()</code> and <code>trace.finish()</code>.</li> </ol> <p>The current trace is tracked via a Python <code>contextvar</code>. This means that it works with concurrency automatically. If you manually start/end a trace, you'll need to pass <code>mark_as_current</code> and <code>reset_current</code> to <code>start()</code>/<code>finish()</code> to update the current trace.</p>"},{"location":"tracing/#creating-spans","title":"Creating spans","text":"<p>You can use the various <code>*_span()</code> methods to create a span. In general, you don't need to manually create spans. A <code>custom_span()</code> function is available for tracking custom span information.</p> <p>Spans are automatically part of the current trace, and are nested under the nearest current span, which is tracked via a Python <code>contextvar</code>.</p>"},{"location":"tracing/#sensitive-data","title":"Sensitive data","text":"<p>Certain spans may capture potentially sensitive data.</p> <p>The <code>generation_span()</code> stores the inputs/outputs of the LLM generation, and <code>function_span()</code> stores the inputs/outputs of function calls. These may contain sensitive data, so you can disable capturing that data via <code>RunConfig.trace_include_sensitive_data</code>.</p> <p>Similarly, Audio spans include base64-encoded PCM data for input and output audio by default. You can disable capturing this audio data by configuring <code>VoicePipelineConfig.trace_include_sensitive_audio_data</code>.</p>"},{"location":"tracing/#custom-tracing-processors","title":"Custom tracing processors","text":"<p>The high level architecture for tracing is:</p> <ul> <li>At initialization, we create a global <code>TraceProvider</code>, which is responsible for creating traces.</li> <li>We configure the <code>TraceProvider</code> with a <code>BatchTraceProcessor</code> that sends traces/spans in batches to a <code>BackendSpanExporter</code>, which exports the spans and traces to the OpenAI backend in batches.</li> </ul> <p>To customize this default setup, to send traces to alternative or additional backends or modifying exporter behavior, you have two options:</p> <ol> <li><code>add_trace_processor()</code> lets you add an additional trace processor that will receive traces and spans as they are ready. This lets you do your own processing in addition to sending traces to OpenAI's backend.</li> <li><code>set_trace_processors()</code> lets you replace the default processors with your own trace processors. This means traces will not be sent to the OpenAI backend unless you include a <code>TracingProcessor</code> that does so.</li> </ol>"},{"location":"tracing/#external-tracing-processors-list","title":"External tracing processors list","text":"<ul> <li>Weights &amp; Biases</li> <li>Arize-Phoenix</li> <li>MLflow (self-hosted/OSS</li> <li>MLflow (Databricks hosted</li> <li>Braintrust</li> <li>Pydantic Logfire</li> <li>AgentOps</li> <li>Scorecard</li> <li>Keywords AI</li> <li>LangSmith</li> <li>Maxim AI</li> <li>Comet Opik</li> <li>Langfuse</li> <li>Langtrace</li> </ul>"},{"location":"tracing_cai/","title":"\u26a0\ufe0f Tracing","text":"<p>We are in the process of implementing this feature.</p>"},{"location":"usage_tracking/","title":"CAI Global Usage Tracking","text":"<p>CAI now includes automatic global usage tracking that persists token usage and costs across all sessions to <code>$HOME/.cai/usage.json</code>.</p>"},{"location":"usage_tracking/#features","title":"Features","text":"<ul> <li>Automatic Tracking: All LLM interactions are automatically tracked</li> <li>Global Persistence: Usage data persists across all CAI sessions</li> <li>Model-Specific Stats: Track usage per model (GPT-4, Claude, etc.)</li> <li>Daily Breakdowns: View usage by day</li> <li>Session History: Track individual session costs and tokens</li> <li>Cost Calculation: Automatic cost calculation based on model pricing</li> </ul>"},{"location":"usage_tracking/#usage-data-structure","title":"Usage Data Structure","text":"<p>The <code>$HOME/.cai/usage.json</code> file contains:</p> <pre><code>{\n  \"global_totals\": {\n    \"total_cost\": 0.049836,\n    \"total_input_tokens\": 12067,\n    \"total_output_tokens\": 909,\n    \"total_requests\": 8,\n    \"total_sessions\": 4\n  },\n  \"model_usage\": {\n    \"claude-sonnet-4\": {\n      \"total_cost\": 0.049836,\n      \"total_input_tokens\": 12067,\n      \"total_output_tokens\": 909,\n      \"total_requests\": 8\n    }\n  },\n  \"daily_usage\": {\n    \"2025-06-11\": {\n      \"total_cost\": 0.049836,\n      \"total_input_tokens\": 12067,\n      \"total_output_tokens\": 909,\n      \"total_requests\": 8\n    }\n  },\n  \"sessions\": [...]\n}\n</code></pre>"},{"location":"usage_tracking/#viewing-usage-statistics","title":"Viewing Usage Statistics","text":""},{"location":"usage_tracking/#command-line-tool","title":"Command Line Tool","text":"<pre><code>python examples/basic/usage_tracking_example.py\n</code></pre> <p>This displays: - Overall usage totals - Usage by model - Recent daily usage - Recent session history</p>"},{"location":"usage_tracking/#export-usage-report","title":"Export Usage Report","text":"<pre><code>python examples/basic/usage_tracking_example.py export [filename]\n</code></pre>"},{"location":"usage_tracking/#reset-usage-statistics","title":"Reset Usage Statistics","text":"<pre><code>python examples/basic/usage_tracking_example.py reset\n</code></pre>"},{"location":"usage_tracking/#disabling-usage-tracking","title":"Disabling Usage Tracking","text":"<p>If you prefer not to track usage globally, set the environment variable:</p> <pre><code>export CAI_DISABLE_USAGE_TRACKING=true\n</code></pre>"},{"location":"usage_tracking/#implementation-details","title":"Implementation Details","text":"<p>The usage tracking is implemented in: - <code>src/cai/sdk/agents/global_usage_tracker.py</code> - Core tracking logic - <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> - Integration points - <code>src/cai/cli.py</code> - Session start/end hooks</p>"},{"location":"usage_tracking/#key-features","title":"Key Features:","text":"<ul> <li>Thread-Safe: Uses locks to ensure data consistency</li> <li>Interrupt-Safe: Handles Ctrl+C gracefully without blocking</li> <li>Atomic Writes: Uses temporary files and atomic rename operations</li> <li>Periodic Saves: Saves every 10 requests to minimize I/O</li> <li>Error Resilient: Silently continues if tracking fails</li> </ul>"},{"location":"usage_tracking/#privacy","title":"Privacy","text":"<p>All usage data is stored locally in your home directory. No data is sent to external servers. The tracking only records: - Token counts - Costs - Model names - Timestamps - Session IDs</p> <p>No conversation content or sensitive data is tracked.</p>"},{"location":"visualization/","title":"Agent Visualization","text":"<p>Agent visualization allows you to generate a structured graphical representation of agents and their relationships using Graphviz. This is useful for understanding how agents, tools, and handoffs interact within an application.</p>"},{"location":"visualization/#installation","title":"Installation","text":"<p>Install the optional <code>viz</code> dependency group:</p> <pre><code>pip install \"openai-agents[viz]\"\n</code></pre>"},{"location":"visualization/#generating-a-graph","title":"Generating a Graph","text":"<p>You can generate an agent visualization using the <code>draw_graph</code> function. This function creates a directed graph where:</p> <ul> <li>Agents are represented as yellow boxes.</li> <li>Tools are represented as green ellipses.</li> <li>Handoffs are directed edges from one agent to another.</li> </ul>"},{"location":"visualization/#example-usage","title":"Example Usage","text":"<pre><code>from agents import Agent, function_tool\nfrom agents.extensions.visualization import draw_graph\n\n@function_tool\ndef get_weather(city: str) -&gt; str:\n    return f\"The weather in {city} is sunny.\"\n\nspanish_agent = Agent(\n    name=\"Spanish agent\",\n    instructions=\"You only speak Spanish.\",\n)\n\nenglish_agent = Agent(\n    name=\"English agent\",\n    instructions=\"You only speak English\",\n)\n\ntriage_agent = Agent(\n    name=\"Triage agent\",\n    instructions=\"Handoff to the appropriate agent based on the language of the request.\",\n    handoffs=[spanish_agent, english_agent],\n    tools=[get_weather],\n)\n\ndraw_graph(triage_agent)\n</code></pre> <p>This generates a graph that visually represents the structure of the triage agent and its connections to sub-agents and tools.</p>"},{"location":"visualization/#understanding-the-visualization","title":"Understanding the Visualization","text":"<p>The generated graph includes:</p> <ul> <li>A start node (<code>__start__</code>) indicating the entry point.</li> <li>Agents represented as rectangles with yellow fill.</li> <li>Tools represented as ellipses with green fill.</li> <li>Directed edges indicating interactions:</li> <li>Solid arrows for agent-to-agent handoffs.</li> <li>Dotted arrows for tool invocations.</li> <li>An end node (<code>__end__</code>) indicating where execution terminates.</li> </ul>"},{"location":"visualization/#customizing-the-graph","title":"Customizing the Graph","text":""},{"location":"visualization/#showing-the-graph","title":"Showing the Graph","text":"<p>By default, <code>draw_graph</code> displays the graph inline. To show the graph in a separate window, write the following:</p> <pre><code>draw_graph(triage_agent).view()\n</code></pre>"},{"location":"visualization/#saving-the-graph","title":"Saving the Graph","text":"<p>By default, <code>draw_graph</code> displays the graph inline. To save it as a file, specify a filename:</p> <pre><code>draw_graph(triage_agent, filename=\"agent_graph.png\")\n</code></pre> <p>This will generate <code>agent_graph.png</code> in the working directory.</p>"},{"location":"cai/","title":"Cybersecurity AI (CAI)","text":"## \ud83c\udfaf Milestones [![](https://img.shields.io/badge/HTB_ranking-top_90_Spain_(5_days)-red.svg)](https://app.hackthebox.com/users/2268644) [![](https://img.shields.io/badge/HTB_ranking-top_50_Spain_(6_days)-red.svg)](https://app.hackthebox.com/users/2268644) [![](https://img.shields.io/badge/HTB_ranking-top_30_Spain_(7_days)-red.svg)](https://app.hackthebox.com/users/2268644) [![](https://img.shields.io/badge/HTB_ranking-top_500_World_(7_days)-red.svg)](https://app.hackthebox.com/users/2268644) [![](https://img.shields.io/badge/HTB_\"Human_vs_AI\"_CTF-top_1_(AIs)_world-red.svg)](https://ctf.hackthebox.com/event/2000/scoreboard) [![](https://img.shields.io/badge/HTB_\"Human_vs_AI\"_CTF-top_1_Spain-red.svg)](https://ctf.hackthebox.com/event/2000/scoreboard) [![](https://img.shields.io/badge/HTB_\"Human_vs_AI\"_CTF-top_20_World-red.svg)](https://ctf.hackthebox.com/event/2000/scoreboard) [![](https://img.shields.io/badge/HTB_\"Human_vs_AI\"_CTF-750_$-yellow.svg)](https://ctf.hackthebox.com/event/2000/scoreboard) [![](https://img.shields.io/badge/Mistral_AI_Robotics_Hackathon-2500_$-yellow.svg)](https://lu.ma/roboticshack?tk=RuryKF) [![](https://img.shields.io/badge/Bug_rewards-250_$-yellow.svg)](https://github.com/aliasrobotics/cai)  ## \ud83d\udce6 Package Attributes [![version](https://badge.fury.io/py/cai-framework.svg)](https://badge.fury.io/py/cai-framework) [![downloads](https://img.shields.io/pypi/dm/cai-framework)](https://pypistats.org/packages/cai-framework) [![Linux](https://img.shields.io/badge/Linux-Supported-brightgreen?logo=linux&amp;logoColor=white)](https://github.com/aliasrobotics/cai) [![OS X](https://img.shields.io/badge/OS%20X-Supported-brightgreen?logo=apple&amp;logoColor=white)](https://github.com/aliasrobotics/cai) [![Windows](https://img.shields.io/badge/Windows-Supported-brightgreen?logo=windows&amp;logoColor=white)](https://github.com/aliasrobotics/cai) [![Android](https://img.shields.io/badge/Android-Supported-brightgreen?logo=android&amp;logoColor=white)](https://github.com/aliasrobotics/cai) [![Discord](https://img.shields.io/badge/Discord-7289DA?logo=discord&amp;logoColor=white)](https://discord.gg/fnUFcTaQAC) [![arXiv](https://img.shields.io/badge/arXiv-2504.06017-b31b1b.svg)](https://arxiv.org/pdf/2504.06017)  <p>A lightweight, ergonomic framework for building bug bounty-ready Cybersecurity AIs (CAIs).</p> CAI with <code>alias0</code> on ROS message injection attacks in MiR-100 robot CAI with <code>alias0</code> on API vulnerability discovery at Mercado Libre CAI on JWT@PortSwigger CTF \u2014 Cybersecurity AI CAI on HackableII Boot2Root CTF \u2014 Cybersecurity AI <p>[!WARNING] \u26a0\ufe0f  CAI is in active development, so don't expect it to work flawlessly. Instead, contribute by raising an issue or sending a PR.</p> <p>Access to this library and the use of information, materials (or portions thereof), is not intended, and is prohibited, where such access or use violates applicable laws or regulations. By no means the authors encourage or promote the unauthorized tampering with running systems. This can cause serious human harm and material damages.</p> <p>By no means the authors of CAI encourage or promote the unauthorized tampering with compute systems. Please don't use the source code in here for cybercrime. Pentest for good instead. By downloading, using, or modifying this source code, you agree to the terms of the <code>LICENSE</code> and the limitations outlined in the <code>DISCLAIMER</code> file. </p>"},{"location":"cai/api-reference/core/","title":"Core API Reference","text":""},{"location":"cai/api-reference/core/#agent","title":"Agent","text":"<p>The <code>Agent</code> class is the main abstraction for implementing AI agents in CAI.</p> <pre><code>from cai import Agent\n\nclass MyAgent(Agent):\n    def __init__(self):\n        super().__init__()\n        # Initialize your agent here\n\n    async def run(self, input_data):\n        # Implement your agent's logic here\n        pass\n</code></pre>"},{"location":"cai/api-reference/core/#key-methods","title":"Key Methods","text":"<ul> <li><code>__init__()</code>: Initialize the agent</li> <li><code>run(input_data)</code>: Main execution method</li> <li><code>add_tool(tool)</code>: Add a tool to the agent</li> <li><code>remove_tool(tool_name)</code>: Remove a tool from the agent</li> </ul>"},{"location":"cai/api-reference/core/#tools","title":"Tools","text":"<p>Tools are the building blocks that agents use to interact with the world.</p> <pre><code>from cai import Tool\n\nclass MyTool(Tool):\n    def __init__(self):\n        super().__init__(\n            name=\"my_tool\",\n            description=\"Description of what the tool does\"\n        )\n\n    async def execute(self, **kwargs):\n        # Implement tool logic here\n        pass\n</code></pre>"},{"location":"cai/api-reference/core/#built-in-tools","title":"Built-in Tools","text":"<ul> <li><code>LinuxCmd</code>: Execute Linux commands</li> <li><code>WebSearch</code>: Perform web searches</li> <li><code>Code</code>: Execute code</li> <li><code>SSHTunnel</code>: Create SSH tunnels</li> </ul>"},{"location":"cai/api-reference/core/#patterns","title":"Patterns","text":"<p>Patterns are reusable agent behaviors that can be composed together.</p> <pre><code>from cai import Pattern\n\nclass MyPattern(Pattern):\n    def __init__(self):\n        super().__init__()\n\n    async def execute(self, context):\n        # Implement pattern logic here\n        pass\n</code></pre>"},{"location":"cai/api-reference/core/#handoffs","title":"Handoffs","text":"<p>Handoffs allow agents to transfer control to other agents or human operators.</p> <pre><code>from cai import Handoff\n\nclass MyHandoff(Handoff):\n    def __init__(self):\n        super().__init__()\n\n    async def execute(self, context):\n        # Implement handoff logic here\n        pass\n</code></pre>"},{"location":"cai/api-reference/core/#tracing","title":"Tracing","text":"<p>Tracing provides visibility into agent execution.</p> <pre><code>from cai import Tracer\n\ntracer = Tracer()\ntracer.start_trace()\n# ... agent execution ...\ntracer.end_trace()\n</code></pre>"},{"location":"cai/api-reference/core/#hitl-human-in-the-loop","title":"HITL (Human In The Loop)","text":"<p>HITL allows human operators to interact with agents during execution.</p> <pre><code>from cai import HITL\n\nclass MyHITL(HITL):\n    def __init__(self):\n        super().__init__()\n\n    async def execute(self, context):\n        # Implement HITL logic here\n        pass\n</code></pre>"},{"location":"cai/architecture/overview/","title":"Architecture Overview","text":"<p>CAI focuses on making cybersecurity agent coordination and execution lightweight, highly controllable, and useful for humans. To do so it builds upon 7 pillars: <code>Agent</code>s, <code>Tools</code>, <code>Handoffs</code>, <code>Patterns</code>, <code>Turns</code>, <code>Tracing</code> and <code>HITL</code>.</p> <pre><code>                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                  \u2502      HITL     \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502   Turns   \u2502\n                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Patterns \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  Handoffs \u2502\u25c0\u2500\u2500\u2500\u2500\u25b6 \u2502   Agents  \u2502\u25c0\u2500\u2500\u2500\u2500\u25b6\u2502    LLMs   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502                   \u2502\n                          \u2502                   \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Extensions \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  Tracing  \u2502       \u2502   Tools   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                              \u2502\n                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                          \u25bc             \u25bc          \u25bc             \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 LinuxCmd  \u2502\u2502 WebSearch \u2502\u2502    Code    \u2502\u2502 SSHTunnel \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>If you want to dive deeper into the code, check the following files as a start point for using CAI:</p> <pre><code>cai\n\u251c\u2500\u2500 __init__.py\n\u2502\n\u251c\u2500\u2500 cli.py                        # entrypoint for CLI\n\u251c\u2500\u2500 core.py                     # core implementation and agentic flow\n\u251c\u2500\u2500 types.py                   # main abstractions and classes\n\u251c\u2500\u2500 util.py                      # utility functions\n\u2502\n\u251c\u2500\u2500 repl                          # CLI aesthetics and commands\n\u2502   \u251c\u2500\u2500 commands\n\u2502   \u2514\u2500\u2500 ui\n\u251c\u2500\u2500 agents                      # agent implementations\n\u2502   \u251c\u2500\u2500 one_tool.py      # agent, one agent per file\n\u2502   \u2514\u2500\u2500 patterns            # agentic patterns, one per file\n\u2502\n\u251c\u2500\u2500 tools                        # agent tools\n\u2502   \u251c\u2500\u2500 common.py\n\ncaiextensions                      # out of tree Python extensions\n</code></pre>"},{"location":"cai/development/contributing/","title":"Contributing to CAI","text":""},{"location":"cai/development/contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/yourusername/cai.git\ncd cai\n</code></pre></p> </li> <li> <p>Create and activate a virtual environment: <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install development dependencies: <pre><code>pip install -e \".[dev]\"\n</code></pre></p> </li> </ol>"},{"location":"cai/development/contributing/#code-style","title":"Code Style","text":"<p>CAI follows PEP 8 style guidelines. We use: - Black for code formatting - isort for import sorting - flake8 for linting - mypy for type checking</p> <p>To run the code quality checks: <pre><code>black .\nisort .\nflake8\nmypy .\n</code></pre></p>"},{"location":"cai/development/contributing/#testing","title":"Testing","text":"<p>We use pytest for testing. To run the test suite: <pre><code>pytest\n</code></pre></p>"},{"location":"cai/development/contributing/#documentation","title":"Documentation","text":"<p>Documentation is built using MkDocs. To build and serve the documentation locally: <pre><code>mkdocs serve\n</code></pre></p>"},{"location":"cai/development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Run all tests and code quality checks</li> <li>Submit a pull request</li> </ol>"},{"location":"cai/development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please read and follow our Code of Conduct when contributing to CAI.</p>"},{"location":"cai/development/contributing/#license","title":"License","text":"<p>By contributing to CAI, you agree that your contributions will be licensed under the project's MIT License. </p>"},{"location":"cai/getting-started/configuration/","title":"Configuration","text":""},{"location":"cai/getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>CAI leverages the <code>.env</code> file to load configuration at launch. To facilitate the setup, the repo provides an exemplary <code>.env.example</code> file provides a template for configuring CAI's setup and your LLM API keys to work with desired LLM models.</p> <p>\u26a0\ufe0f  Important:</p> <p>CAI does NOT provide API keys for any model by default. Don't ask us to provide keys, use your own or host your own models.</p> <p>\u26a0\ufe0f  Note:</p> <p>The OPENAI_API_KEY must not be left blank. It should contain either \"sk-123\" (as a placeholder) or your actual API key. See https://github.com/aliasrobotics/cai/issues/27.</p>"},{"location":"cai/getting-started/configuration/#list-of-environment-variables","title":"List of Environment Variables","text":"Variable Description CTF_NAME Name of the CTF challenge to run (e.g. \"picoctf_static_flag\") CTF_CHALLENGE Specific challenge name within the CTF to test CTF_SUBNET Network subnet for the CTF container CTF_IP IP address for the CTF container CTF_INSIDE Whether to conquer the CTF from within container CAI_MODEL Model to use for agents CAI_DEBUG Set debug output level (0: Only tool outputs, 1: Verbose debug output, 2: CLI debug output) CAI_BRIEF Enable/disable brief output mode CAI_MAX_TURNS Maximum number of turns for agent interactions CAI_TRACING Enable/disable OpenTelemetry tracing CAI_AGENT_TYPE Specify the agents to use (boot2root, one_tool...) CAI_STATE Enable/disable stateful mode CAI_MEMORY Enable/disable memory mode (episodic, semantic, all) CAI_MEMORY_ONLINE Enable/disable online memory mode CAI_MEMORY_OFFLINE Enable/disable offline memory CAI_ENV_CONTEXT Add dirs and current env to llm context CAI_MEMORY_ONLINE_INTERVAL Number of turns between online memory updates CAI_PRICE_LIMIT Price limit for the conversation in dollars CAI_REPORT Enable/disable reporter mode (ctf, nis2, pentesting) CAI_SUPPORT_MODEL Model to use for the support agent CAI_SUPPORT_INTERVAL Number of turns between support agent executions CAI_WORKSPACE Defines the name of the workspace CAI_WORKSPACE_DIR Specifies the directory path where the workspace is located"},{"location":"cai/getting-started/configuration/#custom-openai-base-url-support","title":"Custom OpenAI Base URL Support","text":"<p>CAI supports configuring a custom OpenAI API base URL via the <code>OPENAI_BASE_URL</code> environment variable. This allows users to redirect API calls to a custom endpoint, such as a proxy or self-hosted OpenAI-compatible service.</p> <p>Example <code>.env</code> entry configuration: <pre><code>OLLAMA_API_BASE=\"https://custom-openai-proxy.com/v1\"\n</code></pre></p> <p>Or directly from the command line: <pre><code>OLLAMA_API_BASE=\"https://custom-openai-proxy.com/v1\" cai\n</code></pre></p>"},{"location":"cai/getting-started/configuration/#openrouter-integration","title":"OpenRouter Integration","text":"<p>The Cybersecurity AI (CAI) platform offers seamless integration with OpenRouter, a unified interface for Large Language Models (LLMs). This integration is crucial for users who wish to leverage advanced AI capabilities in their cybersecurity tasks. OpenRouter acts as a bridge, allowing CAI to communicate with various LLMs, thereby enhancing the flexibility and power of the AI agents used within CAI.</p> <p>To enable OpenRouter support in CAI, you need to configure your environment by adding specific entries to your <code>.env</code> file. This setup ensures that CAI can interact with the OpenRouter API, facilitating the use of sophisticated models like Meta-LLaMA. Here's how you can configure it:</p> <pre><code>CAI_AGENT_TYPE=redteam_agent\nCAI_MODEL=openrouter/meta-llama/llama-4-maverick\nOPENROUTER_API_KEY=&lt;sk-your-key&gt;  # note, add yours\nOPENROUTER_API_BASE=https://openrouter.ai/api/v1\n</code></pre>"},{"location":"cai/getting-started/installation/","title":"Installation","text":"<pre><code>pip install cai-framework\n</code></pre>"},{"location":"cai/getting-started/installation/#os-x","title":"OS X","text":"<pre><code>brew update &amp;&amp; \\\n    brew install git python@3.12\n\n# Create virtual environment\npython3.12 -m venv cai_env\n\n# Install the package from the local directory\nsource cai_env/bin/activate &amp;&amp; pip install cai-framework\n\n# Generate a .env file and set up with defaults\necho -e 'OPENAI_API_KEY=\"sk-1234\"\\nANTHROPIC_API_KEY=\"\"\\nOLLAMA=\"\"\\nPROMPT_TOOLKIT_NO_CPR=1' &gt; .env\n\n# Launch CAI\ncai  # first launch it can take up to 30 seconds\n</code></pre>"},{"location":"cai/getting-started/installation/#ubuntu-2404","title":"Ubuntu 24.04","text":"<pre><code>sudo apt-get update &amp;&amp; \\\n    sudo apt-get install -y git python3-pip python3.12-venv\n\n# Create the virtual environment\npython3.12 -m venv cai_env\n\n# Install the package from the local directory\nsource cai_env/bin/activate &amp;&amp; pip install cai-framework\n\n# Generate a .env file and set up with defaults\necho -e 'OPENAI_API_KEY=\"sk-1234\"\\nANTHROPIC_API_KEY=\"\"\\nOLLAMA=\"\"\\nPROMPT_TOOLKIT_NO_CPR=1' &gt; .env\n\n# Launch CAI\ncai  # first launch it can take up to 30 seconds\n</code></pre>"},{"location":"cai/getting-started/installation/#ubuntu-2004","title":"Ubuntu 20.04","text":"<pre><code>sudo apt-get update &amp;&amp; \\\n    sudo apt-get install -y software-properties-common\n\n# Fetch Python 3.12\nsudo add-apt-repository ppa:deadsnakes/ppa &amp;&amp; sudo apt update\nsudo apt install python3.12 python3.12-venv python3.12-dev -y\n\n# Create the virtual environment\npython3.12 -m venv cai_env\n\n# Install the package from the local directory\nsource cai_env/bin/activate &amp;&amp; pip install cai-framework\n\n# Generate a .env file and set up with defaults\necho -e 'OPENAI_API_KEY=\"sk-1234\"\\nANTHROPIC_API_KEY=\"\"\\nOLLAMA=\"\"\\nPROMPT_TOOLKIT_NO_CPR=1' &gt; .env\n\n# Launch CAI\ncai  # first launch it can take up to 30 seconds\n</code></pre>"},{"location":"cai/getting-started/installation/#windows-wsl","title":"Windows WSL","text":"<p>Go to the Microsoft page: <code>https://learn.microsoft.com/en-us/windows/wsl/install</code>.  Here you will find all the instructions to install WSL</p> <p>From Powershell write: <code>wsl --install</code></p> <pre><code>sudo apt-get update &amp;&amp; \\\n    sudo apt-get install -y git python3-pip python3-venv\n\n# Create the virtual environment\npython3 -m venv cai_env\n\n# Install the package from the local directory\nsource cai_env/bin/activate &amp;&amp; pip install cai-framework\n\n# Generate a .env file and set up with defaults\necho -e 'OPENAI_API_KEY=\"sk-1234\"\\nANTHROPIC_API_KEY=\"\"\\nOLLAMA=\"\"\\nPROMPT_TOOLKIT_NO_CPR=1' &gt; .env\n\n# Launch CAI\ncai  # first launch it can take up to 30 seconds\n</code></pre>"},{"location":"cai/getting-started/installation/#android","title":"Android","text":"<p>We recommend having at least 8 GB of RAM:</p> <ol> <li> <p>First of all, install userland https://play.google.com/store/apps/details?id=tech.ula&amp;hl=es</p> </li> <li> <p>Install Kali minimal in basic options (for free). [Or any other kali option if preferred]</p> </li> <li> <p>Update apt keys like in this example: https://superuser.com/questions/1644520/apt-get-update-issue-in-kali, inside UserLand's Kali terminal execute</p> </li> </ol> <pre><code># Get new apt keys\nwget http://http.kali.org/kali/pool/main/k/kali-archive-keyring/kali-archive-keyring_2024.1_all.deb\n\n# Install new apt keys\nsudo dpkg -i kali-archive-keyring_2024.1_all.deb &amp;&amp; rm kali-archive-keyring_2024.1_all.deb\n\n# Update APT repository\nsudo apt-get update\n\n# CAI requieres python 3.12, lets install it (CAI for kali in Android)\nsudo apt-get update &amp;&amp; sudo apt-get install -y git python3-pip build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev pkg-config\nwget https://www.python.org/ftp/python/3.12.4/Python-3.12.4.tar.xz\ntar xf Python-3.12.4.tar.xz\ncd ./configure --enable-optimizations\nsudo make altinstall # This command takes long to execute\n\n# Clone CAI's source code\ngit clone https://github.com/aliasrobotics/cai &amp;&amp; cd cai\n\n# Create virtual environment\npython3.12 -m venv cai_env\n\n# Install the package from the local directory\nsource cai_env/bin/activate &amp;&amp; pip3 install -e .\n\n# Generate a .env file and set up\ncp .env.example .env  # edit here your keys/models\n\n# Launch CAI\ncai\n</code></pre>"},{"location":"cai/getting-started/installation/#custom-openai-base-url-support","title":"Custom OpenAI Base URL Support","text":"<p>CAI supports configuring a custom OpenAI API base URL via the <code>OPENAI_BASE_URL</code> environment variable. This allows users to redirect API calls to a custom endpoint, such as a proxy or self-hosted OpenAI-compatible service.</p> <p>Example <code>.env</code> entry configuration: <pre><code>OLLAMA_API_BASE=\"https://custom-openai-proxy.com/v1\"\n</code></pre></p> <p>Or directly from the command line: <pre><code>OLLAMA_API_BASE=\"https://custom-openai-proxy.com/v1\" cai\n</code></pre></p>"},{"location":"ref/","title":"Agents module","text":""},{"location":"ref/#cai.sdk.agents.set_default_openai_key","title":"set_default_openai_key","text":"<pre><code>set_default_openai_key(\n    key: str, use_for_tracing: bool = True\n) -&gt; None\n</code></pre> <p>Set the default OpenAI API key to use for LLM requests (and optionally tracing(). This is only necessary if the OPENAI_API_KEY environment variable is not already set.</p> <p>If provided, this key will be used instead of the OPENAI_API_KEY environment variable.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The OpenAI key to use.</p> required <code>use_for_tracing</code> <code>bool</code> <p>Whether to also use this key to send traces to OpenAI. Defaults to True If False, you'll either need to set the OPENAI_API_KEY environment variable or call set_tracing_export_api_key() with the API key you want to use for tracing.</p> <code>True</code> Source code in <code>src/cai/sdk/agents/__init__.py</code> <pre><code>def set_default_openai_key(key: str, use_for_tracing: bool = True) -&gt; None:\n    \"\"\"Set the default OpenAI API key to use for LLM requests (and optionally tracing(). This is\n    only necessary if the OPENAI_API_KEY environment variable is not already set.\n\n    If provided, this key will be used instead of the OPENAI_API_KEY environment variable.\n\n    Args:\n        key: The OpenAI key to use.\n        use_for_tracing: Whether to also use this key to send traces to OpenAI. Defaults to True\n            If False, you'll either need to set the OPENAI_API_KEY environment variable or call\n            set_tracing_export_api_key() with the API key you want to use for tracing.\n    \"\"\"\n    _config.set_default_openai_key(key, use_for_tracing)\n</code></pre>"},{"location":"ref/#cai.sdk.agents.set_default_openai_client","title":"set_default_openai_client","text":"<pre><code>set_default_openai_client(\n    client: AsyncOpenAI, use_for_tracing: bool = True\n) -&gt; None\n</code></pre> <p>Set the default OpenAI client to use for LLM requests and/or tracing. If provided, this client will be used instead of the default OpenAI client.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AsyncOpenAI</code> <p>The OpenAI client to use.</p> required <code>use_for_tracing</code> <code>bool</code> <p>Whether to use the API key from this client for uploading traces. If False, you'll either need to set the OPENAI_API_KEY environment variable or call set_tracing_export_api_key() with the API key you want to use for tracing.</p> <code>True</code> Source code in <code>src/cai/sdk/agents/__init__.py</code> <pre><code>def set_default_openai_client(client: AsyncOpenAI, use_for_tracing: bool = True) -&gt; None:\n    \"\"\"Set the default OpenAI client to use for LLM requests and/or tracing. If provided, this\n    client will be used instead of the default OpenAI client.\n\n    Args:\n        client: The OpenAI client to use.\n        use_for_tracing: Whether to use the API key from this client for uploading traces. If False,\n            you'll either need to set the OPENAI_API_KEY environment variable or call\n            set_tracing_export_api_key() with the API key you want to use for tracing.\n    \"\"\"\n    _config.set_default_openai_client(client, use_for_tracing)\n</code></pre>"},{"location":"ref/#cai.sdk.agents.set_default_openai_api","title":"set_default_openai_api","text":"<pre><code>set_default_openai_api(\n    api: Literal[\"chat_completions\", \"responses\"],\n) -&gt; None\n</code></pre> <p>Set the default API to use for OpenAI LLM requests. By default, we will use the responses API but you can set this to use the chat completions API instead.</p> Source code in <code>src/cai/sdk/agents/__init__.py</code> <pre><code>def set_default_openai_api(api: Literal[\"chat_completions\", \"responses\"]) -&gt; None:\n    \"\"\"Set the default API to use for OpenAI LLM requests. By default, we will use the responses API\n    but you can set this to use the chat completions API instead.\n    \"\"\"\n    _config.set_default_openai_api(api)\n</code></pre>"},{"location":"ref/#cai.sdk.agents.set_tracing_export_api_key","title":"set_tracing_export_api_key","text":"<pre><code>set_tracing_export_api_key(api_key: str) -&gt; None\n</code></pre> <p>Set the OpenAI API key for the backend exporter.</p> Source code in <code>src/cai/sdk/agents/tracing/__init__.py</code> <pre><code>def set_tracing_export_api_key(api_key: str) -&gt; None:\n    \"\"\"\n    Set the OpenAI API key for the backend exporter.\n    \"\"\"\n    default_exporter().set_api_key(api_key)\n</code></pre>"},{"location":"ref/#cai.sdk.agents.set_tracing_disabled","title":"set_tracing_disabled","text":"<pre><code>set_tracing_disabled(disabled: bool) -&gt; None\n</code></pre> <p>Set whether tracing is globally disabled.</p> Source code in <code>src/cai/sdk/agents/tracing/__init__.py</code> <pre><code>def set_tracing_disabled(disabled: bool) -&gt; None:\n    \"\"\"\n    Set whether tracing is globally disabled.\n    \"\"\"\n    GLOBAL_TRACE_PROVIDER.set_disabled(disabled)\n</code></pre>"},{"location":"ref/#cai.sdk.agents.set_trace_processors","title":"set_trace_processors","text":"<pre><code>set_trace_processors(\n    processors: list[TracingProcessor],\n) -&gt; None\n</code></pre> <p>Set the list of trace processors. This will replace the current list of processors.</p> Source code in <code>src/cai/sdk/agents/tracing/__init__.py</code> <pre><code>def set_trace_processors(processors: list[TracingProcessor]) -&gt; None:\n    \"\"\"\n    Set the list of trace processors. This will replace the current list of processors.\n    \"\"\"\n    GLOBAL_TRACE_PROVIDER.set_processors(processors)\n</code></pre>"},{"location":"ref/#cai.sdk.agents.enable_verbose_stdout_logging","title":"enable_verbose_stdout_logging","text":"<pre><code>enable_verbose_stdout_logging()\n</code></pre> <p>Enables verbose logging to stdout. This is useful for debugging.</p> Source code in <code>src/cai/sdk/agents/__init__.py</code> <pre><code>def enable_verbose_stdout_logging():\n    \"\"\"Enables verbose logging to stdout. This is useful for debugging.\"\"\"\n    logger = logging.getLogger(\"openai.agents\")\n    logger.setLevel(logging.DEBUG)\n    logger.addHandler(logging.StreamHandler(sys.stdout))\n</code></pre>"},{"location":"ref/agent/","title":"<code>Agents</code>","text":""},{"location":"ref/agent/#cai.sdk.agents.agent.ToolsToFinalOutputFunction","title":"ToolsToFinalOutputFunction  <code>module-attribute</code>","text":"<pre><code>ToolsToFinalOutputFunction: TypeAlias = Callable[\n    [RunContextWrapper[TContext], list[FunctionToolResult]],\n    MaybeAwaitable[ToolsToFinalOutputResult],\n]\n</code></pre> <p>A function that takes a run context and a list of tool results, and returns a <code>ToolToFinalOutputResult</code>.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.ToolsToFinalOutputResult","title":"ToolsToFinalOutputResult  <code>dataclass</code>","text":"Source code in <code>src/cai/sdk/agents/agent.py</code> <pre><code>@dataclass\nclass ToolsToFinalOutputResult:\n    is_final_output: bool\n    \"\"\"Whether this is the final output. If False, the LLM will run again and receive the tool call\n    output.\n    \"\"\"\n\n    final_output: Any | None = None\n    \"\"\"The final output. Can be None if `is_final_output` is False, otherwise must match the\n    `output_type` of the agent.\n    \"\"\"\n</code></pre>"},{"location":"ref/agent/#cai.sdk.agents.agent.ToolsToFinalOutputResult.is_final_output","title":"is_final_output  <code>instance-attribute</code>","text":"<pre><code>is_final_output: bool\n</code></pre> <p>Whether this is the final output. If False, the LLM will run again and receive the tool call output.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.ToolsToFinalOutputResult.final_output","title":"final_output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>final_output: Any | None = None\n</code></pre> <p>The final output. Can be None if <code>is_final_output</code> is False, otherwise must match the <code>output_type</code> of the agent.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.StopAtTools","title":"StopAtTools","text":"<p>               Bases: <code>TypedDict</code></p> Source code in <code>src/cai/sdk/agents/agent.py</code> <pre><code>class StopAtTools(TypedDict):\n    stop_at_tool_names: list[str]\n    \"\"\"A list of tool names, any of which will stop the agent from running further.\"\"\"\n</code></pre>"},{"location":"ref/agent/#cai.sdk.agents.agent.StopAtTools.stop_at_tool_names","title":"stop_at_tool_names  <code>instance-attribute</code>","text":"<pre><code>stop_at_tool_names: list[str]\n</code></pre> <p>A list of tool names, any of which will stop the agent from running further.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent","title":"Agent  <code>dataclass</code>","text":"<p>               Bases: <code>Generic[TContext]</code></p> <p>An agent is an AI model configured with instructions, tools, guardrails, handoffs and more.</p> <p>We strongly recommend passing <code>instructions</code>, which is the \"system prompt\" for the agent. In addition, you can pass <code>handoff_description</code>, which is a human-readable description of the agent, used when the agent is used inside tools/handoffs.</p> <p>Agents are generic on the context type. The context is a (mutable) object you create. It is passed to tool functions, handoffs, guardrails, etc.</p> Source code in <code>src/cai/sdk/agents/agent.py</code> <pre><code>@dataclass\nclass Agent(Generic[TContext]):\n    \"\"\"An agent is an AI model configured with instructions, tools, guardrails, handoffs and more.\n\n    We strongly recommend passing `instructions`, which is the \"system prompt\" for the agent. In\n    addition, you can pass `handoff_description`, which is a human-readable description of the\n    agent, used when the agent is used inside tools/handoffs.\n\n    Agents are generic on the context type. The context is a (mutable) object you create. It is\n    passed to tool functions, handoffs, guardrails, etc.\n    \"\"\"\n\n    name: str\n    \"\"\"The name of the agent.\"\"\"\n\n    instructions: (\n        str\n        | Callable[\n            [RunContextWrapper[TContext], Agent[TContext]],\n            MaybeAwaitable[str],\n        ]\n        | None\n    ) = None\n    \"\"\"The instructions for the agent. Will be used as the \"system prompt\" when this agent is\n    invoked. Describes what the agent should do, and how it responds.\n\n    Can either be a string, or a function that dynamically generates instructions for the agent. If\n    you provide a function, it will be called with the context and the agent instance. It must\n    return a string.\n    \"\"\"\n\n    description: str | None = None\n    \"\"\"A description of the agent. This is used in the CLI to show the agent's description.\"\"\"\n\n    handoff_description: str | None = None\n    \"\"\"A description of the agent. This is used when the agent is used as a handoff, so that an\n    LLM knows what it does and when to invoke it.\n    \"\"\"\n\n    handoffs: list[Agent[Any] | Handoff[TContext]] = field(default_factory=list)\n    \"\"\"Handoffs are sub-agents that the agent can delegate to. You can provide a list of handoffs,\n    and the agent can choose to delegate to them if relevant. Allows for separation of concerns and\n    modularity.\n    \"\"\"\n\n    model: str | Model | None = None\n    \"\"\"The model implementation to use when invoking the LLM.\n\n    By default, if not set, the agent will use the default model configured in\n    `model_settings.DEFAULT_MODEL`.\n    \"\"\"\n\n    model_settings: ModelSettings = field(default_factory=ModelSettings)\n    \"\"\"Configures model-specific tuning parameters (e.g. temperature, top_p).\n    \"\"\"\n\n    tools: list[Tool] = field(default_factory=list)\n    \"\"\"A list of tools that the agent can use.\"\"\"\n\n    mcp_servers: list[MCPServer] = field(default_factory=list)\n    \"\"\"A list of [Model Context Protocol](https://modelcontextprotocol.io/) servers that\n    the agent can use. Every time the agent runs, it will include tools from these servers in the\n    list of available tools.\n\n    NOTE: You are expected to manage the lifecycle of these servers. Specifically, you must call\n    `server.connect()` before passing it to the agent, and `server.cleanup()` when the server is no\n    longer needed.\n    \"\"\"\n\n    input_guardrails: list[InputGuardrail[TContext]] = field(default_factory=list)\n    \"\"\"A list of checks that run in parallel to the agent's execution, before generating a\n    response. Runs only if the agent is the first agent in the chain.\n    \"\"\"\n\n    output_guardrails: list[OutputGuardrail[TContext]] = field(default_factory=list)\n    \"\"\"A list of checks that run on the final output of the agent, after generating a response.\n    Runs only if the agent produces a final output.\n    \"\"\"\n\n    output_type: type[Any] | None = None\n    \"\"\"The type of the output object. If not provided, the output will be `str`.\"\"\"\n\n    hooks: AgentHooks[TContext] | None = None\n    \"\"\"A class that receives callbacks on various lifecycle events for this agent.\n    \"\"\"\n\n    tool_use_behavior: (\n        Literal[\"run_llm_again\", \"stop_on_first_tool\"] | StopAtTools | ToolsToFinalOutputFunction\n    ) = \"run_llm_again\"\n    \"\"\"This lets you configure how tool use is handled.\n    - \"run_llm_again\": The default behavior. Tools are run, and then the LLM receives the results\n        and gets to respond.\n    - \"stop_on_first_tool\": The output of the first tool call is used as the final output. This\n        means that the LLM does not process the result of the tool call.\n    - A list of tool names: The agent will stop running if any of the tools in the list are called.\n        The final output will be the output of the first matching tool call. The LLM does not\n        process the result of the tool call.\n    - A function: If you pass a function, it will be called with the run context and the list of\n      tool results. It must return a `ToolToFinalOutputResult`, which determines whether the tool\n      calls result in a final output.\n\n      NOTE: This configuration is specific to FunctionTools. Hosted tools, such as file search,\n      web search, etc are always processed by the LLM.\n    \"\"\"\n\n    reset_tool_choice: bool = True\n    \"\"\"Whether to reset the tool choice to the default value after a tool has been called. Defaults\n    to True. This ensures that the agent doesn't enter an infinite loop of tool usage.\"\"\"\n\n    def clone(self, **kwargs: Any) -&gt; Agent[TContext]:\n        \"\"\"Make a copy of the agent, with the given arguments changed. For example, you could do:\n        ```\n        new_agent = agent.clone(instructions=\"New instructions\")\n        ```\n        \"\"\"\n        return dataclasses.replace(self, **kwargs)\n\n    def as_tool(\n        self,\n        tool_name: str | None,\n        tool_description: str | None,\n        custom_output_extractor: Callable[[RunResult], Awaitable[str]] | None = None,\n    ) -&gt; Tool:\n        \"\"\"Transform this agent into a tool, callable by other agents.\n\n        This is different from handoffs in two ways:\n        1. In handoffs, the new agent receives the conversation history. In this tool, the new agent\n           receives generated input.\n        2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is\n           called as a tool, and the conversation is continued by the original agent.\n\n        Args:\n            tool_name: The name of the tool. If not provided, the agent's name will be used.\n            tool_description: The description of the tool, which should indicate what it does and\n                when to use it.\n            custom_output_extractor: A function that extracts the output from the agent. If not\n                provided, the last message from the agent will be used.\n        \"\"\"\n\n        @function_tool(\n            name_override=tool_name or _transforms.transform_string_function_style(self.name),\n            description_override=tool_description or \"\",\n        )\n        async def run_agent(context: RunContextWrapper, input: str) -&gt; str:\n            from .run import Runner\n\n            output = await Runner.run(\n                starting_agent=self,\n                input=input,\n                context=context.context,\n            )\n            if custom_output_extractor:\n                return await custom_output_extractor(output)\n\n            return ItemHelpers.text_message_outputs(output.new_items)\n\n        return run_agent\n\n    async def get_system_prompt(self, run_context: RunContextWrapper[TContext]) -&gt; str | None:\n        \"\"\"Get the system prompt for the agent.\"\"\"\n        if isinstance(self.instructions, str):\n            return self.instructions\n        elif callable(self.instructions):\n            if inspect.iscoroutinefunction(self.instructions):\n                return await cast(Awaitable[str], self.instructions(run_context, self))\n            else:\n                return cast(str, self.instructions(run_context, self))\n        elif self.instructions is not None:\n            logger.error(f\"Instructions must be a string or a function, got {self.instructions}\")\n\n        return None\n\n    async def get_mcp_tools(self) -&gt; list[Tool]:\n        \"\"\"Fetches the available tools from the MCP servers.\"\"\"\n        return await MCPUtil.get_all_function_tools(self.mcp_servers)\n\n    async def get_all_tools(self) -&gt; list[Tool]:\n        \"\"\"All agent tools, including MCP tools and function tools.\"\"\"\n        mcp_tools = await self.get_mcp_tools()\n        return mcp_tools + self.tools\n</code></pre>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the agent.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.instructions","title":"instructions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>instructions: (\n    str\n    | Callable[\n        [RunContextWrapper[TContext], Agent[TContext]],\n        MaybeAwaitable[str],\n    ]\n    | None\n) = None\n</code></pre> <p>The instructions for the agent. Will be used as the \"system prompt\" when this agent is invoked. Describes what the agent should do, and how it responds.</p> <p>Can either be a string, or a function that dynamically generates instructions for the agent. If you provide a function, it will be called with the context and the agent instance. It must return a string.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: str | None = None\n</code></pre> <p>A description of the agent. This is used in the CLI to show the agent's description.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.handoff_description","title":"handoff_description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>handoff_description: str | None = None\n</code></pre> <p>A description of the agent. This is used when the agent is used as a handoff, so that an LLM knows what it does and when to invoke it.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.handoffs","title":"handoffs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>handoffs: list[Agent[Any] | Handoff[TContext]] = field(\n    default_factory=list\n)\n</code></pre> <p>Handoffs are sub-agents that the agent can delegate to. You can provide a list of handoffs, and the agent can choose to delegate to them if relevant. Allows for separation of concerns and modularity.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: str | Model | None = None\n</code></pre> <p>The model implementation to use when invoking the LLM.</p> <p>By default, if not set, the agent will use the default model configured in <code>model_settings.DEFAULT_MODEL</code>.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.model_settings","title":"model_settings  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_settings: ModelSettings = field(\n    default_factory=ModelSettings\n)\n</code></pre> <p>Configures model-specific tuning parameters (e.g. temperature, top_p).</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.tools","title":"tools  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tools: list[Tool] = field(default_factory=list)\n</code></pre> <p>A list of tools that the agent can use.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.mcp_servers","title":"mcp_servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mcp_servers: list[MCPServer] = field(default_factory=list)\n</code></pre> <p>A list of Model Context Protocol servers that the agent can use. Every time the agent runs, it will include tools from these servers in the list of available tools.</p> <p>NOTE: You are expected to manage the lifecycle of these servers. Specifically, you must call <code>server.connect()</code> before passing it to the agent, and <code>server.cleanup()</code> when the server is no longer needed.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.input_guardrails","title":"input_guardrails  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>input_guardrails: list[InputGuardrail[TContext]] = field(\n    default_factory=list\n)\n</code></pre> <p>A list of checks that run in parallel to the agent's execution, before generating a response. Runs only if the agent is the first agent in the chain.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.output_guardrails","title":"output_guardrails  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_guardrails: list[OutputGuardrail[TContext]] = field(\n    default_factory=list\n)\n</code></pre> <p>A list of checks that run on the final output of the agent, after generating a response. Runs only if the agent produces a final output.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.output_type","title":"output_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_type: type[Any] | None = None\n</code></pre> <p>The type of the output object. If not provided, the output will be <code>str</code>.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.hooks","title":"hooks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hooks: AgentHooks[TContext] | None = None\n</code></pre> <p>A class that receives callbacks on various lifecycle events for this agent.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.tool_use_behavior","title":"tool_use_behavior  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tool_use_behavior: (\n    Literal[\"run_llm_again\", \"stop_on_first_tool\"]\n    | StopAtTools\n    | ToolsToFinalOutputFunction\n) = \"run_llm_again\"\n</code></pre> <p>This lets you configure how tool use is handled. - \"run_llm_again\": The default behavior. Tools are run, and then the LLM receives the results     and gets to respond. - \"stop_on_first_tool\": The output of the first tool call is used as the final output. This     means that the LLM does not process the result of the tool call. - A list of tool names: The agent will stop running if any of the tools in the list are called.     The final output will be the output of the first matching tool call. The LLM does not     process the result of the tool call. - A function: If you pass a function, it will be called with the run context and the list of   tool results. It must return a <code>ToolToFinalOutputResult</code>, which determines whether the tool   calls result in a final output.</p> <p>NOTE: This configuration is specific to FunctionTools. Hosted tools, such as file search,   web search, etc are always processed by the LLM.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.reset_tool_choice","title":"reset_tool_choice  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reset_tool_choice: bool = True\n</code></pre> <p>Whether to reset the tool choice to the default value after a tool has been called. Defaults to True. This ensures that the agent doesn't enter an infinite loop of tool usage.</p>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.clone","title":"clone","text":"<pre><code>clone(**kwargs: Any) -&gt; Agent[TContext]\n</code></pre> <p>Make a copy of the agent, with the given arguments changed. For example, you could do: <pre><code>new_agent = agent.clone(instructions=\"New instructions\")\n</code></pre></p> Source code in <code>src/cai/sdk/agents/agent.py</code> <pre><code>def clone(self, **kwargs: Any) -&gt; Agent[TContext]:\n    \"\"\"Make a copy of the agent, with the given arguments changed. For example, you could do:\n    ```\n    new_agent = agent.clone(instructions=\"New instructions\")\n    ```\n    \"\"\"\n    return dataclasses.replace(self, **kwargs)\n</code></pre>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.as_tool","title":"as_tool","text":"<pre><code>as_tool(\n    tool_name: str | None,\n    tool_description: str | None,\n    custom_output_extractor: Callable[\n        [RunResult], Awaitable[str]\n    ]\n    | None = None,\n) -&gt; Tool\n</code></pre> <p>Transform this agent into a tool, callable by other agents.</p> <p>This is different from handoffs in two ways: 1. In handoffs, the new agent receives the conversation history. In this tool, the new agent    receives generated input. 2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is    called as a tool, and the conversation is continued by the original agent.</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>str | None</code> <p>The name of the tool. If not provided, the agent's name will be used.</p> required <code>tool_description</code> <code>str | None</code> <p>The description of the tool, which should indicate what it does and when to use it.</p> required <code>custom_output_extractor</code> <code>Callable[[RunResult], Awaitable[str]] | None</code> <p>A function that extracts the output from the agent. If not provided, the last message from the agent will be used.</p> <code>None</code> Source code in <code>src/cai/sdk/agents/agent.py</code> <pre><code>def as_tool(\n    self,\n    tool_name: str | None,\n    tool_description: str | None,\n    custom_output_extractor: Callable[[RunResult], Awaitable[str]] | None = None,\n) -&gt; Tool:\n    \"\"\"Transform this agent into a tool, callable by other agents.\n\n    This is different from handoffs in two ways:\n    1. In handoffs, the new agent receives the conversation history. In this tool, the new agent\n       receives generated input.\n    2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is\n       called as a tool, and the conversation is continued by the original agent.\n\n    Args:\n        tool_name: The name of the tool. If not provided, the agent's name will be used.\n        tool_description: The description of the tool, which should indicate what it does and\n            when to use it.\n        custom_output_extractor: A function that extracts the output from the agent. If not\n            provided, the last message from the agent will be used.\n    \"\"\"\n\n    @function_tool(\n        name_override=tool_name or _transforms.transform_string_function_style(self.name),\n        description_override=tool_description or \"\",\n    )\n    async def run_agent(context: RunContextWrapper, input: str) -&gt; str:\n        from .run import Runner\n\n        output = await Runner.run(\n            starting_agent=self,\n            input=input,\n            context=context.context,\n        )\n        if custom_output_extractor:\n            return await custom_output_extractor(output)\n\n        return ItemHelpers.text_message_outputs(output.new_items)\n\n    return run_agent\n</code></pre>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.get_system_prompt","title":"get_system_prompt  <code>async</code>","text":"<pre><code>get_system_prompt(\n    run_context: RunContextWrapper[TContext],\n) -&gt; str | None\n</code></pre> <p>Get the system prompt for the agent.</p> Source code in <code>src/cai/sdk/agents/agent.py</code> <pre><code>async def get_system_prompt(self, run_context: RunContextWrapper[TContext]) -&gt; str | None:\n    \"\"\"Get the system prompt for the agent.\"\"\"\n    if isinstance(self.instructions, str):\n        return self.instructions\n    elif callable(self.instructions):\n        if inspect.iscoroutinefunction(self.instructions):\n            return await cast(Awaitable[str], self.instructions(run_context, self))\n        else:\n            return cast(str, self.instructions(run_context, self))\n    elif self.instructions is not None:\n        logger.error(f\"Instructions must be a string or a function, got {self.instructions}\")\n\n    return None\n</code></pre>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.get_mcp_tools","title":"get_mcp_tools  <code>async</code>","text":"<pre><code>get_mcp_tools() -&gt; list[Tool]\n</code></pre> <p>Fetches the available tools from the MCP servers.</p> Source code in <code>src/cai/sdk/agents/agent.py</code> <pre><code>async def get_mcp_tools(self) -&gt; list[Tool]:\n    \"\"\"Fetches the available tools from the MCP servers.\"\"\"\n    return await MCPUtil.get_all_function_tools(self.mcp_servers)\n</code></pre>"},{"location":"ref/agent/#cai.sdk.agents.agent.Agent.get_all_tools","title":"get_all_tools  <code>async</code>","text":"<pre><code>get_all_tools() -&gt; list[Tool]\n</code></pre> <p>All agent tools, including MCP tools and function tools.</p> Source code in <code>src/cai/sdk/agents/agent.py</code> <pre><code>async def get_all_tools(self) -&gt; list[Tool]:\n    \"\"\"All agent tools, including MCP tools and function tools.\"\"\"\n    mcp_tools = await self.get_mcp_tools()\n    return mcp_tools + self.tools\n</code></pre>"},{"location":"ref/agent_output/","title":"<code>Agent output</code>","text":""},{"location":"ref/agent_output/#cai.sdk.agents.agent_output.AgentOutputSchema","title":"AgentOutputSchema  <code>dataclass</code>","text":"<p>An object that captures the JSON schema of the output, as well as validating/parsing JSON produced by the LLM into the output type.</p> Source code in <code>src/cai/sdk/agents/agent_output.py</code> <pre><code>@dataclass(init=False)\nclass AgentOutputSchema:\n    \"\"\"An object that captures the JSON schema of the output, as well as validating/parsing JSON\n    produced by the LLM into the output type.\n    \"\"\"\n\n    output_type: type[Any]\n    \"\"\"The type of the output.\"\"\"\n\n    _type_adapter: TypeAdapter[Any]\n    \"\"\"A type adapter that wraps the output type, so that we can validate JSON.\"\"\"\n\n    _is_wrapped: bool\n    \"\"\"Whether the output type is wrapped in a dictionary. This is generally done if the base\n    output type cannot be represented as a JSON Schema object.\n    \"\"\"\n\n    _output_schema: dict[str, Any]\n    \"\"\"The JSON schema of the output.\"\"\"\n\n    strict_json_schema: bool\n    \"\"\"Whether the JSON schema is in strict mode. We **strongly** recommend setting this to True,\n    as it increases the likelihood of correct JSON input.\n    \"\"\"\n\n    def __init__(self, output_type: type[Any], strict_json_schema: bool = True):\n        \"\"\"\n        Args:\n            output_type: The type of the output.\n            strict_json_schema: Whether the JSON schema is in strict mode. We **strongly** recommend\n                setting this to True, as it increases the likelihood of correct JSON input.\n        \"\"\"\n        self.output_type = output_type\n        self.strict_json_schema = strict_json_schema\n\n        if output_type is None or output_type is str:\n            self._is_wrapped = False\n            self._type_adapter = TypeAdapter(output_type)\n            self._output_schema = self._type_adapter.json_schema()\n            return\n\n        # We should wrap for things that are not plain text, and for things that would definitely\n        # not be a JSON Schema object.\n        self._is_wrapped = not _is_subclass_of_base_model_or_dict(output_type)\n\n        if self._is_wrapped:\n            OutputType = TypedDict(\n                \"OutputType\",\n                {\n                    _WRAPPER_DICT_KEY: output_type,  # type: ignore\n                },\n            )\n            self._type_adapter = TypeAdapter(OutputType)\n            self._output_schema = self._type_adapter.json_schema()\n        else:\n            self._type_adapter = TypeAdapter(output_type)\n            self._output_schema = self._type_adapter.json_schema()\n\n        if self.strict_json_schema:\n            self._output_schema = ensure_strict_json_schema(self._output_schema)\n\n    def is_plain_text(self) -&gt; bool:\n        \"\"\"Whether the output type is plain text (versus a JSON object).\"\"\"\n        return self.output_type is None or self.output_type is str\n\n    def json_schema(self) -&gt; dict[str, Any]:\n        \"\"\"The JSON schema of the output type.\"\"\"\n        if self.is_plain_text():\n            raise UserError(\"Output type is plain text, so no JSON schema is available\")\n        return self._output_schema\n\n    def validate_json(self, json_str: str, partial: bool = False) -&gt; Any:\n        \"\"\"Validate a JSON string against the output type. Returns the validated object, or raises\n        a `ModelBehaviorError` if the JSON is invalid.\n        \"\"\"\n        validated = _json.validate_json(json_str, self._type_adapter, partial)\n        if self._is_wrapped:\n            if not isinstance(validated, dict):\n                _error_tracing.attach_error_to_current_span(\n                    SpanError(\n                        message=\"Invalid JSON\",\n                        data={\"details\": f\"Expected a dict, got {type(validated)}\"},\n                    )\n                )\n                raise ModelBehaviorError(\n                    f\"Expected a dict, got {type(validated)} for JSON: {json_str}\"\n                )\n\n            if _WRAPPER_DICT_KEY not in validated:\n                _error_tracing.attach_error_to_current_span(\n                    SpanError(\n                        message=\"Invalid JSON\",\n                        data={\"details\": f\"Could not find key {_WRAPPER_DICT_KEY} in JSON\"},\n                    )\n                )\n                raise ModelBehaviorError(\n                    f\"Could not find key {_WRAPPER_DICT_KEY} in JSON: {json_str}\"\n                )\n            return validated[_WRAPPER_DICT_KEY]\n        return validated\n\n    def output_type_name(self) -&gt; str:\n        \"\"\"The name of the output type.\"\"\"\n        return _type_to_str(self.output_type)\n</code></pre>"},{"location":"ref/agent_output/#cai.sdk.agents.agent_output.AgentOutputSchema.output_type","title":"output_type  <code>instance-attribute</code>","text":"<pre><code>output_type: type[Any] = output_type\n</code></pre> <p>The type of the output.</p>"},{"location":"ref/agent_output/#cai.sdk.agents.agent_output.AgentOutputSchema.strict_json_schema","title":"strict_json_schema  <code>instance-attribute</code>","text":"<pre><code>strict_json_schema: bool = strict_json_schema\n</code></pre> <p>Whether the JSON schema is in strict mode. We strongly recommend setting this to True, as it increases the likelihood of correct JSON input.</p>"},{"location":"ref/agent_output/#cai.sdk.agents.agent_output.AgentOutputSchema.__init__","title":"__init__","text":"<pre><code>__init__(\n    output_type: type[Any], strict_json_schema: bool = True\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>output_type</code> <code>type[Any]</code> <p>The type of the output.</p> required <code>strict_json_schema</code> <code>bool</code> <p>Whether the JSON schema is in strict mode. We strongly recommend setting this to True, as it increases the likelihood of correct JSON input.</p> <code>True</code> Source code in <code>src/cai/sdk/agents/agent_output.py</code> <pre><code>def __init__(self, output_type: type[Any], strict_json_schema: bool = True):\n    \"\"\"\n    Args:\n        output_type: The type of the output.\n        strict_json_schema: Whether the JSON schema is in strict mode. We **strongly** recommend\n            setting this to True, as it increases the likelihood of correct JSON input.\n    \"\"\"\n    self.output_type = output_type\n    self.strict_json_schema = strict_json_schema\n\n    if output_type is None or output_type is str:\n        self._is_wrapped = False\n        self._type_adapter = TypeAdapter(output_type)\n        self._output_schema = self._type_adapter.json_schema()\n        return\n\n    # We should wrap for things that are not plain text, and for things that would definitely\n    # not be a JSON Schema object.\n    self._is_wrapped = not _is_subclass_of_base_model_or_dict(output_type)\n\n    if self._is_wrapped:\n        OutputType = TypedDict(\n            \"OutputType\",\n            {\n                _WRAPPER_DICT_KEY: output_type,  # type: ignore\n            },\n        )\n        self._type_adapter = TypeAdapter(OutputType)\n        self._output_schema = self._type_adapter.json_schema()\n    else:\n        self._type_adapter = TypeAdapter(output_type)\n        self._output_schema = self._type_adapter.json_schema()\n\n    if self.strict_json_schema:\n        self._output_schema = ensure_strict_json_schema(self._output_schema)\n</code></pre>"},{"location":"ref/agent_output/#cai.sdk.agents.agent_output.AgentOutputSchema.is_plain_text","title":"is_plain_text","text":"<pre><code>is_plain_text() -&gt; bool\n</code></pre> <p>Whether the output type is plain text (versus a JSON object).</p> Source code in <code>src/cai/sdk/agents/agent_output.py</code> <pre><code>def is_plain_text(self) -&gt; bool:\n    \"\"\"Whether the output type is plain text (versus a JSON object).\"\"\"\n    return self.output_type is None or self.output_type is str\n</code></pre>"},{"location":"ref/agent_output/#cai.sdk.agents.agent_output.AgentOutputSchema.json_schema","title":"json_schema","text":"<pre><code>json_schema() -&gt; dict[str, Any]\n</code></pre> <p>The JSON schema of the output type.</p> Source code in <code>src/cai/sdk/agents/agent_output.py</code> <pre><code>def json_schema(self) -&gt; dict[str, Any]:\n    \"\"\"The JSON schema of the output type.\"\"\"\n    if self.is_plain_text():\n        raise UserError(\"Output type is plain text, so no JSON schema is available\")\n    return self._output_schema\n</code></pre>"},{"location":"ref/agent_output/#cai.sdk.agents.agent_output.AgentOutputSchema.validate_json","title":"validate_json","text":"<pre><code>validate_json(json_str: str, partial: bool = False) -&gt; Any\n</code></pre> <p>Validate a JSON string against the output type. Returns the validated object, or raises a <code>ModelBehaviorError</code> if the JSON is invalid.</p> Source code in <code>src/cai/sdk/agents/agent_output.py</code> <pre><code>def validate_json(self, json_str: str, partial: bool = False) -&gt; Any:\n    \"\"\"Validate a JSON string against the output type. Returns the validated object, or raises\n    a `ModelBehaviorError` if the JSON is invalid.\n    \"\"\"\n    validated = _json.validate_json(json_str, self._type_adapter, partial)\n    if self._is_wrapped:\n        if not isinstance(validated, dict):\n            _error_tracing.attach_error_to_current_span(\n                SpanError(\n                    message=\"Invalid JSON\",\n                    data={\"details\": f\"Expected a dict, got {type(validated)}\"},\n                )\n            )\n            raise ModelBehaviorError(\n                f\"Expected a dict, got {type(validated)} for JSON: {json_str}\"\n            )\n\n        if _WRAPPER_DICT_KEY not in validated:\n            _error_tracing.attach_error_to_current_span(\n                SpanError(\n                    message=\"Invalid JSON\",\n                    data={\"details\": f\"Could not find key {_WRAPPER_DICT_KEY} in JSON\"},\n                )\n            )\n            raise ModelBehaviorError(\n                f\"Could not find key {_WRAPPER_DICT_KEY} in JSON: {json_str}\"\n            )\n        return validated[_WRAPPER_DICT_KEY]\n    return validated\n</code></pre>"},{"location":"ref/agent_output/#cai.sdk.agents.agent_output.AgentOutputSchema.output_type_name","title":"output_type_name","text":"<pre><code>output_type_name() -&gt; str\n</code></pre> <p>The name of the output type.</p> Source code in <code>src/cai/sdk/agents/agent_output.py</code> <pre><code>def output_type_name(self) -&gt; str:\n    \"\"\"The name of the output type.\"\"\"\n    return _type_to_str(self.output_type)\n</code></pre>"},{"location":"ref/exceptions/","title":"<code>Exceptions</code>","text":""},{"location":"ref/exceptions/#cai.sdk.agents.exceptions.AgentsException","title":"AgentsException","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all exceptions in the CAI Agents.</p> Source code in <code>src/cai/sdk/agents/exceptions.py</code> <pre><code>class AgentsException(Exception):\n    \"\"\"Base class for all exceptions in the CAI Agents.\"\"\"\n</code></pre>"},{"location":"ref/exceptions/#cai.sdk.agents.exceptions.MaxTurnsExceeded","title":"MaxTurnsExceeded","text":"<p>               Bases: <code>AgentsException</code></p> <p>Exception raised when the maximum number of turns is exceeded.</p> Source code in <code>src/cai/sdk/agents/exceptions.py</code> <pre><code>class MaxTurnsExceeded(AgentsException):\n    \"\"\"Exception raised when the maximum number of turns is exceeded.\"\"\"\n\n    message: str\n\n    def __init__(self, message: str):\n        self.message = message\n</code></pre>"},{"location":"ref/exceptions/#cai.sdk.agents.exceptions.ModelBehaviorError","title":"ModelBehaviorError","text":"<p>               Bases: <code>AgentsException</code></p> <p>Exception raised when the model does something unexpected, e.g. calling a tool that doesn't exist, or providing malformed JSON.</p> Source code in <code>src/cai/sdk/agents/exceptions.py</code> <pre><code>class ModelBehaviorError(AgentsException):\n    \"\"\"Exception raised when the model does something unexpected, e.g. calling a tool that doesn't\n    exist, or providing malformed JSON.\n    \"\"\"\n\n    message: str\n\n    def __init__(self, message: str):\n        self.message = message\n</code></pre>"},{"location":"ref/exceptions/#cai.sdk.agents.exceptions.UserError","title":"UserError","text":"<p>               Bases: <code>AgentsException</code></p> <p>Exception raised when the user makes an error using CAI.</p> Source code in <code>src/cai/sdk/agents/exceptions.py</code> <pre><code>class UserError(AgentsException):\n    \"\"\"Exception raised when the user makes an error using CAI.\"\"\"\n\n    message: str\n\n    def __init__(self, message: str):\n        self.message = message\n</code></pre>"},{"location":"ref/exceptions/#cai.sdk.agents.exceptions.InputGuardrailTripwireTriggered","title":"InputGuardrailTripwireTriggered","text":"<p>               Bases: <code>AgentsException</code></p> <p>Exception raised when a guardrail tripwire is triggered.</p> Source code in <code>src/cai/sdk/agents/exceptions.py</code> <pre><code>class InputGuardrailTripwireTriggered(AgentsException):\n    \"\"\"Exception raised when a guardrail tripwire is triggered.\"\"\"\n\n    guardrail_result: \"InputGuardrailResult\"\n    \"\"\"The result data of the guardrail that was triggered.\"\"\"\n\n    def __init__(self, guardrail_result: \"InputGuardrailResult\"):\n        self.guardrail_result = guardrail_result\n        super().__init__(\n            f\"Guardrail {guardrail_result.guardrail.__class__.__name__} triggered tripwire\"\n        )\n</code></pre>"},{"location":"ref/exceptions/#cai.sdk.agents.exceptions.InputGuardrailTripwireTriggered.guardrail_result","title":"guardrail_result  <code>instance-attribute</code>","text":"<pre><code>guardrail_result: InputGuardrailResult = guardrail_result\n</code></pre> <p>The result data of the guardrail that was triggered.</p>"},{"location":"ref/exceptions/#cai.sdk.agents.exceptions.OutputGuardrailTripwireTriggered","title":"OutputGuardrailTripwireTriggered","text":"<p>               Bases: <code>AgentsException</code></p> <p>Exception raised when a guardrail tripwire is triggered.</p> Source code in <code>src/cai/sdk/agents/exceptions.py</code> <pre><code>class OutputGuardrailTripwireTriggered(AgentsException):\n    \"\"\"Exception raised when a guardrail tripwire is triggered.\"\"\"\n\n    guardrail_result: \"OutputGuardrailResult\"\n    \"\"\"The result data of the guardrail that was triggered.\"\"\"\n\n    def __init__(self, guardrail_result: \"OutputGuardrailResult\"):\n        self.guardrail_result = guardrail_result\n        super().__init__(\n            f\"Guardrail {guardrail_result.guardrail.__class__.__name__} triggered tripwire\"\n        )\n</code></pre>"},{"location":"ref/exceptions/#cai.sdk.agents.exceptions.OutputGuardrailTripwireTriggered.guardrail_result","title":"guardrail_result  <code>instance-attribute</code>","text":"<pre><code>guardrail_result: OutputGuardrailResult = guardrail_result\n</code></pre> <p>The result data of the guardrail that was triggered.</p>"},{"location":"ref/exceptions/#cai.sdk.agents.exceptions.PriceLimitExceeded","title":"PriceLimitExceeded","text":"<p>               Bases: <code>AgentsException</code></p> <p>Raised when the maximum price limit is exceeded.</p> Source code in <code>src/cai/sdk/agents/exceptions.py</code> <pre><code>class PriceLimitExceeded(AgentsException):\n    \"\"\"Raised when the maximum price limit is exceeded.\"\"\"\n    def __init__(self, current_cost: float, price_limit: float):\n        super().__init__(f\"Maximum price limit (${price_limit:.4f}) exceeded. Current cost: ${current_cost:.4f}\")\n</code></pre>"},{"location":"ref/function_schema/","title":"<code>Function schema</code>","text":""},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.FuncSchema","title":"FuncSchema  <code>dataclass</code>","text":"<p>Captures the schema for a python function, in preparation for sending it to an LLM as a tool.</p> Source code in <code>src/cai/sdk/agents/function_schema.py</code> <pre><code>@dataclass\nclass FuncSchema:\n    \"\"\"\n    Captures the schema for a python function, in preparation for sending it to an LLM as a tool.\n    \"\"\"\n\n    name: str\n    \"\"\"The name of the function.\"\"\"\n    description: str | None\n    \"\"\"The description of the function.\"\"\"\n    params_pydantic_model: type[BaseModel]\n    \"\"\"A Pydantic model that represents the function's parameters.\"\"\"\n    params_json_schema: dict[str, Any]\n    \"\"\"The JSON schema for the function's parameters, derived from the Pydantic model.\"\"\"\n    signature: inspect.Signature\n    \"\"\"The signature of the function.\"\"\"\n    takes_context: bool = False\n    \"\"\"Whether the function takes a RunContextWrapper argument (must be the first argument).\"\"\"\n    strict_json_schema: bool = True\n    \"\"\"Whether the JSON schema is in strict mode. We **strongly** recommend setting this to True,\n    as it increases the likelihood of correct JSON input.\"\"\"\n    def to_call_args(self, data: BaseModel) -&gt; tuple[list[Any], dict[str, Any]]:\n        \"\"\"\n        Converts validated data from the Pydantic model into (args, kwargs), suitable for calling\n        the original function.\n        \"\"\"\n        positional_args: list[Any] = []\n        keyword_args: dict[str, Any] = {}\n        seen_var_positional = False\n\n        # Use enumerate() so we can skip the first parameter if it's context.\n        for idx, (name, param) in enumerate(self.signature.parameters.items()):\n            # If the function takes a RunContextWrapper and this is the first parameter, skip it.\n            if self.takes_context and idx == 0:\n                continue\n\n            # Skip parameters named 'ctf' or 'CTF'\n            if name.lower() == 'ctf':\n                continue\n\n            value = getattr(data, name, None)\n            if param.kind == param.VAR_POSITIONAL:\n                # e.g. *args: extend positional args and mark that *args is now seen\n                positional_args.extend(value or [])\n                seen_var_positional = True\n            elif param.kind == param.VAR_KEYWORD:\n                # e.g. **kwargs handling\n                keyword_args.update(value or {})\n            elif param.kind in (param.POSITIONAL_ONLY, param.POSITIONAL_OR_KEYWORD):\n                # Before *args, add to positional args. After *args, add to keyword args.\n                if not seen_var_positional:\n                    positional_args.append(value)\n                else:\n                    keyword_args[name] = value\n            else:\n                # For KEYWORD_ONLY parameters, always use keyword args.\n                keyword_args[name] = value\n        return positional_args, keyword_args\n</code></pre>"},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.FuncSchema.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the function.</p>"},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.FuncSchema.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str | None\n</code></pre> <p>The description of the function.</p>"},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.FuncSchema.params_pydantic_model","title":"params_pydantic_model  <code>instance-attribute</code>","text":"<pre><code>params_pydantic_model: type[BaseModel]\n</code></pre> <p>A Pydantic model that represents the function's parameters.</p>"},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.FuncSchema.params_json_schema","title":"params_json_schema  <code>instance-attribute</code>","text":"<pre><code>params_json_schema: dict[str, Any]\n</code></pre> <p>The JSON schema for the function's parameters, derived from the Pydantic model.</p>"},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.FuncSchema.signature","title":"signature  <code>instance-attribute</code>","text":"<pre><code>signature: Signature\n</code></pre> <p>The signature of the function.</p>"},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.FuncSchema.takes_context","title":"takes_context  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>takes_context: bool = False\n</code></pre> <p>Whether the function takes a RunContextWrapper argument (must be the first argument).</p>"},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.FuncSchema.strict_json_schema","title":"strict_json_schema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strict_json_schema: bool = True\n</code></pre> <p>Whether the JSON schema is in strict mode. We strongly recommend setting this to True, as it increases the likelihood of correct JSON input.</p>"},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.FuncSchema.to_call_args","title":"to_call_args","text":"<pre><code>to_call_args(\n    data: BaseModel,\n) -&gt; tuple[list[Any], dict[str, Any]]\n</code></pre> <p>Converts validated data from the Pydantic model into (args, kwargs), suitable for calling the original function.</p> Source code in <code>src/cai/sdk/agents/function_schema.py</code> <pre><code>def to_call_args(self, data: BaseModel) -&gt; tuple[list[Any], dict[str, Any]]:\n    \"\"\"\n    Converts validated data from the Pydantic model into (args, kwargs), suitable for calling\n    the original function.\n    \"\"\"\n    positional_args: list[Any] = []\n    keyword_args: dict[str, Any] = {}\n    seen_var_positional = False\n\n    # Use enumerate() so we can skip the first parameter if it's context.\n    for idx, (name, param) in enumerate(self.signature.parameters.items()):\n        # If the function takes a RunContextWrapper and this is the first parameter, skip it.\n        if self.takes_context and idx == 0:\n            continue\n\n        # Skip parameters named 'ctf' or 'CTF'\n        if name.lower() == 'ctf':\n            continue\n\n        value = getattr(data, name, None)\n        if param.kind == param.VAR_POSITIONAL:\n            # e.g. *args: extend positional args and mark that *args is now seen\n            positional_args.extend(value or [])\n            seen_var_positional = True\n        elif param.kind == param.VAR_KEYWORD:\n            # e.g. **kwargs handling\n            keyword_args.update(value or {})\n        elif param.kind in (param.POSITIONAL_ONLY, param.POSITIONAL_OR_KEYWORD):\n            # Before *args, add to positional args. After *args, add to keyword args.\n            if not seen_var_positional:\n                positional_args.append(value)\n            else:\n                keyword_args[name] = value\n        else:\n            # For KEYWORD_ONLY parameters, always use keyword args.\n            keyword_args[name] = value\n    return positional_args, keyword_args\n</code></pre>"},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.FuncDocumentation","title":"FuncDocumentation  <code>dataclass</code>","text":"<p>Contains metadata about a python function, extracted from its docstring.</p> Source code in <code>src/cai/sdk/agents/function_schema.py</code> <pre><code>@dataclass\nclass FuncDocumentation:\n    \"\"\"Contains metadata about a python function, extracted from its docstring.\"\"\"\n\n    name: str\n    \"\"\"The name of the function, via `__name__`.\"\"\"\n    description: str | None\n    \"\"\"The description of the function, derived from the docstring.\"\"\"\n    param_descriptions: dict[str, str] | None\n    \"\"\"The parameter descriptions of the function, derived from the docstring.\"\"\"\n</code></pre>"},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.FuncDocumentation.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the function, via <code>__name__</code>.</p>"},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.FuncDocumentation.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str | None\n</code></pre> <p>The description of the function, derived from the docstring.</p>"},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.FuncDocumentation.param_descriptions","title":"param_descriptions  <code>instance-attribute</code>","text":"<pre><code>param_descriptions: dict[str, str] | None\n</code></pre> <p>The parameter descriptions of the function, derived from the docstring.</p>"},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.generate_func_documentation","title":"generate_func_documentation","text":"<pre><code>generate_func_documentation(\n    func: Callable[..., Any],\n    style: DocstringStyle | None = None,\n) -&gt; FuncDocumentation\n</code></pre> <p>Extracts metadata from a function docstring, in preparation for sending it to an LLM as a tool.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable[..., Any]</code> <p>The function to extract documentation from.</p> required <code>style</code> <code>DocstringStyle | None</code> <p>The style of the docstring to use for parsing. If not provided, we will attempt to auto-detect the style.</p> <code>None</code> <p>Returns:</p> Type Description <code>FuncDocumentation</code> <p>A FuncDocumentation object containing the function's name, description, and parameter</p> <code>FuncDocumentation</code> <p>descriptions.</p> Source code in <code>src/cai/sdk/agents/function_schema.py</code> <pre><code>def generate_func_documentation(\n    func: Callable[..., Any], style: DocstringStyle | None = None\n) -&gt; FuncDocumentation:\n    \"\"\"\n    Extracts metadata from a function docstring, in preparation for sending it to an LLM as a tool.\n\n    Args:\n        func: The function to extract documentation from.\n        style: The style of the docstring to use for parsing. If not provided, we will attempt to\n            auto-detect the style.\n\n    Returns:\n        A FuncDocumentation object containing the function's name, description, and parameter\n        descriptions.\n    \"\"\"\n    name = func.__name__\n    doc = inspect.getdoc(func)\n    if not doc:\n        return FuncDocumentation(name=name, description=None, param_descriptions=None)\n\n    with _suppress_griffe_logging():\n        docstring = Docstring(doc, lineno=1, parser=style or _detect_docstring_style(doc))\n        parsed = docstring.parse()\n\n    description: str | None = next(\n        (section.value for section in parsed if section.kind == DocstringSectionKind.text), None\n    )\n\n    param_descriptions: dict[str, str] = {\n        param.name: param.description\n        for section in parsed\n        if section.kind == DocstringSectionKind.parameters\n        for param in section.value\n    }\n\n    return FuncDocumentation(\n        name=func.__name__,\n        description=description,\n        param_descriptions=param_descriptions or None,\n    )\n</code></pre>"},{"location":"ref/function_schema/#cai.sdk.agents.function_schema.function_schema","title":"function_schema","text":"<pre><code>function_schema(\n    func: Callable[..., Any],\n    docstring_style: DocstringStyle | None = None,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    use_docstring_info: bool = True,\n    strict_json_schema: bool = True,\n) -&gt; FuncSchema\n</code></pre> <p>Given a python function, extracts a <code>FuncSchema</code> from it, capturing the name, description, parameter descriptions, and other metadata.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable[..., Any]</code> <p>The function to extract the schema from.</p> required <code>docstring_style</code> <code>DocstringStyle | None</code> <p>The style of the docstring to use for parsing. If not provided, we will attempt to auto-detect the style.</p> <code>None</code> <code>name_override</code> <code>str | None</code> <p>If provided, use this name instead of the function's <code>__name__</code>.</p> <code>None</code> <code>description_override</code> <code>str | None</code> <p>If provided, use this description instead of the one derived from the docstring.</p> <code>None</code> <code>use_docstring_info</code> <code>bool</code> <p>If True, uses the docstring to generate the description and parameter descriptions.</p> <code>True</code> <code>strict_json_schema</code> <code>bool</code> <p>Whether the JSON schema is in strict mode. If True, we'll ensure that the schema adheres to the \"strict\" standard the OpenAI API expects. We strongly recommend setting this to True, as it increases the likelihood of the LLM providing correct JSON input.</p> <code>True</code> <p>Returns:</p> Type Description <code>FuncSchema</code> <p>A <code>FuncSchema</code> object containing the function's name, description, parameter descriptions,</p> <code>FuncSchema</code> <p>and other metadata.</p> Source code in <code>src/cai/sdk/agents/function_schema.py</code> <pre><code>def function_schema(\n    func: Callable[..., Any],\n    docstring_style: DocstringStyle | None = None,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    use_docstring_info: bool = True,\n    strict_json_schema: bool = True,\n) -&gt; FuncSchema:\n    \"\"\"\n    Given a python function, extracts a `FuncSchema` from it, capturing the name, description,\n    parameter descriptions, and other metadata.\n\n    Args:\n        func: The function to extract the schema from.\n        docstring_style: The style of the docstring to use for parsing. If not provided, we will\n            attempt to auto-detect the style.\n        name_override: If provided, use this name instead of the function's `__name__`.\n        description_override: If provided, use this description instead of the one derived from the\n            docstring.\n        use_docstring_info: If True, uses the docstring to generate the description and parameter\n            descriptions.\n        strict_json_schema: Whether the JSON schema is in strict mode. If True, we'll ensure that\n            the schema adheres to the \"strict\" standard the OpenAI API expects. We **strongly**\n            recommend setting this to True, as it increases the likelihood of the LLM providing\n            correct JSON input.\n\n    Returns:\n        A `FuncSchema` object containing the function's name, description, parameter descriptions,\n        and other metadata.\n    \"\"\"\n\n    # 1. Grab docstring info\n    if use_docstring_info:\n        doc_info = generate_func_documentation(func, docstring_style)\n        param_descs = doc_info.param_descriptions or {}\n    else:\n        doc_info = None\n        param_descs = {}\n\n    func_name = name_override or doc_info.name if doc_info else func.__name__\n\n    # 2. Inspect function signature and get type hints\n    sig = inspect.signature(func)\n    type_hints = get_type_hints(func)\n    params = list(sig.parameters.items())\n    takes_context = False\n    filtered_params = []\n\n    if params:\n        first_name, first_param = params[0]\n        # Prefer the evaluated type hint if available\n        ann = type_hints.get(first_name, first_param.annotation)\n        if ann != inspect._empty:\n            origin = get_origin(ann) or ann\n            if origin is RunContextWrapper:\n                takes_context = True  # Mark that the function takes context\n            else:\n                filtered_params.append((first_name, first_param))\n        else:\n            filtered_params.append((first_name, first_param))\n\n    # For parameters other than the first, raise error if any use RunContextWrapper.\n    for name, param in params[1:]:\n        ann = type_hints.get(name, param.annotation)\n        if ann != inspect._empty:\n            origin = get_origin(ann) or ann\n            if origin is RunContextWrapper:\n                raise UserError(\n                    f\"RunContextWrapper param found at non-first position in function\"\n                    f\" {func.__name__}\"\n                )\n        filtered_params.append((name, param))\n\n    # We will collect field definitions for create_model as a dict:\n    #   field_name -&gt; (type_annotation, default_value_or_Field(...))\n    fields: dict[str, Any] = {}\n\n    filtered_params_no_ctf = [\n        (name, param)\n        for name, param in filtered_params\n        if name.lower() != 'ctf'\n    ]\n\n    for name, param in filtered_params_no_ctf:\n        ann = type_hints.get(name, param.annotation)\n        default = param.default\n\n        # If there's no type hint, assume `Any`\n        if ann == inspect._empty:\n            ann = Any\n\n        # If a docstring param description exists, use it\n        field_description = param_descs.get(name, None)\n\n        # Handle different parameter kinds\n        if param.kind == param.VAR_POSITIONAL:\n            # e.g. *args: extend positional args\n            if get_origin(ann) is tuple:\n                # e.g. def foo(*args: tuple[int, ...]) -&gt; treat as List[int]\n                args_of_tuple = get_args(ann)\n                if len(args_of_tuple) == 2 and args_of_tuple[1] is Ellipsis:\n                    ann = list[args_of_tuple[0]]  # type: ignore\n                else:\n                    ann = list[Any]\n            else:\n                # If user wrote *args: int, treat as List[int]\n                ann = list[ann]  # type: ignore\n\n            # Default factory to empty list\n            fields[name] = (\n                ann,\n                Field(default_factory=list, description=field_description),  # type: ignore\n            )\n\n        elif param.kind == param.VAR_KEYWORD:\n            # **kwargs handling\n            if get_origin(ann) is dict:\n                # e.g. def foo(**kwargs: dict[str, int])\n                dict_args = get_args(ann)\n                if len(dict_args) == 2:\n                    ann = dict[dict_args[0], dict_args[1]]  # type: ignore\n                else:\n                    ann = dict[str, Any]\n            else:\n                # e.g. def foo(**kwargs: int) -&gt; Dict[str, int]\n                ann = dict[str, ann]  # type: ignore\n\n            fields[name] = (\n                ann,\n                Field(default_factory=dict, description=field_description),  # type: ignore\n            )\n\n        else:\n            # Normal parameter\n            if default == inspect._empty:\n                # Required field\n                fields[name] = (\n                    ann,\n                    Field(..., description=field_description),\n                )\n            else:\n                # Parameter with a default value\n                fields[name] = (\n                    ann,\n                    Field(default=default, description=field_description),\n                )\n\n    # 3. Dynamically build a Pydantic model\n    dynamic_model = create_model(f\"{func_name}_args\", __base__=BaseModel, **fields)\n\n    # 4. Build JSON schema from that model\n    json_schema = dynamic_model.model_json_schema()\n    if strict_json_schema:\n        json_schema = ensure_strict_json_schema(json_schema)\n\n    # 5. Return as a FuncSchema dataclass\n    return FuncSchema(\n        name=func_name,\n        description=description_override or doc_info.description if doc_info else None,\n        params_pydantic_model=dynamic_model,\n        params_json_schema=json_schema,\n        signature=sig,\n        takes_context=takes_context,\n        strict_json_schema=strict_json_schema,\n    )\n</code></pre>"},{"location":"ref/guardrail/","title":"<code>Guardrails</code>","text":""},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.GuardrailFunctionOutput","title":"GuardrailFunctionOutput  <code>dataclass</code>","text":"<p>The output of a guardrail function.</p> Source code in <code>src/cai/sdk/agents/guardrail.py</code> <pre><code>@dataclass\nclass GuardrailFunctionOutput:\n    \"\"\"The output of a guardrail function.\"\"\"\n\n    output_info: Any\n    \"\"\"\n    Optional information about the guardrail's output. For example, the guardrail could include\n    information about the checks it performed and granular results.\n    \"\"\"\n\n    tripwire_triggered: bool\n    \"\"\"\n    Whether the tripwire was triggered. If triggered, the agent's execution will be halted.\n    \"\"\"\n</code></pre>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.GuardrailFunctionOutput.output_info","title":"output_info  <code>instance-attribute</code>","text":"<pre><code>output_info: Any\n</code></pre> <p>Optional information about the guardrail's output. For example, the guardrail could include information about the checks it performed and granular results.</p>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.GuardrailFunctionOutput.tripwire_triggered","title":"tripwire_triggered  <code>instance-attribute</code>","text":"<pre><code>tripwire_triggered: bool\n</code></pre> <p>Whether the tripwire was triggered. If triggered, the agent's execution will be halted.</p>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.InputGuardrailResult","title":"InputGuardrailResult  <code>dataclass</code>","text":"<p>The result of a guardrail run.</p> Source code in <code>src/cai/sdk/agents/guardrail.py</code> <pre><code>@dataclass\nclass InputGuardrailResult:\n    \"\"\"The result of a guardrail run.\"\"\"\n\n    guardrail: InputGuardrail[Any]\n    \"\"\"\n    The guardrail that was run.\n    \"\"\"\n\n    output: GuardrailFunctionOutput\n    \"\"\"The output of the guardrail function.\"\"\"\n</code></pre>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.InputGuardrailResult.guardrail","title":"guardrail  <code>instance-attribute</code>","text":"<pre><code>guardrail: InputGuardrail[Any]\n</code></pre> <p>The guardrail that was run.</p>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.InputGuardrailResult.output","title":"output  <code>instance-attribute</code>","text":"<pre><code>output: GuardrailFunctionOutput\n</code></pre> <p>The output of the guardrail function.</p>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.OutputGuardrailResult","title":"OutputGuardrailResult  <code>dataclass</code>","text":"<p>The result of a guardrail run.</p> Source code in <code>src/cai/sdk/agents/guardrail.py</code> <pre><code>@dataclass\nclass OutputGuardrailResult:\n    \"\"\"The result of a guardrail run.\"\"\"\n\n    guardrail: OutputGuardrail[Any]\n    \"\"\"\n    The guardrail that was run.\n    \"\"\"\n\n    agent_output: Any\n    \"\"\"\n    The output of the agent that was checked by the guardrail.\n    \"\"\"\n\n    agent: Agent[Any]\n    \"\"\"\n    The agent that was checked by the guardrail.\n    \"\"\"\n\n    output: GuardrailFunctionOutput\n    \"\"\"The output of the guardrail function.\"\"\"\n</code></pre>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.OutputGuardrailResult.guardrail","title":"guardrail  <code>instance-attribute</code>","text":"<pre><code>guardrail: OutputGuardrail[Any]\n</code></pre> <p>The guardrail that was run.</p>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.OutputGuardrailResult.agent_output","title":"agent_output  <code>instance-attribute</code>","text":"<pre><code>agent_output: Any\n</code></pre> <p>The output of the agent that was checked by the guardrail.</p>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.OutputGuardrailResult.agent","title":"agent  <code>instance-attribute</code>","text":"<pre><code>agent: Agent[Any]\n</code></pre> <p>The agent that was checked by the guardrail.</p>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.OutputGuardrailResult.output","title":"output  <code>instance-attribute</code>","text":"<pre><code>output: GuardrailFunctionOutput\n</code></pre> <p>The output of the guardrail function.</p>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.InputGuardrail","title":"InputGuardrail  <code>dataclass</code>","text":"<p>               Bases: <code>Generic[TContext]</code></p> <p>Input guardrails are checks that run in parallel to the agent's execution. They can be used to do things like: - Check if input messages are off-topic - Take over control of the agent's execution if an unexpected input is detected</p> <p>You can use the <code>@input_guardrail()</code> decorator to turn a function into an <code>InputGuardrail</code>, or create an <code>InputGuardrail</code> manually.</p> <p>Guardrails return a <code>GuardrailResult</code>. If <code>result.tripwire_triggered</code> is <code>True</code>, the agent execution will immediately stop and a <code>InputGuardrailTripwireTriggered</code> exception will be raised</p> Source code in <code>src/cai/sdk/agents/guardrail.py</code> <pre><code>@dataclass\nclass InputGuardrail(Generic[TContext]):\n    \"\"\"Input guardrails are checks that run in parallel to the agent's execution.\n    They can be used to do things like:\n    - Check if input messages are off-topic\n    - Take over control of the agent's execution if an unexpected input is detected\n\n    You can use the `@input_guardrail()` decorator to turn a function into an `InputGuardrail`, or\n    create an `InputGuardrail` manually.\n\n    Guardrails return a `GuardrailResult`. If `result.tripwire_triggered` is `True`, the agent\n    execution will immediately stop and a `InputGuardrailTripwireTriggered` exception will be raised\n    \"\"\"\n\n    guardrail_function: Callable[\n        [RunContextWrapper[TContext], Agent[Any], str | list[TResponseInputItem]],\n        MaybeAwaitable[GuardrailFunctionOutput],\n    ]\n    \"\"\"A function that receives the agent input and the context, and returns a\n     `GuardrailResult`. The result marks whether the tripwire was triggered, and can optionally\n     include information about the guardrail's output.\n    \"\"\"\n\n    name: str | None = None\n    \"\"\"The name of the guardrail, used for tracing. If not provided, we'll use the guardrail\n    function's name.\n    \"\"\"\n\n    def get_name(self) -&gt; str:\n        if self.name:\n            return self.name\n\n        return self.guardrail_function.__name__\n\n    async def run(\n        self,\n        agent: Agent[Any],\n        input: str | list[TResponseInputItem],\n        context: RunContextWrapper[TContext],\n    ) -&gt; InputGuardrailResult:\n        if not callable(self.guardrail_function):\n            raise UserError(f\"Guardrail function must be callable, got {self.guardrail_function}\")\n\n        output = self.guardrail_function(context, agent, input)\n        if inspect.isawaitable(output):\n            return InputGuardrailResult(\n                guardrail=self,\n                output=await output,\n            )\n\n        return InputGuardrailResult(\n            guardrail=self,\n            output=output,\n        )\n</code></pre>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.InputGuardrail.guardrail_function","title":"guardrail_function  <code>instance-attribute</code>","text":"<pre><code>guardrail_function: Callable[\n    [\n        RunContextWrapper[TContext],\n        Agent[Any],\n        str | list[TResponseInputItem],\n    ],\n    MaybeAwaitable[GuardrailFunctionOutput],\n]\n</code></pre> <p>A function that receives the agent input and the context, and returns a <code>GuardrailResult</code>. The result marks whether the tripwire was triggered, and can optionally include information about the guardrail's output.</p>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.InputGuardrail.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str | None = None\n</code></pre> <p>The name of the guardrail, used for tracing. If not provided, we'll use the guardrail function's name.</p>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.OutputGuardrail","title":"OutputGuardrail  <code>dataclass</code>","text":"<p>               Bases: <code>Generic[TContext]</code></p> <p>Output guardrails are checks that run on the final output of an agent. They can be used to do check if the output passes certain validation criteria</p> <p>You can use the <code>@output_guardrail()</code> decorator to turn a function into an <code>OutputGuardrail</code>, or create an <code>OutputGuardrail</code> manually.</p> <p>Guardrails return a <code>GuardrailResult</code>. If <code>result.tripwire_triggered</code> is <code>True</code>, a <code>OutputGuardrailTripwireTriggered</code> exception will be raised.</p> Source code in <code>src/cai/sdk/agents/guardrail.py</code> <pre><code>@dataclass\nclass OutputGuardrail(Generic[TContext]):\n    \"\"\"Output guardrails are checks that run on the final output of an agent.\n    They can be used to do check if the output passes certain validation criteria\n\n    You can use the `@output_guardrail()` decorator to turn a function into an `OutputGuardrail`,\n    or create an `OutputGuardrail` manually.\n\n    Guardrails return a `GuardrailResult`. If `result.tripwire_triggered` is `True`, a\n    `OutputGuardrailTripwireTriggered` exception will be raised.\n    \"\"\"\n\n    guardrail_function: Callable[\n        [RunContextWrapper[TContext], Agent[Any], Any],\n        MaybeAwaitable[GuardrailFunctionOutput],\n    ]\n    \"\"\"A function that receives the final agent, its output, and the context, and returns a\n     `GuardrailResult`. The result marks whether the tripwire was triggered, and can optionally\n     include information about the guardrail's output.\n    \"\"\"\n\n    name: str | None = None\n    \"\"\"The name of the guardrail, used for tracing. If not provided, we'll use the guardrail\n    function's name.\n    \"\"\"\n\n    def get_name(self) -&gt; str:\n        if self.name:\n            return self.name\n\n        return self.guardrail_function.__name__\n\n    async def run(\n        self, context: RunContextWrapper[TContext], agent: Agent[Any], agent_output: Any\n    ) -&gt; OutputGuardrailResult:\n        if not callable(self.guardrail_function):\n            raise UserError(f\"Guardrail function must be callable, got {self.guardrail_function}\")\n\n        output = self.guardrail_function(context, agent, agent_output)\n        if inspect.isawaitable(output):\n            return OutputGuardrailResult(\n                guardrail=self,\n                agent=agent,\n                agent_output=agent_output,\n                output=await output,\n            )\n\n        return OutputGuardrailResult(\n            guardrail=self,\n            agent=agent,\n            agent_output=agent_output,\n            output=output,\n        )\n</code></pre>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.OutputGuardrail.guardrail_function","title":"guardrail_function  <code>instance-attribute</code>","text":"<pre><code>guardrail_function: Callable[\n    [RunContextWrapper[TContext], Agent[Any], Any],\n    MaybeAwaitable[GuardrailFunctionOutput],\n]\n</code></pre> <p>A function that receives the final agent, its output, and the context, and returns a <code>GuardrailResult</code>. The result marks whether the tripwire was triggered, and can optionally include information about the guardrail's output.</p>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.OutputGuardrail.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str | None = None\n</code></pre> <p>The name of the guardrail, used for tracing. If not provided, we'll use the guardrail function's name.</p>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.input_guardrail","title":"input_guardrail","text":"<pre><code>input_guardrail(\n    func: _InputGuardrailFuncSync[TContext_co],\n) -&gt; InputGuardrail[TContext_co]\n</code></pre><pre><code>input_guardrail(\n    func: _InputGuardrailFuncAsync[TContext_co],\n) -&gt; InputGuardrail[TContext_co]\n</code></pre><pre><code>input_guardrail(\n    *, name: str | None = None\n) -&gt; Callable[\n    [\n        _InputGuardrailFuncSync[TContext_co]\n        | _InputGuardrailFuncAsync[TContext_co]\n    ],\n    InputGuardrail[TContext_co],\n]\n</code></pre> <pre><code>input_guardrail(\n    func: _InputGuardrailFuncSync[TContext_co]\n    | _InputGuardrailFuncAsync[TContext_co]\n    | None = None,\n    *,\n    name: str | None = None,\n) -&gt; (\n    InputGuardrail[TContext_co]\n    | Callable[\n        [\n            _InputGuardrailFuncSync[TContext_co]\n            | _InputGuardrailFuncAsync[TContext_co]\n        ],\n        InputGuardrail[TContext_co],\n    ]\n)\n</code></pre> <p>Decorator that transforms a sync or async function into an <code>InputGuardrail</code>. It can be used directly (no parentheses) or with keyword args, e.g.:</p> <pre><code>@input_guardrail\ndef my_sync_guardrail(...): ...\n\n@input_guardrail(name=\"guardrail_name\")\nasync def my_async_guardrail(...): ...\n</code></pre> Source code in <code>src/cai/sdk/agents/guardrail.py</code> <pre><code>def input_guardrail(\n    func: _InputGuardrailFuncSync[TContext_co]\n    | _InputGuardrailFuncAsync[TContext_co]\n    | None = None,\n    *,\n    name: str | None = None,\n) -&gt; (\n    InputGuardrail[TContext_co]\n    | Callable[\n        [_InputGuardrailFuncSync[TContext_co] | _InputGuardrailFuncAsync[TContext_co]],\n        InputGuardrail[TContext_co],\n    ]\n):\n    \"\"\"\n    Decorator that transforms a sync or async function into an `InputGuardrail`.\n    It can be used directly (no parentheses) or with keyword args, e.g.:\n\n        @input_guardrail\n        def my_sync_guardrail(...): ...\n\n        @input_guardrail(name=\"guardrail_name\")\n        async def my_async_guardrail(...): ...\n    \"\"\"\n\n    def decorator(\n        f: _InputGuardrailFuncSync[TContext_co] | _InputGuardrailFuncAsync[TContext_co],\n    ) -&gt; InputGuardrail[TContext_co]:\n        return InputGuardrail(guardrail_function=f, name=name)\n\n    if func is not None:\n        # Decorator was used without parentheses\n        return decorator(func)\n\n    # Decorator used with keyword arguments\n    return decorator\n</code></pre>"},{"location":"ref/guardrail/#cai.sdk.agents.guardrail.output_guardrail","title":"output_guardrail","text":"<pre><code>output_guardrail(\n    func: _OutputGuardrailFuncSync[TContext_co],\n) -&gt; OutputGuardrail[TContext_co]\n</code></pre><pre><code>output_guardrail(\n    func: _OutputGuardrailFuncAsync[TContext_co],\n) -&gt; OutputGuardrail[TContext_co]\n</code></pre><pre><code>output_guardrail(\n    *, name: str | None = None\n) -&gt; Callable[\n    [\n        _OutputGuardrailFuncSync[TContext_co]\n        | _OutputGuardrailFuncAsync[TContext_co]\n    ],\n    OutputGuardrail[TContext_co],\n]\n</code></pre> <pre><code>output_guardrail(\n    func: _OutputGuardrailFuncSync[TContext_co]\n    | _OutputGuardrailFuncAsync[TContext_co]\n    | None = None,\n    *,\n    name: str | None = None,\n) -&gt; (\n    OutputGuardrail[TContext_co]\n    | Callable[\n        [\n            _OutputGuardrailFuncSync[TContext_co]\n            | _OutputGuardrailFuncAsync[TContext_co]\n        ],\n        OutputGuardrail[TContext_co],\n    ]\n)\n</code></pre> <p>Decorator that transforms a sync or async function into an <code>OutputGuardrail</code>. It can be used directly (no parentheses) or with keyword args, e.g.:</p> <pre><code>@output_guardrail\ndef my_sync_guardrail(...): ...\n\n@output_guardrail(name=\"guardrail_name\")\nasync def my_async_guardrail(...): ...\n</code></pre> Source code in <code>src/cai/sdk/agents/guardrail.py</code> <pre><code>def output_guardrail(\n    func: _OutputGuardrailFuncSync[TContext_co]\n    | _OutputGuardrailFuncAsync[TContext_co]\n    | None = None,\n    *,\n    name: str | None = None,\n) -&gt; (\n    OutputGuardrail[TContext_co]\n    | Callable[\n        [_OutputGuardrailFuncSync[TContext_co] | _OutputGuardrailFuncAsync[TContext_co]],\n        OutputGuardrail[TContext_co],\n    ]\n):\n    \"\"\"\n    Decorator that transforms a sync or async function into an `OutputGuardrail`.\n    It can be used directly (no parentheses) or with keyword args, e.g.:\n\n        @output_guardrail\n        def my_sync_guardrail(...): ...\n\n        @output_guardrail(name=\"guardrail_name\")\n        async def my_async_guardrail(...): ...\n    \"\"\"\n\n    def decorator(\n        f: _OutputGuardrailFuncSync[TContext_co] | _OutputGuardrailFuncAsync[TContext_co],\n    ) -&gt; OutputGuardrail[TContext_co]:\n        return OutputGuardrail(guardrail_function=f, name=name)\n\n    if func is not None:\n        # Decorator was used without parentheses\n        return decorator(func)\n\n    # Decorator used with keyword arguments\n    return decorator\n</code></pre>"},{"location":"ref/handoffs/","title":"<code>Handoffs</code>","text":""},{"location":"ref/handoffs/#cai.sdk.agents.handoffs.HandoffInputFilter","title":"HandoffInputFilter  <code>module-attribute</code>","text":"<pre><code>HandoffInputFilter: TypeAlias = Callable[\n    [HandoffInputData], HandoffInputData\n]\n</code></pre> <p>A function that filters the input data passed to the next agent.</p>"},{"location":"ref/handoffs/#cai.sdk.agents.handoffs.HandoffInputData","title":"HandoffInputData  <code>dataclass</code>","text":"Source code in <code>src/cai/sdk/agents/handoffs.py</code> <pre><code>@dataclass(frozen=True)\nclass HandoffInputData:\n    input_history: str | tuple[TResponseInputItem, ...]\n    \"\"\"\n    The input history before `Runner.run()` was called.\n    \"\"\"\n\n    pre_handoff_items: tuple[RunItem, ...]\n    \"\"\"\n    The items generated before the agent turn where the handoff was invoked.\n    \"\"\"\n\n    new_items: tuple[RunItem, ...]\n    \"\"\"\n    The new items generated during the current agent turn, including the item that triggered the\n    handoff and the tool output message representing the response from the handoff output.\n    \"\"\"\n</code></pre>"},{"location":"ref/handoffs/#cai.sdk.agents.handoffs.HandoffInputData.input_history","title":"input_history  <code>instance-attribute</code>","text":"<pre><code>input_history: str | tuple[TResponseInputItem, ...]\n</code></pre> <p>The input history before <code>Runner.run()</code> was called.</p>"},{"location":"ref/handoffs/#cai.sdk.agents.handoffs.HandoffInputData.pre_handoff_items","title":"pre_handoff_items  <code>instance-attribute</code>","text":"<pre><code>pre_handoff_items: tuple[RunItem, ...]\n</code></pre> <p>The items generated before the agent turn where the handoff was invoked.</p>"},{"location":"ref/handoffs/#cai.sdk.agents.handoffs.HandoffInputData.new_items","title":"new_items  <code>instance-attribute</code>","text":"<pre><code>new_items: tuple[RunItem, ...]\n</code></pre> <p>The new items generated during the current agent turn, including the item that triggered the handoff and the tool output message representing the response from the handoff output.</p>"},{"location":"ref/handoffs/#cai.sdk.agents.handoffs.Handoff","title":"Handoff  <code>dataclass</code>","text":"<p>               Bases: <code>Generic[TContext]</code></p> <p>A handoff is when an agent delegates a task to another agent. For example, in a customer support scenario you might have a \"triage agent\" that determines which agent should handle the user's request, and sub-agents that specialize in different areas like billing, account management, etc.</p> Source code in <code>src/cai/sdk/agents/handoffs.py</code> <pre><code>@dataclass\nclass Handoff(Generic[TContext]):\n    \"\"\"A handoff is when an agent delegates a task to another agent.\n    For example, in a customer support scenario you might have a \"triage agent\" that determines\n    which agent should handle the user's request, and sub-agents that specialize in different\n    areas like billing, account management, etc.\n    \"\"\"\n\n    tool_name: str\n    \"\"\"The name of the tool that represents the handoff.\"\"\"\n\n    tool_description: str\n    \"\"\"The description of the tool that represents the handoff.\"\"\"\n\n    input_json_schema: dict[str, Any]\n    \"\"\"The JSON schema for the handoff input. Can be empty if the handoff does not take an input.\n    \"\"\"\n\n    on_invoke_handoff: Callable[[RunContextWrapper[Any], str], Awaitable[Agent[TContext]]]\n    \"\"\"The function that invokes the handoff. The parameters passed are:\n    1. The handoff run context\n    2. The arguments from the LLM, as a JSON string. Empty string if input_json_schema is empty.\n\n    Must return an agent.\n    \"\"\"\n\n    agent_name: str\n    \"\"\"The name of the agent that is being handed off to.\"\"\"\n\n    input_filter: HandoffInputFilter | None = None\n    \"\"\"A function that filters the inputs that are passed to the next agent. By default, the new\n    agent sees the entire conversation history. In some cases, you may want to filter inputs e.g.\n    to remove older inputs, or remove tools from existing inputs.\n\n    The function will receive the entire conversation history so far, including the input item\n    that triggered the handoff and a tool call output item representing the handoff tool's output.\n\n    You are free to modify the input history or new items as you see fit. The next agent that\n    runs will receive `handoff_input_data.all_items`.\n\n    IMPORTANT: in streaming mode, we will not stream anything as a result of this function. The\n    items generated before will already have been streamed.\n    \"\"\"\n\n    strict_json_schema: bool = True\n    \"\"\"Whether the input JSON schema is in strict mode. We **strongly** recommend setting this to\n    True, as it increases the likelihood of correct JSON input.\n    \"\"\"\n\n    def get_transfer_message(self, agent: Agent[Any]) -&gt; str:\n        base = f\"{{'assistant': '{agent.name}'}}\"\n        return base\n\n    @classmethod\n    def default_tool_name(cls, agent: Agent[Any]) -&gt; str:\n        return _transforms.transform_string_function_style(f\"transfer_to_{agent.name}\")\n\n    @classmethod\n    def default_tool_description(cls, agent: Agent[Any]) -&gt; str:\n        return (\n            f\"Handoff to the {agent.name} agent to handle the request. \"\n            f\"{agent.handoff_description or ''}\"\n        )\n</code></pre>"},{"location":"ref/handoffs/#cai.sdk.agents.handoffs.Handoff.tool_name","title":"tool_name  <code>instance-attribute</code>","text":"<pre><code>tool_name: str\n</code></pre> <p>The name of the tool that represents the handoff.</p>"},{"location":"ref/handoffs/#cai.sdk.agents.handoffs.Handoff.tool_description","title":"tool_description  <code>instance-attribute</code>","text":"<pre><code>tool_description: str\n</code></pre> <p>The description of the tool that represents the handoff.</p>"},{"location":"ref/handoffs/#cai.sdk.agents.handoffs.Handoff.input_json_schema","title":"input_json_schema  <code>instance-attribute</code>","text":"<pre><code>input_json_schema: dict[str, Any]\n</code></pre> <p>The JSON schema for the handoff input. Can be empty if the handoff does not take an input.</p>"},{"location":"ref/handoffs/#cai.sdk.agents.handoffs.Handoff.on_invoke_handoff","title":"on_invoke_handoff  <code>instance-attribute</code>","text":"<pre><code>on_invoke_handoff: Callable[\n    [RunContextWrapper[Any], str],\n    Awaitable[Agent[TContext]],\n]\n</code></pre> <p>The function that invokes the handoff. The parameters passed are: 1. The handoff run context 2. The arguments from the LLM, as a JSON string. Empty string if input_json_schema is empty.</p> <p>Must return an agent.</p>"},{"location":"ref/handoffs/#cai.sdk.agents.handoffs.Handoff.agent_name","title":"agent_name  <code>instance-attribute</code>","text":"<pre><code>agent_name: str\n</code></pre> <p>The name of the agent that is being handed off to.</p>"},{"location":"ref/handoffs/#cai.sdk.agents.handoffs.Handoff.input_filter","title":"input_filter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>input_filter: HandoffInputFilter | None = None\n</code></pre> <p>A function that filters the inputs that are passed to the next agent. By default, the new agent sees the entire conversation history. In some cases, you may want to filter inputs e.g. to remove older inputs, or remove tools from existing inputs.</p> <p>The function will receive the entire conversation history so far, including the input item that triggered the handoff and a tool call output item representing the handoff tool's output.</p> <p>You are free to modify the input history or new items as you see fit. The next agent that runs will receive <code>handoff_input_data.all_items</code>.</p> <p>IMPORTANT: in streaming mode, we will not stream anything as a result of this function. The items generated before will already have been streamed.</p>"},{"location":"ref/handoffs/#cai.sdk.agents.handoffs.Handoff.strict_json_schema","title":"strict_json_schema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strict_json_schema: bool = True\n</code></pre> <p>Whether the input JSON schema is in strict mode. We strongly recommend setting this to True, as it increases the likelihood of correct JSON input.</p>"},{"location":"ref/handoffs/#cai.sdk.agents.handoffs.handoff","title":"handoff","text":"<pre><code>handoff(\n    agent: Agent[TContext],\n    *,\n    tool_name_override: str | None = None,\n    tool_description_override: str | None = None,\n    input_filter: Callable[\n        [HandoffInputData], HandoffInputData\n    ]\n    | None = None,\n) -&gt; Handoff[TContext]\n</code></pre><pre><code>handoff(\n    agent: Agent[TContext],\n    *,\n    on_handoff: OnHandoffWithInput[THandoffInput],\n    input_type: type[THandoffInput],\n    tool_description_override: str | None = None,\n    tool_name_override: str | None = None,\n    input_filter: Callable[\n        [HandoffInputData], HandoffInputData\n    ]\n    | None = None,\n) -&gt; Handoff[TContext]\n</code></pre><pre><code>handoff(\n    agent: Agent[TContext],\n    *,\n    on_handoff: OnHandoffWithoutInput,\n    tool_description_override: str | None = None,\n    tool_name_override: str | None = None,\n    input_filter: Callable[\n        [HandoffInputData], HandoffInputData\n    ]\n    | None = None,\n) -&gt; Handoff[TContext]\n</code></pre> <pre><code>handoff(\n    agent: Agent[TContext],\n    tool_name_override: str | None = None,\n    tool_description_override: str | None = None,\n    on_handoff: OnHandoffWithInput[THandoffInput]\n    | OnHandoffWithoutInput\n    | None = None,\n    input_type: type[THandoffInput] | None = None,\n    input_filter: Callable[\n        [HandoffInputData], HandoffInputData\n    ]\n    | None = None,\n) -&gt; Handoff[TContext]\n</code></pre> <p>Create a handoff from an agent.</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>Agent[TContext]</code> <p>The agent to handoff to, or a function that returns an agent.</p> required <code>tool_name_override</code> <code>str | None</code> <p>Optional override for the name of the tool that represents the handoff.</p> <code>None</code> <code>tool_description_override</code> <code>str | None</code> <p>Optional override for the description of the tool that represents the handoff.</p> <code>None</code> <code>on_handoff</code> <code>OnHandoffWithInput[THandoffInput] | OnHandoffWithoutInput | None</code> <p>A function that runs when the handoff is invoked.</p> <code>None</code> <code>input_type</code> <code>type[THandoffInput] | None</code> <p>the type of the input to the handoff. If provided, the input will be validated against this type. Only relevant if you pass a function that takes an input.</p> <code>None</code> <code>input_filter</code> <code>Callable[[HandoffInputData], HandoffInputData] | None</code> <p>a function that filters the inputs that are passed to the next agent.</p> <code>None</code> Source code in <code>src/cai/sdk/agents/handoffs.py</code> <pre><code>def handoff(\n    agent: Agent[TContext],\n    tool_name_override: str | None = None,\n    tool_description_override: str | None = None,\n    on_handoff: OnHandoffWithInput[THandoffInput] | OnHandoffWithoutInput | None = None,\n    input_type: type[THandoffInput] | None = None,\n    input_filter: Callable[[HandoffInputData], HandoffInputData] | None = None,\n) -&gt; Handoff[TContext]:\n    \"\"\"Create a handoff from an agent.\n\n    Args:\n        agent: The agent to handoff to, or a function that returns an agent.\n        tool_name_override: Optional override for the name of the tool that represents the handoff.\n        tool_description_override: Optional override for the description of the tool that\n            represents the handoff.\n        on_handoff: A function that runs when the handoff is invoked.\n        input_type: the type of the input to the handoff. If provided, the input will be validated\n            against this type. Only relevant if you pass a function that takes an input.\n        input_filter: a function that filters the inputs that are passed to the next agent.\n    \"\"\"\n    assert (on_handoff and input_type) or not (on_handoff and input_type), (\n        \"You must provide either both on_input and input_type, or neither\"\n    )\n    type_adapter: TypeAdapter[Any] | None\n    if input_type is not None:\n        assert callable(on_handoff), \"on_handoff must be callable\"\n        sig = inspect.signature(on_handoff)\n        if len(sig.parameters) != 2:\n            raise UserError(\"on_handoff must take two arguments: context and input\")\n\n        type_adapter = TypeAdapter(input_type)\n        input_json_schema = type_adapter.json_schema()\n    else:\n        type_adapter = None\n        input_json_schema = {}\n        if on_handoff is not None:\n            sig = inspect.signature(on_handoff)\n            if len(sig.parameters) != 1:\n                raise UserError(\"on_handoff must take one argument: context\")\n\n    async def _invoke_handoff(\n        ctx: RunContextWrapper[Any], input_json: str | None = None\n    ) -&gt; Agent[Any]:\n        if input_type is not None and type_adapter is not None:\n            if input_json is None:\n                _error_tracing.attach_error_to_current_span(\n                    SpanError(\n                        message=\"Handoff function expected non-null input, but got None\",\n                        data={\"details\": \"input_json is None\"},\n                    )\n                )\n                raise ModelBehaviorError(\"Handoff function expected non-null input, but got None\")\n\n            validated_input = _json.validate_json(\n                json_str=input_json,\n                type_adapter=type_adapter,\n                partial=False,\n            )\n            input_func = cast(OnHandoffWithInput[THandoffInput], on_handoff)\n            if inspect.iscoroutinefunction(input_func):\n                await input_func(ctx, validated_input)\n            else:\n                input_func(ctx, validated_input)\n        elif on_handoff is not None:\n            no_input_func = cast(OnHandoffWithoutInput, on_handoff)\n            if inspect.iscoroutinefunction(no_input_func):\n                await no_input_func(ctx)\n            else:\n                no_input_func(ctx)\n\n        return agent\n\n    tool_name = tool_name_override or Handoff.default_tool_name(agent)\n    tool_description = tool_description_override or Handoff.default_tool_description(agent)\n\n    # Always ensure the input JSON schema is in strict mode\n    # If there is a need, we can make this configurable in the future\n    input_json_schema = ensure_strict_json_schema(input_json_schema)\n\n    return Handoff(\n        tool_name=tool_name,\n        tool_description=tool_description,\n        input_json_schema=input_json_schema,\n        on_invoke_handoff=_invoke_handoff,\n        input_filter=input_filter,\n        agent_name=agent.name,\n    )\n</code></pre>"},{"location":"ref/items/","title":"<code>Items</code>","text":""},{"location":"ref/items/#cai.sdk.agents.items.TResponse","title":"TResponse  <code>module-attribute</code>","text":"<pre><code>TResponse = Response\n</code></pre> <p>A type alias for the Response type.</p>"},{"location":"ref/items/#cai.sdk.agents.items.TResponseInputItem","title":"TResponseInputItem  <code>module-attribute</code>","text":"<pre><code>TResponseInputItem = ResponseInputItemParam\n</code></pre> <p>A type alias for the ResponseInputItemParam type.</p>"},{"location":"ref/items/#cai.sdk.agents.items.TResponseOutputItem","title":"TResponseOutputItem  <code>module-attribute</code>","text":"<pre><code>TResponseOutputItem = ResponseOutputItem\n</code></pre> <p>A type alias for the ResponseOutputItem type.</p>"},{"location":"ref/items/#cai.sdk.agents.items.TResponseStreamEvent","title":"TResponseStreamEvent  <code>module-attribute</code>","text":"<pre><code>TResponseStreamEvent = ResponseStreamEvent\n</code></pre> <p>A type alias for the ResponseStreamEvent type.</p>"},{"location":"ref/items/#cai.sdk.agents.items.ToolCallItemTypes","title":"ToolCallItemTypes  <code>module-attribute</code>","text":"<pre><code>ToolCallItemTypes: TypeAlias = Union[\n    ResponseFunctionToolCall,\n    ResponseComputerToolCall,\n    ResponseFileSearchToolCall,\n    ResponseFunctionWebSearch,\n]\n</code></pre> <p>A type that represents a tool call item.</p>"},{"location":"ref/items/#cai.sdk.agents.items.RunItem","title":"RunItem  <code>module-attribute</code>","text":"<pre><code>RunItem: TypeAlias = Union[\n    MessageOutputItem,\n    HandoffCallItem,\n    HandoffOutputItem,\n    ToolCallItem,\n    ToolCallOutputItem,\n    ReasoningItem,\n]\n</code></pre> <p>An item generated by an agent.</p>"},{"location":"ref/items/#cai.sdk.agents.items.RunItemBase","title":"RunItemBase  <code>dataclass</code>","text":"<p>               Bases: <code>Generic[T]</code>, <code>ABC</code></p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>@dataclass\nclass RunItemBase(Generic[T], abc.ABC):\n    agent: Agent[Any]\n    \"\"\"The agent whose run caused this item to be generated.\"\"\"\n\n    raw_item: T\n    \"\"\"The raw Responses item from the run. This will always be a either an output item (i.e.\n    `openai.types.responses.ResponseOutputItem` or an input item\n    (i.e. `openai.types.responses.ResponseInputItemParam`).\n    \"\"\"\n\n    def to_input_item(self) -&gt; TResponseInputItem:\n        \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"\n        if isinstance(self.raw_item, dict):\n            # We know that input items are dicts, so we can ignore the type error\n            return self.raw_item  # type: ignore\n        elif isinstance(self.raw_item, BaseModel):\n            # All output items are Pydantic models that can be converted to input items.\n            return self.raw_item.model_dump(exclude_unset=True)  # type: ignore\n        else:\n            raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.RunItemBase.agent","title":"agent  <code>instance-attribute</code>","text":"<pre><code>agent: Agent[Any]\n</code></pre> <p>The agent whose run caused this item to be generated.</p>"},{"location":"ref/items/#cai.sdk.agents.items.RunItemBase.raw_item","title":"raw_item  <code>instance-attribute</code>","text":"<pre><code>raw_item: T\n</code></pre> <p>The raw Responses item from the run. This will always be a either an output item (i.e. <code>openai.types.responses.ResponseOutputItem</code> or an input item (i.e. <code>openai.types.responses.ResponseInputItemParam</code>).</p>"},{"location":"ref/items/#cai.sdk.agents.items.RunItemBase.to_input_item","title":"to_input_item","text":"<pre><code>to_input_item() -&gt; TResponseInputItem\n</code></pre> <p>Converts this item into an input item suitable for passing to the model.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>def to_input_item(self) -&gt; TResponseInputItem:\n    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"\n    if isinstance(self.raw_item, dict):\n        # We know that input items are dicts, so we can ignore the type error\n        return self.raw_item  # type: ignore\n    elif isinstance(self.raw_item, BaseModel):\n        # All output items are Pydantic models that can be converted to input items.\n        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore\n    else:\n        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.MessageOutputItem","title":"MessageOutputItem  <code>dataclass</code>","text":"<p>               Bases: <code>RunItemBase[ResponseOutputMessage]</code></p> <p>Represents a message from the LLM.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>@dataclass\nclass MessageOutputItem(RunItemBase[ResponseOutputMessage]):\n    \"\"\"Represents a message from the LLM.\"\"\"\n\n    raw_item: ResponseOutputMessage\n    \"\"\"The raw response output message.\"\"\"\n\n    type: Literal[\"message_output_item\"] = \"message_output_item\"\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.MessageOutputItem.raw_item","title":"raw_item  <code>instance-attribute</code>","text":"<pre><code>raw_item: ResponseOutputMessage\n</code></pre> <p>The raw response output message.</p>"},{"location":"ref/items/#cai.sdk.agents.items.MessageOutputItem.agent","title":"agent  <code>instance-attribute</code>","text":"<pre><code>agent: Agent[Any]\n</code></pre> <p>The agent whose run caused this item to be generated.</p>"},{"location":"ref/items/#cai.sdk.agents.items.MessageOutputItem.to_input_item","title":"to_input_item","text":"<pre><code>to_input_item() -&gt; TResponseInputItem\n</code></pre> <p>Converts this item into an input item suitable for passing to the model.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>def to_input_item(self) -&gt; TResponseInputItem:\n    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"\n    if isinstance(self.raw_item, dict):\n        # We know that input items are dicts, so we can ignore the type error\n        return self.raw_item  # type: ignore\n    elif isinstance(self.raw_item, BaseModel):\n        # All output items are Pydantic models that can be converted to input items.\n        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore\n    else:\n        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.HandoffCallItem","title":"HandoffCallItem  <code>dataclass</code>","text":"<p>               Bases: <code>RunItemBase[ResponseFunctionToolCall]</code></p> <p>Represents a tool call for a handoff from one agent to another.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>@dataclass\nclass HandoffCallItem(RunItemBase[ResponseFunctionToolCall]):\n    \"\"\"Represents a tool call for a handoff from one agent to another.\"\"\"\n\n    raw_item: ResponseFunctionToolCall\n    \"\"\"The raw response function tool call that represents the handoff.\"\"\"\n\n    type: Literal[\"handoff_call_item\"] = \"handoff_call_item\"\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.HandoffCallItem.raw_item","title":"raw_item  <code>instance-attribute</code>","text":"<pre><code>raw_item: ResponseFunctionToolCall\n</code></pre> <p>The raw response function tool call that represents the handoff.</p>"},{"location":"ref/items/#cai.sdk.agents.items.HandoffCallItem.agent","title":"agent  <code>instance-attribute</code>","text":"<pre><code>agent: Agent[Any]\n</code></pre> <p>The agent whose run caused this item to be generated.</p>"},{"location":"ref/items/#cai.sdk.agents.items.HandoffCallItem.to_input_item","title":"to_input_item","text":"<pre><code>to_input_item() -&gt; TResponseInputItem\n</code></pre> <p>Converts this item into an input item suitable for passing to the model.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>def to_input_item(self) -&gt; TResponseInputItem:\n    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"\n    if isinstance(self.raw_item, dict):\n        # We know that input items are dicts, so we can ignore the type error\n        return self.raw_item  # type: ignore\n    elif isinstance(self.raw_item, BaseModel):\n        # All output items are Pydantic models that can be converted to input items.\n        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore\n    else:\n        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.HandoffOutputItem","title":"HandoffOutputItem  <code>dataclass</code>","text":"<p>               Bases: <code>RunItemBase[TResponseInputItem]</code></p> <p>Represents the output of a handoff.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>@dataclass\nclass HandoffOutputItem(RunItemBase[TResponseInputItem]):\n    \"\"\"Represents the output of a handoff.\"\"\"\n\n    raw_item: TResponseInputItem\n    \"\"\"The raw input item that represents the handoff taking place.\"\"\"\n\n    source_agent: Agent[Any]\n    \"\"\"The agent that made the handoff.\"\"\"\n\n    target_agent: Agent[Any]\n    \"\"\"The agent that is being handed off to.\"\"\"\n\n    type: Literal[\"handoff_output_item\"] = \"handoff_output_item\"\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.HandoffOutputItem.raw_item","title":"raw_item  <code>instance-attribute</code>","text":"<pre><code>raw_item: TResponseInputItem\n</code></pre> <p>The raw input item that represents the handoff taking place.</p>"},{"location":"ref/items/#cai.sdk.agents.items.HandoffOutputItem.source_agent","title":"source_agent  <code>instance-attribute</code>","text":"<pre><code>source_agent: Agent[Any]\n</code></pre> <p>The agent that made the handoff.</p>"},{"location":"ref/items/#cai.sdk.agents.items.HandoffOutputItem.target_agent","title":"target_agent  <code>instance-attribute</code>","text":"<pre><code>target_agent: Agent[Any]\n</code></pre> <p>The agent that is being handed off to.</p>"},{"location":"ref/items/#cai.sdk.agents.items.HandoffOutputItem.agent","title":"agent  <code>instance-attribute</code>","text":"<pre><code>agent: Agent[Any]\n</code></pre> <p>The agent whose run caused this item to be generated.</p>"},{"location":"ref/items/#cai.sdk.agents.items.HandoffOutputItem.to_input_item","title":"to_input_item","text":"<pre><code>to_input_item() -&gt; TResponseInputItem\n</code></pre> <p>Converts this item into an input item suitable for passing to the model.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>def to_input_item(self) -&gt; TResponseInputItem:\n    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"\n    if isinstance(self.raw_item, dict):\n        # We know that input items are dicts, so we can ignore the type error\n        return self.raw_item  # type: ignore\n    elif isinstance(self.raw_item, BaseModel):\n        # All output items are Pydantic models that can be converted to input items.\n        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore\n    else:\n        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ToolCallItem","title":"ToolCallItem  <code>dataclass</code>","text":"<p>               Bases: <code>RunItemBase[ToolCallItemTypes]</code></p> <p>Represents a tool call e.g. a function call or computer action call.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>@dataclass\nclass ToolCallItem(RunItemBase[ToolCallItemTypes]):\n    \"\"\"Represents a tool call e.g. a function call or computer action call.\"\"\"\n\n    raw_item: ToolCallItemTypes\n    \"\"\"The raw tool call item.\"\"\"\n\n    type: Literal[\"tool_call_item\"] = \"tool_call_item\"\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ToolCallItem.raw_item","title":"raw_item  <code>instance-attribute</code>","text":"<pre><code>raw_item: ToolCallItemTypes\n</code></pre> <p>The raw tool call item.</p>"},{"location":"ref/items/#cai.sdk.agents.items.ToolCallItem.agent","title":"agent  <code>instance-attribute</code>","text":"<pre><code>agent: Agent[Any]\n</code></pre> <p>The agent whose run caused this item to be generated.</p>"},{"location":"ref/items/#cai.sdk.agents.items.ToolCallItem.to_input_item","title":"to_input_item","text":"<pre><code>to_input_item() -&gt; TResponseInputItem\n</code></pre> <p>Converts this item into an input item suitable for passing to the model.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>def to_input_item(self) -&gt; TResponseInputItem:\n    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"\n    if isinstance(self.raw_item, dict):\n        # We know that input items are dicts, so we can ignore the type error\n        return self.raw_item  # type: ignore\n    elif isinstance(self.raw_item, BaseModel):\n        # All output items are Pydantic models that can be converted to input items.\n        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore\n    else:\n        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ToolCallOutputItem","title":"ToolCallOutputItem  <code>dataclass</code>","text":"<p>               Bases: <code>RunItemBase[Union[FunctionCallOutput, ComputerCallOutput]]</code></p> <p>Represents the output of a tool call.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>@dataclass\nclass ToolCallOutputItem(RunItemBase[Union[FunctionCallOutput, ComputerCallOutput]]):\n    \"\"\"Represents the output of a tool call.\"\"\"\n\n    raw_item: FunctionCallOutput | ComputerCallOutput\n    \"\"\"The raw item from the model.\"\"\"\n\n    output: Any\n    \"\"\"The output of the tool call. This is whatever the tool call returned; the `raw_item`\n    contains a string representation of the output.\n    \"\"\"\n\n    type: Literal[\"tool_call_output_item\"] = \"tool_call_output_item\"\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ToolCallOutputItem.raw_item","title":"raw_item  <code>instance-attribute</code>","text":"<pre><code>raw_item: FunctionCallOutput | ComputerCallOutput\n</code></pre> <p>The raw item from the model.</p>"},{"location":"ref/items/#cai.sdk.agents.items.ToolCallOutputItem.output","title":"output  <code>instance-attribute</code>","text":"<pre><code>output: Any\n</code></pre> <p>The output of the tool call. This is whatever the tool call returned; the <code>raw_item</code> contains a string representation of the output.</p>"},{"location":"ref/items/#cai.sdk.agents.items.ToolCallOutputItem.agent","title":"agent  <code>instance-attribute</code>","text":"<pre><code>agent: Agent[Any]\n</code></pre> <p>The agent whose run caused this item to be generated.</p>"},{"location":"ref/items/#cai.sdk.agents.items.ToolCallOutputItem.to_input_item","title":"to_input_item","text":"<pre><code>to_input_item() -&gt; TResponseInputItem\n</code></pre> <p>Converts this item into an input item suitable for passing to the model.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>def to_input_item(self) -&gt; TResponseInputItem:\n    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"\n    if isinstance(self.raw_item, dict):\n        # We know that input items are dicts, so we can ignore the type error\n        return self.raw_item  # type: ignore\n    elif isinstance(self.raw_item, BaseModel):\n        # All output items are Pydantic models that can be converted to input items.\n        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore\n    else:\n        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ReasoningItem","title":"ReasoningItem  <code>dataclass</code>","text":"<p>               Bases: <code>RunItemBase[ResponseReasoningItem]</code></p> <p>Represents a reasoning item.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>@dataclass\nclass ReasoningItem(RunItemBase[ResponseReasoningItem]):\n    \"\"\"Represents a reasoning item.\"\"\"\n\n    raw_item: ResponseReasoningItem\n    \"\"\"The raw reasoning item.\"\"\"\n\n    type: Literal[\"reasoning_item\"] = \"reasoning_item\"\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ReasoningItem.raw_item","title":"raw_item  <code>instance-attribute</code>","text":"<pre><code>raw_item: ResponseReasoningItem\n</code></pre> <p>The raw reasoning item.</p>"},{"location":"ref/items/#cai.sdk.agents.items.ReasoningItem.agent","title":"agent  <code>instance-attribute</code>","text":"<pre><code>agent: Agent[Any]\n</code></pre> <p>The agent whose run caused this item to be generated.</p>"},{"location":"ref/items/#cai.sdk.agents.items.ReasoningItem.to_input_item","title":"to_input_item","text":"<pre><code>to_input_item() -&gt; TResponseInputItem\n</code></pre> <p>Converts this item into an input item suitable for passing to the model.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>def to_input_item(self) -&gt; TResponseInputItem:\n    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"\n    if isinstance(self.raw_item, dict):\n        # We know that input items are dicts, so we can ignore the type error\n        return self.raw_item  # type: ignore\n    elif isinstance(self.raw_item, BaseModel):\n        # All output items are Pydantic models that can be converted to input items.\n        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore\n    else:\n        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ModelResponse","title":"ModelResponse  <code>dataclass</code>","text":"Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>@dataclass\nclass ModelResponse:\n    output: list[TResponseOutputItem]\n    \"\"\"A list of outputs (messages, tool calls, etc) generated by the model\"\"\"\n\n    usage: Usage\n    \"\"\"The usage information for the response.\"\"\"\n\n    referenceable_id: str | None\n    \"\"\"An ID for the response which can be used to refer to the response in subsequent calls to the\n    model. Not supported by all model providers.\n    \"\"\"\n\n    def to_input_items(self) -&gt; list[TResponseInputItem]:\n        \"\"\"Convert the output into a list of input items suitable for passing to the model.\"\"\"\n        # We happen to know that the shape of the Pydantic output items are the same as the\n        # equivalent TypedDict input items, so we can just convert each one.\n        # This is also tested via unit tests.\n        return [it.model_dump(exclude_unset=True) for it in self.output]  # type: ignore\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ModelResponse.output","title":"output  <code>instance-attribute</code>","text":"<pre><code>output: list[TResponseOutputItem]\n</code></pre> <p>A list of outputs (messages, tool calls, etc) generated by the model</p>"},{"location":"ref/items/#cai.sdk.agents.items.ModelResponse.usage","title":"usage  <code>instance-attribute</code>","text":"<pre><code>usage: Usage\n</code></pre> <p>The usage information for the response.</p>"},{"location":"ref/items/#cai.sdk.agents.items.ModelResponse.referenceable_id","title":"referenceable_id  <code>instance-attribute</code>","text":"<pre><code>referenceable_id: str | None\n</code></pre> <p>An ID for the response which can be used to refer to the response in subsequent calls to the model. Not supported by all model providers.</p>"},{"location":"ref/items/#cai.sdk.agents.items.ModelResponse.to_input_items","title":"to_input_items","text":"<pre><code>to_input_items() -&gt; list[TResponseInputItem]\n</code></pre> <p>Convert the output into a list of input items suitable for passing to the model.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>def to_input_items(self) -&gt; list[TResponseInputItem]:\n    \"\"\"Convert the output into a list of input items suitable for passing to the model.\"\"\"\n    # We happen to know that the shape of the Pydantic output items are the same as the\n    # equivalent TypedDict input items, so we can just convert each one.\n    # This is also tested via unit tests.\n    return [it.model_dump(exclude_unset=True) for it in self.output]  # type: ignore\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ItemHelpers","title":"ItemHelpers","text":"Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>class ItemHelpers:\n    @classmethod\n    def extract_last_content(cls, message: TResponseOutputItem) -&gt; str:\n        \"\"\"Extracts the last text content or refusal from a message.\"\"\"\n        if not isinstance(message, ResponseOutputMessage):\n            return \"\"\n\n        last_content = message.content[-1]\n        if isinstance(last_content, ResponseOutputText):\n            return last_content.text\n        elif isinstance(last_content, ResponseOutputRefusal):\n            return last_content.refusal\n        else:\n            raise ModelBehaviorError(f\"Unexpected content type: {type(last_content)}\")\n\n    @classmethod\n    def extract_last_text(cls, message: TResponseOutputItem) -&gt; str | None:\n        \"\"\"Extracts the last text content from a message, if any. Ignores refusals.\"\"\"\n        if isinstance(message, ResponseOutputMessage):\n            last_content = message.content[-1]\n            if isinstance(last_content, ResponseOutputText):\n                return last_content.text\n\n        return None\n\n    @classmethod\n    def input_to_new_input_list(\n        cls, input: str | list[TResponseInputItem]\n    ) -&gt; list[TResponseInputItem]:\n        \"\"\"Converts a string or list of input items into a list of input items.\"\"\"\n        if isinstance(input, str):\n            return [\n                {\n                    \"content\": input,\n                    \"role\": \"user\",\n                }\n            ]\n        return copy.deepcopy(input)\n\n    @classmethod\n    def text_message_outputs(cls, items: list[RunItem]) -&gt; str:\n        \"\"\"Concatenates all the text content from a list of message output items.\"\"\"\n        text = \"\"\n        for item in items:\n            if isinstance(item, MessageOutputItem):\n                text += cls.text_message_output(item)\n        return text\n\n    @classmethod\n    def text_message_output(cls, message: MessageOutputItem) -&gt; str:\n        \"\"\"Extracts all the text content from a single message output item.\"\"\"\n        text = \"\"\n        for item in message.raw_item.content:\n            if isinstance(item, ResponseOutputText):\n                text += item.text\n        return text\n\n    @classmethod\n    def tool_call_output_item(\n        cls, tool_call: ResponseFunctionToolCall, output: str\n    ) -&gt; FunctionCallOutput:\n        \"\"\"Creates a tool call output item from a tool call and its output.\"\"\"\n        return {\n            \"call_id\": tool_call.call_id,\n            \"output\": output,\n            \"type\": \"function_call_output\",\n        }\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ItemHelpers.extract_last_content","title":"extract_last_content  <code>classmethod</code>","text":"<pre><code>extract_last_content(message: TResponseOutputItem) -&gt; str\n</code></pre> <p>Extracts the last text content or refusal from a message.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>@classmethod\ndef extract_last_content(cls, message: TResponseOutputItem) -&gt; str:\n    \"\"\"Extracts the last text content or refusal from a message.\"\"\"\n    if not isinstance(message, ResponseOutputMessage):\n        return \"\"\n\n    last_content = message.content[-1]\n    if isinstance(last_content, ResponseOutputText):\n        return last_content.text\n    elif isinstance(last_content, ResponseOutputRefusal):\n        return last_content.refusal\n    else:\n        raise ModelBehaviorError(f\"Unexpected content type: {type(last_content)}\")\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ItemHelpers.extract_last_text","title":"extract_last_text  <code>classmethod</code>","text":"<pre><code>extract_last_text(\n    message: TResponseOutputItem,\n) -&gt; str | None\n</code></pre> <p>Extracts the last text content from a message, if any. Ignores refusals.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>@classmethod\ndef extract_last_text(cls, message: TResponseOutputItem) -&gt; str | None:\n    \"\"\"Extracts the last text content from a message, if any. Ignores refusals.\"\"\"\n    if isinstance(message, ResponseOutputMessage):\n        last_content = message.content[-1]\n        if isinstance(last_content, ResponseOutputText):\n            return last_content.text\n\n    return None\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ItemHelpers.input_to_new_input_list","title":"input_to_new_input_list  <code>classmethod</code>","text":"<pre><code>input_to_new_input_list(\n    input: str | list[TResponseInputItem],\n) -&gt; list[TResponseInputItem]\n</code></pre> <p>Converts a string or list of input items into a list of input items.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>@classmethod\ndef input_to_new_input_list(\n    cls, input: str | list[TResponseInputItem]\n) -&gt; list[TResponseInputItem]:\n    \"\"\"Converts a string or list of input items into a list of input items.\"\"\"\n    if isinstance(input, str):\n        return [\n            {\n                \"content\": input,\n                \"role\": \"user\",\n            }\n        ]\n    return copy.deepcopy(input)\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ItemHelpers.text_message_outputs","title":"text_message_outputs  <code>classmethod</code>","text":"<pre><code>text_message_outputs(items: list[RunItem]) -&gt; str\n</code></pre> <p>Concatenates all the text content from a list of message output items.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>@classmethod\ndef text_message_outputs(cls, items: list[RunItem]) -&gt; str:\n    \"\"\"Concatenates all the text content from a list of message output items.\"\"\"\n    text = \"\"\n    for item in items:\n        if isinstance(item, MessageOutputItem):\n            text += cls.text_message_output(item)\n    return text\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ItemHelpers.text_message_output","title":"text_message_output  <code>classmethod</code>","text":"<pre><code>text_message_output(message: MessageOutputItem) -&gt; str\n</code></pre> <p>Extracts all the text content from a single message output item.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>@classmethod\ndef text_message_output(cls, message: MessageOutputItem) -&gt; str:\n    \"\"\"Extracts all the text content from a single message output item.\"\"\"\n    text = \"\"\n    for item in message.raw_item.content:\n        if isinstance(item, ResponseOutputText):\n            text += item.text\n    return text\n</code></pre>"},{"location":"ref/items/#cai.sdk.agents.items.ItemHelpers.tool_call_output_item","title":"tool_call_output_item  <code>classmethod</code>","text":"<pre><code>tool_call_output_item(\n    tool_call: ResponseFunctionToolCall, output: str\n) -&gt; FunctionCallOutput\n</code></pre> <p>Creates a tool call output item from a tool call and its output.</p> Source code in <code>src/cai/sdk/agents/items.py</code> <pre><code>@classmethod\ndef tool_call_output_item(\n    cls, tool_call: ResponseFunctionToolCall, output: str\n) -&gt; FunctionCallOutput:\n    \"\"\"Creates a tool call output item from a tool call and its output.\"\"\"\n    return {\n        \"call_id\": tool_call.call_id,\n        \"output\": output,\n        \"type\": \"function_call_output\",\n    }\n</code></pre>"},{"location":"ref/lifecycle/","title":"<code>Lifecycle</code>","text":""},{"location":"ref/lifecycle/#cai.sdk.agents.lifecycle.RunHooks","title":"RunHooks","text":"<p>               Bases: <code>Generic[TContext]</code></p> <p>A class that receives callbacks on various lifecycle events in an agent run. Subclass and override the methods you need.</p>"},{"location":"ref/lifecycle/#cai.sdk.agents.lifecycle.RunHooks.on_agent_start","title":"on_agent_start  <code>async</code>","text":"<pre><code>on_agent_start(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n) -&gt; None\n</code></pre> <p>Called before the agent is invoked. Called each time the current agent changes.</p>"},{"location":"ref/lifecycle/#cai.sdk.agents.lifecycle.RunHooks.on_agent_end","title":"on_agent_end  <code>async</code>","text":"<pre><code>on_agent_end(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    output: Any,\n) -&gt; None\n</code></pre> <p>Called when the agent produces a final output.</p>"},{"location":"ref/lifecycle/#cai.sdk.agents.lifecycle.RunHooks.on_handoff","title":"on_handoff  <code>async</code>","text":"<pre><code>on_handoff(\n    context: RunContextWrapper[TContext],\n    from_agent: Agent[TContext],\n    to_agent: Agent[TContext],\n) -&gt; None\n</code></pre> <p>Called when a handoff occurs.</p>"},{"location":"ref/lifecycle/#cai.sdk.agents.lifecycle.RunHooks.on_tool_start","title":"on_tool_start  <code>async</code>","text":"<pre><code>on_tool_start(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    tool: Tool,\n) -&gt; None\n</code></pre> <p>Called before a tool is invoked.</p>"},{"location":"ref/lifecycle/#cai.sdk.agents.lifecycle.RunHooks.on_tool_end","title":"on_tool_end  <code>async</code>","text":"<pre><code>on_tool_end(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    tool: Tool,\n    result: str,\n) -&gt; None\n</code></pre> <p>Called after a tool is invoked.</p>"},{"location":"ref/lifecycle/#cai.sdk.agents.lifecycle.AgentHooks","title":"AgentHooks","text":"<p>               Bases: <code>Generic[TContext]</code></p> <p>A class that receives callbacks on various lifecycle events for a specific agent. You can set this on <code>agent.hooks</code> to receive events for that specific agent.</p> <p>Subclass and override the methods you need.</p>"},{"location":"ref/lifecycle/#cai.sdk.agents.lifecycle.AgentHooks.on_start","title":"on_start  <code>async</code>","text":"<pre><code>on_start(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n) -&gt; None\n</code></pre> <p>Called before the agent is invoked. Called each time the running agent is changed to this agent.</p>"},{"location":"ref/lifecycle/#cai.sdk.agents.lifecycle.AgentHooks.on_end","title":"on_end  <code>async</code>","text":"<pre><code>on_end(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    output: Any,\n) -&gt; None\n</code></pre> <p>Called when the agent produces a final output.</p>"},{"location":"ref/lifecycle/#cai.sdk.agents.lifecycle.AgentHooks.on_handoff","title":"on_handoff  <code>async</code>","text":"<pre><code>on_handoff(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    source: Agent[TContext],\n) -&gt; None\n</code></pre> <p>Called when the agent is being handed off to. The <code>source</code> is the agent that is handing off to this agent.</p>"},{"location":"ref/lifecycle/#cai.sdk.agents.lifecycle.AgentHooks.on_tool_start","title":"on_tool_start  <code>async</code>","text":"<pre><code>on_tool_start(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    tool: Tool,\n) -&gt; None\n</code></pre> <p>Called before a tool is invoked.</p>"},{"location":"ref/lifecycle/#cai.sdk.agents.lifecycle.AgentHooks.on_tool_end","title":"on_tool_end  <code>async</code>","text":"<pre><code>on_tool_end(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    tool: Tool,\n    result: str,\n) -&gt; None\n</code></pre> <p>Called after a tool is invoked.</p>"},{"location":"ref/model_settings/","title":"<code>Model settings</code>","text":""},{"location":"ref/model_settings/#cai.sdk.agents.model_settings.ModelSettings","title":"ModelSettings  <code>dataclass</code>","text":"<p>Settings to use when calling an LLM.</p> <p>This class holds optional model configuration parameters (e.g. temperature, top_p, penalties, truncation, etc.).</p> <p>Not all models/providers support all of these parameters, so please check the API documentation for the specific model and provider you are using.</p> Source code in <code>src/cai/sdk/agents/model_settings.py</code> <pre><code>@dataclass\nclass ModelSettings:\n    \"\"\"Settings to use when calling an LLM.\n\n    This class holds optional model configuration parameters (e.g. temperature,\n    top_p, penalties, truncation, etc.).\n\n    Not all models/providers support all of these parameters, so please check the API documentation\n    for the specific model and provider you are using.\n    \"\"\"\n\n    temperature: float | None = None\n    \"\"\"The temperature to use when calling the model.\"\"\"\n\n    top_p: float | None = None\n    \"\"\"The top_p to use when calling the model.\"\"\"\n\n    frequency_penalty: float | None = None\n    \"\"\"The frequency penalty to use when calling the model.\"\"\"\n\n    presence_penalty: float | None = None\n    \"\"\"The presence penalty to use when calling the model.\"\"\"\n\n    tool_choice: Literal[\"auto\", \"required\", \"none\"] | str | None = None\n    \"\"\"The tool choice to use when calling the model.\"\"\"\n\n    parallel_tool_calls: bool | None = None\n    \"\"\"Whether to use parallel tool calls when calling the model.\n    Defaults to False if not provided.\"\"\"\n\n    truncation: Literal[\"auto\", \"disabled\"] | None = None\n    \"\"\"The truncation strategy to use when calling the model.\"\"\"\n\n    max_tokens: int | None = None\n    \"\"\"The maximum number of output tokens to generate.\"\"\"\n\n    store: bool | None = None\n    \"\"\"Whether to store the generated model response for later retrieval.\n    Defaults to True if not provided.\"\"\"\n\n    agent_model: str | None = None\n    \"\"\"The model from the Agent class. If set, this will override the model provided\n    to the OpenAIChatCompletionsModel during initialization.\"\"\"\n\n    def resolve(self, override: ModelSettings | None) -&gt; ModelSettings:\n        \"\"\"Produce a new ModelSettings by overlaying any non-None values from the\n        override on top of this instance.\"\"\"\n        if override is None:\n            return self\n\n        changes = {\n            field.name: getattr(override, field.name)\n            for field in fields(self)\n            if getattr(override, field.name) is not None\n        }\n        return replace(self, **changes)\n</code></pre>"},{"location":"ref/model_settings/#cai.sdk.agents.model_settings.ModelSettings.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: float | None = None\n</code></pre> <p>The temperature to use when calling the model.</p>"},{"location":"ref/model_settings/#cai.sdk.agents.model_settings.ModelSettings.top_p","title":"top_p  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>top_p: float | None = None\n</code></pre> <p>The top_p to use when calling the model.</p>"},{"location":"ref/model_settings/#cai.sdk.agents.model_settings.ModelSettings.frequency_penalty","title":"frequency_penalty  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>frequency_penalty: float | None = None\n</code></pre> <p>The frequency penalty to use when calling the model.</p>"},{"location":"ref/model_settings/#cai.sdk.agents.model_settings.ModelSettings.presence_penalty","title":"presence_penalty  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>presence_penalty: float | None = None\n</code></pre> <p>The presence penalty to use when calling the model.</p>"},{"location":"ref/model_settings/#cai.sdk.agents.model_settings.ModelSettings.tool_choice","title":"tool_choice  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tool_choice: (\n    Literal[\"auto\", \"required\", \"none\"] | str | None\n) = None\n</code></pre> <p>The tool choice to use when calling the model.</p>"},{"location":"ref/model_settings/#cai.sdk.agents.model_settings.ModelSettings.parallel_tool_calls","title":"parallel_tool_calls  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parallel_tool_calls: bool | None = None\n</code></pre> <p>Whether to use parallel tool calls when calling the model. Defaults to False if not provided.</p>"},{"location":"ref/model_settings/#cai.sdk.agents.model_settings.ModelSettings.truncation","title":"truncation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>truncation: Literal['auto', 'disabled'] | None = None\n</code></pre> <p>The truncation strategy to use when calling the model.</p>"},{"location":"ref/model_settings/#cai.sdk.agents.model_settings.ModelSettings.max_tokens","title":"max_tokens  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>max_tokens: int | None = None\n</code></pre> <p>The maximum number of output tokens to generate.</p>"},{"location":"ref/model_settings/#cai.sdk.agents.model_settings.ModelSettings.store","title":"store  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>store: bool | None = None\n</code></pre> <p>Whether to store the generated model response for later retrieval. Defaults to True if not provided.</p>"},{"location":"ref/model_settings/#cai.sdk.agents.model_settings.ModelSettings.agent_model","title":"agent_model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>agent_model: str | None = None\n</code></pre> <p>The model from the Agent class. If set, this will override the model provided to the OpenAIChatCompletionsModel during initialization.</p>"},{"location":"ref/model_settings/#cai.sdk.agents.model_settings.ModelSettings.resolve","title":"resolve","text":"<pre><code>resolve(override: ModelSettings | None) -&gt; ModelSettings\n</code></pre> <p>Produce a new ModelSettings by overlaying any non-None values from the override on top of this instance.</p> Source code in <code>src/cai/sdk/agents/model_settings.py</code> <pre><code>def resolve(self, override: ModelSettings | None) -&gt; ModelSettings:\n    \"\"\"Produce a new ModelSettings by overlaying any non-None values from the\n    override on top of this instance.\"\"\"\n    if override is None:\n        return self\n\n    changes = {\n        field.name: getattr(override, field.name)\n        for field in fields(self)\n        if getattr(override, field.name) is not None\n    }\n    return replace(self, **changes)\n</code></pre>"},{"location":"ref/result/","title":"<code>Results</code>","text":""},{"location":"ref/result/#cai.sdk.agents.result.RunResultBase","title":"RunResultBase  <code>dataclass</code>","text":"<p>               Bases: <code>ABC</code></p> Source code in <code>src/cai/sdk/agents/result.py</code> <pre><code>@dataclass\nclass RunResultBase(abc.ABC):\n    input: str | list[TResponseInputItem]\n    \"\"\"The original input items i.e. the items before run() was called. This may be a mutated\n    version of the input, if there are handoff input filters that mutate the input.\n    \"\"\"\n\n    new_items: list[RunItem]\n    \"\"\"The new items generated during the agent run. These include things like new messages, tool\n    calls and their outputs, etc.\n    \"\"\"\n\n    raw_responses: list[ModelResponse]\n    \"\"\"The raw LLM responses generated by the model during the agent run.\"\"\"\n\n    final_output: Any\n    \"\"\"The output of the last agent.\"\"\"\n\n    input_guardrail_results: list[InputGuardrailResult]\n    \"\"\"Guardrail results for the input messages.\"\"\"\n\n    output_guardrail_results: list[OutputGuardrailResult]\n    \"\"\"Guardrail results for the final output of the agent.\"\"\"\n\n    @property\n    @abc.abstractmethod\n    def last_agent(self) -&gt; Agent[Any]:\n        \"\"\"The last agent that was run.\"\"\"\n\n    def final_output_as(self, cls: type[T], raise_if_incorrect_type: bool = False) -&gt; T:\n        \"\"\"A convenience method to cast the final output to a specific type. By default, the cast\n        is only for the typechecker. If you set `raise_if_incorrect_type` to True, we'll raise a\n        TypeError if the final output is not of the given type.\n\n        Args:\n            cls: The type to cast the final output to.\n            raise_if_incorrect_type: If True, we'll raise a TypeError if the final output is not of\n                the given type.\n\n        Returns:\n            The final output casted to the given type.\n        \"\"\"\n        if raise_if_incorrect_type and not isinstance(self.final_output, cls):\n            raise TypeError(f\"Final output is not of type {cls.__name__}\")\n\n        return cast(T, self.final_output)\n\n    def to_input_list(self) -&gt; list[TResponseInputItem]:\n        \"\"\"Creates a new input list, merging the original input with all the new items generated.\"\"\"\n        original_items: list[TResponseInputItem] = ItemHelpers.input_to_new_input_list(self.input)\n        new_items = [item.to_input_item() for item in self.new_items]\n\n        return original_items + new_items\n</code></pre>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultBase.input","title":"input  <code>instance-attribute</code>","text":"<pre><code>input: str | list[TResponseInputItem]\n</code></pre> <p>The original input items i.e. the items before run() was called. This may be a mutated version of the input, if there are handoff input filters that mutate the input.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultBase.new_items","title":"new_items  <code>instance-attribute</code>","text":"<pre><code>new_items: list[RunItem]\n</code></pre> <p>The new items generated during the agent run. These include things like new messages, tool calls and their outputs, etc.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultBase.raw_responses","title":"raw_responses  <code>instance-attribute</code>","text":"<pre><code>raw_responses: list[ModelResponse]\n</code></pre> <p>The raw LLM responses generated by the model during the agent run.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultBase.final_output","title":"final_output  <code>instance-attribute</code>","text":"<pre><code>final_output: Any\n</code></pre> <p>The output of the last agent.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultBase.input_guardrail_results","title":"input_guardrail_results  <code>instance-attribute</code>","text":"<pre><code>input_guardrail_results: list[InputGuardrailResult]\n</code></pre> <p>Guardrail results for the input messages.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultBase.output_guardrail_results","title":"output_guardrail_results  <code>instance-attribute</code>","text":"<pre><code>output_guardrail_results: list[OutputGuardrailResult]\n</code></pre> <p>Guardrail results for the final output of the agent.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultBase.last_agent","title":"last_agent  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>last_agent: Agent[Any]\n</code></pre> <p>The last agent that was run.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultBase.final_output_as","title":"final_output_as","text":"<pre><code>final_output_as(\n    cls: type[T], raise_if_incorrect_type: bool = False\n) -&gt; T\n</code></pre> <p>A convenience method to cast the final output to a specific type. By default, the cast is only for the typechecker. If you set <code>raise_if_incorrect_type</code> to True, we'll raise a TypeError if the final output is not of the given type.</p> <p>Parameters:</p> Name Type Description Default <code>cls</code> <code>type[T]</code> <p>The type to cast the final output to.</p> required <code>raise_if_incorrect_type</code> <code>bool</code> <p>If True, we'll raise a TypeError if the final output is not of the given type.</p> <code>False</code> <p>Returns:</p> Type Description <code>T</code> <p>The final output casted to the given type.</p> Source code in <code>src/cai/sdk/agents/result.py</code> <pre><code>def final_output_as(self, cls: type[T], raise_if_incorrect_type: bool = False) -&gt; T:\n    \"\"\"A convenience method to cast the final output to a specific type. By default, the cast\n    is only for the typechecker. If you set `raise_if_incorrect_type` to True, we'll raise a\n    TypeError if the final output is not of the given type.\n\n    Args:\n        cls: The type to cast the final output to.\n        raise_if_incorrect_type: If True, we'll raise a TypeError if the final output is not of\n            the given type.\n\n    Returns:\n        The final output casted to the given type.\n    \"\"\"\n    if raise_if_incorrect_type and not isinstance(self.final_output, cls):\n        raise TypeError(f\"Final output is not of type {cls.__name__}\")\n\n    return cast(T, self.final_output)\n</code></pre>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultBase.to_input_list","title":"to_input_list","text":"<pre><code>to_input_list() -&gt; list[TResponseInputItem]\n</code></pre> <p>Creates a new input list, merging the original input with all the new items generated.</p> Source code in <code>src/cai/sdk/agents/result.py</code> <pre><code>def to_input_list(self) -&gt; list[TResponseInputItem]:\n    \"\"\"Creates a new input list, merging the original input with all the new items generated.\"\"\"\n    original_items: list[TResponseInputItem] = ItemHelpers.input_to_new_input_list(self.input)\n    new_items = [item.to_input_item() for item in self.new_items]\n\n    return original_items + new_items\n</code></pre>"},{"location":"ref/result/#cai.sdk.agents.result.RunResult","title":"RunResult  <code>dataclass</code>","text":"<p>               Bases: <code>RunResultBase</code></p> Source code in <code>src/cai/sdk/agents/result.py</code> <pre><code>@dataclass\nclass RunResult(RunResultBase):\n    _last_agent: Agent[Any]\n\n    @property\n    def last_agent(self) -&gt; Agent[Any]:\n        \"\"\"The last agent that was run.\"\"\"\n        return self._last_agent\n\n    def __str__(self) -&gt; str:\n        return pretty_print_result(self)\n</code></pre>"},{"location":"ref/result/#cai.sdk.agents.result.RunResult.last_agent","title":"last_agent  <code>property</code>","text":"<pre><code>last_agent: Agent[Any]\n</code></pre> <p>The last agent that was run.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResult.input","title":"input  <code>instance-attribute</code>","text":"<pre><code>input: str | list[TResponseInputItem]\n</code></pre> <p>The original input items i.e. the items before run() was called. This may be a mutated version of the input, if there are handoff input filters that mutate the input.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResult.new_items","title":"new_items  <code>instance-attribute</code>","text":"<pre><code>new_items: list[RunItem]\n</code></pre> <p>The new items generated during the agent run. These include things like new messages, tool calls and their outputs, etc.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResult.raw_responses","title":"raw_responses  <code>instance-attribute</code>","text":"<pre><code>raw_responses: list[ModelResponse]\n</code></pre> <p>The raw LLM responses generated by the model during the agent run.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResult.final_output","title":"final_output  <code>instance-attribute</code>","text":"<pre><code>final_output: Any\n</code></pre> <p>The output of the last agent.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResult.input_guardrail_results","title":"input_guardrail_results  <code>instance-attribute</code>","text":"<pre><code>input_guardrail_results: list[InputGuardrailResult]\n</code></pre> <p>Guardrail results for the input messages.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResult.output_guardrail_results","title":"output_guardrail_results  <code>instance-attribute</code>","text":"<pre><code>output_guardrail_results: list[OutputGuardrailResult]\n</code></pre> <p>Guardrail results for the final output of the agent.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResult.final_output_as","title":"final_output_as","text":"<pre><code>final_output_as(\n    cls: type[T], raise_if_incorrect_type: bool = False\n) -&gt; T\n</code></pre> <p>A convenience method to cast the final output to a specific type. By default, the cast is only for the typechecker. If you set <code>raise_if_incorrect_type</code> to True, we'll raise a TypeError if the final output is not of the given type.</p> <p>Parameters:</p> Name Type Description Default <code>cls</code> <code>type[T]</code> <p>The type to cast the final output to.</p> required <code>raise_if_incorrect_type</code> <code>bool</code> <p>If True, we'll raise a TypeError if the final output is not of the given type.</p> <code>False</code> <p>Returns:</p> Type Description <code>T</code> <p>The final output casted to the given type.</p> Source code in <code>src/cai/sdk/agents/result.py</code> <pre><code>def final_output_as(self, cls: type[T], raise_if_incorrect_type: bool = False) -&gt; T:\n    \"\"\"A convenience method to cast the final output to a specific type. By default, the cast\n    is only for the typechecker. If you set `raise_if_incorrect_type` to True, we'll raise a\n    TypeError if the final output is not of the given type.\n\n    Args:\n        cls: The type to cast the final output to.\n        raise_if_incorrect_type: If True, we'll raise a TypeError if the final output is not of\n            the given type.\n\n    Returns:\n        The final output casted to the given type.\n    \"\"\"\n    if raise_if_incorrect_type and not isinstance(self.final_output, cls):\n        raise TypeError(f\"Final output is not of type {cls.__name__}\")\n\n    return cast(T, self.final_output)\n</code></pre>"},{"location":"ref/result/#cai.sdk.agents.result.RunResult.to_input_list","title":"to_input_list","text":"<pre><code>to_input_list() -&gt; list[TResponseInputItem]\n</code></pre> <p>Creates a new input list, merging the original input with all the new items generated.</p> Source code in <code>src/cai/sdk/agents/result.py</code> <pre><code>def to_input_list(self) -&gt; list[TResponseInputItem]:\n    \"\"\"Creates a new input list, merging the original input with all the new items generated.\"\"\"\n    original_items: list[TResponseInputItem] = ItemHelpers.input_to_new_input_list(self.input)\n    new_items = [item.to_input_item() for item in self.new_items]\n\n    return original_items + new_items\n</code></pre>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming","title":"RunResultStreaming  <code>dataclass</code>","text":"<p>               Bases: <code>RunResultBase</code></p> <p>The result of an agent run in streaming mode. You can use the <code>stream_events</code> method to receive semantic events as they are generated.</p> <p>The streaming method will raise: - A MaxTurnsExceeded exception if the agent exceeds the max_turns limit. - A GuardrailTripwireTriggered exception if a guardrail is tripped.</p> Source code in <code>src/cai/sdk/agents/result.py</code> <pre><code>@dataclass\nclass RunResultStreaming(RunResultBase):\n    \"\"\"The result of an agent run in streaming mode. You can use the `stream_events` method to\n    receive semantic events as they are generated.\n\n    The streaming method will raise:\n    - A MaxTurnsExceeded exception if the agent exceeds the max_turns limit.\n    - A GuardrailTripwireTriggered exception if a guardrail is tripped.\n    \"\"\"\n\n    current_agent: Agent[Any]\n    \"\"\"The current agent that is running.\"\"\"\n\n    current_turn: int\n    \"\"\"The current turn number.\"\"\"\n\n    max_turns: int\n    \"\"\"The maximum number of turns the agent can run for.\"\"\"\n\n    final_output: Any\n    \"\"\"The final output of the agent. This is None until the agent has finished running.\"\"\"\n\n    _current_agent_output_schema: AgentOutputSchema | None = field(repr=False)\n\n    _trace: Trace | None = field(repr=False)\n\n    is_complete: bool = False\n    \"\"\"Whether the agent has finished running.\"\"\"\n\n    # Queues that the background run_loop writes to\n    _event_queue: asyncio.Queue[StreamEvent | QueueCompleteSentinel] = field(\n        default_factory=asyncio.Queue, repr=False\n    )\n    _input_guardrail_queue: asyncio.Queue[InputGuardrailResult] = field(\n        default_factory=asyncio.Queue, repr=False\n    )\n\n    # Store the asyncio tasks that we're waiting on\n    _run_impl_task: asyncio.Task[Any] | None = field(default=None, repr=False)\n    _input_guardrails_task: asyncio.Task[Any] | None = field(default=None, repr=False)\n    _output_guardrails_task: asyncio.Task[Any] | None = field(default=None, repr=False)\n    _stored_exception: Exception | None = field(default=None, repr=False)\n\n    @property\n    def last_agent(self) -&gt; Agent[Any]:\n        \"\"\"The last agent that was run. Updates as the agent run progresses, so the true last agent\n        is only available after the agent run is complete.\n        \"\"\"\n        return self.current_agent\n\n    async def stream_events(self) -&gt; AsyncIterator[StreamEvent]:\n        \"\"\"Stream deltas for new items as they are generated. We're using the types from the\n        OpenAI Responses API, so these are semantic events: each event has a `type` field that\n        describes the type of the event, along with the data for that event.\n\n        This will raise:\n        - A MaxTurnsExceeded exception if the agent exceeds the max_turns limit.\n        - A GuardrailTripwireTriggered exception if a guardrail is tripped.\n        \"\"\"\n        while True:\n            self._check_errors()\n            if self._stored_exception:\n                logger.debug(\"Breaking due to stored exception\")\n                self.is_complete = True\n                break\n\n            if self.is_complete and self._event_queue.empty():\n                break\n\n            try:\n                item = await self._event_queue.get()\n            except asyncio.CancelledError:\n                break\n\n            if isinstance(item, QueueCompleteSentinel):\n                self._event_queue.task_done()\n                # Check for errors, in case the queue was completed due to an exception\n                self._check_errors()\n                break\n\n            yield item\n            self._event_queue.task_done()\n\n        if self._trace:\n            self._trace.finish(reset_current=True)\n\n        self._cleanup_tasks()\n\n        if self._stored_exception:\n            raise self._stored_exception\n\n    def _check_errors(self):\n        if self.current_turn &gt; self.max_turns:\n            self._stored_exception = MaxTurnsExceeded(f\"Max turns ({self.max_turns}) exceeded\")\n\n        # Fetch all the completed guardrail results from the queue and raise if needed\n        while not self._input_guardrail_queue.empty():\n            guardrail_result = self._input_guardrail_queue.get_nowait()\n            if guardrail_result.output.tripwire_triggered:\n                self._stored_exception = InputGuardrailTripwireTriggered(guardrail_result)\n\n        # Check the tasks for any exceptions\n        if self._run_impl_task and self._run_impl_task.done():\n            exc = self._run_impl_task.exception()\n            if exc and isinstance(exc, Exception):\n                self._stored_exception = exc\n\n        if self._input_guardrails_task and self._input_guardrails_task.done():\n            exc = self._input_guardrails_task.exception()\n            if exc and isinstance(exc, Exception):\n                self._stored_exception = exc\n\n        if self._output_guardrails_task and self._output_guardrails_task.done():\n            exc = self._output_guardrails_task.exception()\n            if exc and isinstance(exc, Exception):\n                self._stored_exception = exc\n\n    def _cleanup_tasks(self):\n        if self._run_impl_task and not self._run_impl_task.done():\n            self._run_impl_task.cancel()\n\n        if self._input_guardrails_task and not self._input_guardrails_task.done():\n            self._input_guardrails_task.cancel()\n\n        if self._output_guardrails_task and not self._output_guardrails_task.done():\n            self._output_guardrails_task.cancel()\n\n    def __str__(self) -&gt; str:\n        return pretty_print_run_result_streaming(self)\n</code></pre>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming.current_agent","title":"current_agent  <code>instance-attribute</code>","text":"<pre><code>current_agent: Agent[Any]\n</code></pre> <p>The current agent that is running.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming.current_turn","title":"current_turn  <code>instance-attribute</code>","text":"<pre><code>current_turn: int\n</code></pre> <p>The current turn number.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming.max_turns","title":"max_turns  <code>instance-attribute</code>","text":"<pre><code>max_turns: int\n</code></pre> <p>The maximum number of turns the agent can run for.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming.final_output","title":"final_output  <code>instance-attribute</code>","text":"<pre><code>final_output: Any\n</code></pre> <p>The final output of the agent. This is None until the agent has finished running.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming.is_complete","title":"is_complete  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_complete: bool = False\n</code></pre> <p>Whether the agent has finished running.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming.last_agent","title":"last_agent  <code>property</code>","text":"<pre><code>last_agent: Agent[Any]\n</code></pre> <p>The last agent that was run. Updates as the agent run progresses, so the true last agent is only available after the agent run is complete.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming.input","title":"input  <code>instance-attribute</code>","text":"<pre><code>input: str | list[TResponseInputItem]\n</code></pre> <p>The original input items i.e. the items before run() was called. This may be a mutated version of the input, if there are handoff input filters that mutate the input.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming.new_items","title":"new_items  <code>instance-attribute</code>","text":"<pre><code>new_items: list[RunItem]\n</code></pre> <p>The new items generated during the agent run. These include things like new messages, tool calls and their outputs, etc.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming.raw_responses","title":"raw_responses  <code>instance-attribute</code>","text":"<pre><code>raw_responses: list[ModelResponse]\n</code></pre> <p>The raw LLM responses generated by the model during the agent run.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming.input_guardrail_results","title":"input_guardrail_results  <code>instance-attribute</code>","text":"<pre><code>input_guardrail_results: list[InputGuardrailResult]\n</code></pre> <p>Guardrail results for the input messages.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming.output_guardrail_results","title":"output_guardrail_results  <code>instance-attribute</code>","text":"<pre><code>output_guardrail_results: list[OutputGuardrailResult]\n</code></pre> <p>Guardrail results for the final output of the agent.</p>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming.stream_events","title":"stream_events  <code>async</code>","text":"<pre><code>stream_events() -&gt; AsyncIterator[StreamEvent]\n</code></pre> <p>Stream deltas for new items as they are generated. We're using the types from the OpenAI Responses API, so these are semantic events: each event has a <code>type</code> field that describes the type of the event, along with the data for that event.</p> <p>This will raise: - A MaxTurnsExceeded exception if the agent exceeds the max_turns limit. - A GuardrailTripwireTriggered exception if a guardrail is tripped.</p> Source code in <code>src/cai/sdk/agents/result.py</code> <pre><code>async def stream_events(self) -&gt; AsyncIterator[StreamEvent]:\n    \"\"\"Stream deltas for new items as they are generated. We're using the types from the\n    OpenAI Responses API, so these are semantic events: each event has a `type` field that\n    describes the type of the event, along with the data for that event.\n\n    This will raise:\n    - A MaxTurnsExceeded exception if the agent exceeds the max_turns limit.\n    - A GuardrailTripwireTriggered exception if a guardrail is tripped.\n    \"\"\"\n    while True:\n        self._check_errors()\n        if self._stored_exception:\n            logger.debug(\"Breaking due to stored exception\")\n            self.is_complete = True\n            break\n\n        if self.is_complete and self._event_queue.empty():\n            break\n\n        try:\n            item = await self._event_queue.get()\n        except asyncio.CancelledError:\n            break\n\n        if isinstance(item, QueueCompleteSentinel):\n            self._event_queue.task_done()\n            # Check for errors, in case the queue was completed due to an exception\n            self._check_errors()\n            break\n\n        yield item\n        self._event_queue.task_done()\n\n    if self._trace:\n        self._trace.finish(reset_current=True)\n\n    self._cleanup_tasks()\n\n    if self._stored_exception:\n        raise self._stored_exception\n</code></pre>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming.final_output_as","title":"final_output_as","text":"<pre><code>final_output_as(\n    cls: type[T], raise_if_incorrect_type: bool = False\n) -&gt; T\n</code></pre> <p>A convenience method to cast the final output to a specific type. By default, the cast is only for the typechecker. If you set <code>raise_if_incorrect_type</code> to True, we'll raise a TypeError if the final output is not of the given type.</p> <p>Parameters:</p> Name Type Description Default <code>cls</code> <code>type[T]</code> <p>The type to cast the final output to.</p> required <code>raise_if_incorrect_type</code> <code>bool</code> <p>If True, we'll raise a TypeError if the final output is not of the given type.</p> <code>False</code> <p>Returns:</p> Type Description <code>T</code> <p>The final output casted to the given type.</p> Source code in <code>src/cai/sdk/agents/result.py</code> <pre><code>def final_output_as(self, cls: type[T], raise_if_incorrect_type: bool = False) -&gt; T:\n    \"\"\"A convenience method to cast the final output to a specific type. By default, the cast\n    is only for the typechecker. If you set `raise_if_incorrect_type` to True, we'll raise a\n    TypeError if the final output is not of the given type.\n\n    Args:\n        cls: The type to cast the final output to.\n        raise_if_incorrect_type: If True, we'll raise a TypeError if the final output is not of\n            the given type.\n\n    Returns:\n        The final output casted to the given type.\n    \"\"\"\n    if raise_if_incorrect_type and not isinstance(self.final_output, cls):\n        raise TypeError(f\"Final output is not of type {cls.__name__}\")\n\n    return cast(T, self.final_output)\n</code></pre>"},{"location":"ref/result/#cai.sdk.agents.result.RunResultStreaming.to_input_list","title":"to_input_list","text":"<pre><code>to_input_list() -&gt; list[TResponseInputItem]\n</code></pre> <p>Creates a new input list, merging the original input with all the new items generated.</p> Source code in <code>src/cai/sdk/agents/result.py</code> <pre><code>def to_input_list(self) -&gt; list[TResponseInputItem]:\n    \"\"\"Creates a new input list, merging the original input with all the new items generated.\"\"\"\n    original_items: list[TResponseInputItem] = ItemHelpers.input_to_new_input_list(self.input)\n    new_items = [item.to_input_item() for item in self.new_items]\n\n    return original_items + new_items\n</code></pre>"},{"location":"ref/run/","title":"<code>Runner</code>","text":""},{"location":"ref/run/#cai.sdk.agents.run.Runner","title":"Runner","text":"Source code in <code>src/cai/sdk/agents/run.py</code> <pre><code>class Runner:\n    @classmethod\n    async def run(\n        cls,\n        starting_agent: Agent[TContext],\n        input: str | list[TResponseInputItem],\n        *,\n        context: TContext | None = None,\n        max_turns: int = DEFAULT_MAX_TURNS,\n        hooks: RunHooks[TContext] | None = None,\n        run_config: RunConfig | None = None,\n    ) -&gt; RunResult:\n        \"\"\"Run a workflow starting at the given agent. The agent will run in a loop until a final\n        output is generated. The loop runs like so:\n        1. The agent is invoked with the given input.\n        2. If there is a final output (i.e. the agent produces something of type\n            `agent.output_type`, the loop terminates.\n        3. If there's a handoff, we run the loop again, with the new agent.\n        4. Else, we run tool calls (if any), and re-run the loop.\n\n        In two cases, the agent may raise an exception:\n        1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised.\n        2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.\n\n        Note that only the first agent's input guardrails are run.\n\n        Args:\n            starting_agent: The starting agent to run.\n            input: The initial input to the agent. You can pass a single string for a user message,\n                or a list of input items.\n            context: The context to run the agent with.\n            max_turns: The maximum number of turns to run the agent for. A turn is defined as one\n                AI invocation (including any tool calls that might occur).\n            hooks: An object that receives callbacks on various lifecycle events.\n            run_config: Global settings for the entire agent run.\n\n        Returns:\n            A run result containing all the inputs, guardrail results and the output of the last\n            agent. Agents may perform handoffs, so we don't know the specific type of the output.\n        \"\"\"\n        if hooks is None:\n            hooks = RunHooks[Any]()\n        if run_config is None:\n            run_config = RunConfig()\n\n        tool_use_tracker = AgentToolUseTracker()\n\n        with TraceCtxManager(\n            workflow_name=run_config.workflow_name,\n            trace_id=run_config.trace_id,\n            group_id=run_config.group_id,\n            metadata=run_config.trace_metadata,\n            disabled=run_config.tracing_disabled,\n        ):\n            current_turn = 0\n            original_input: str | list[TResponseInputItem] = copy.deepcopy(input)\n            generated_items: list[RunItem] = []\n            model_responses: list[ModelResponse] = []\n\n            context_wrapper: RunContextWrapper[TContext] = RunContextWrapper(\n                context=context,  # type: ignore\n            )\n\n            input_guardrail_results: list[InputGuardrailResult] = []\n\n            current_span: Span[AgentSpanData] | None = None\n            current_agent = starting_agent\n            should_run_agent_start_hooks = True\n\n            try:\n                while True:\n                    # Start an agent span if we don't have one. This span is ended if the current\n                    # agent changes, or if the agent loop ends.\n                    if current_span is None:\n                        handoff_names = [h.agent_name for h in cls._get_handoffs(current_agent)]\n                        if output_schema := cls._get_output_schema(current_agent):\n                            output_type_name = output_schema.output_type_name()\n                        else:\n                            output_type_name = \"str\"\n\n                        current_span = agent_span(\n                            name=current_agent.name,\n                            handoffs=handoff_names,\n                            output_type=output_type_name,\n                        )\n                        current_span.start(mark_as_current=True)\n\n                        all_tools = await cls._get_all_tools(current_agent)\n                        current_span.span_data.tools = [t.name for t in all_tools]\n\n                    current_turn += 1\n                    if current_turn &gt; max_turns:\n                        _error_tracing.attach_error_to_span(\n                            current_span,\n                            SpanError(\n                                message=\"Max turns exceeded\",\n                                data={\"max_turns\": max_turns},\n                            ),\n                        )\n                        raise MaxTurnsExceeded(f\"Max turns ({max_turns}) exceeded\")\n\n                    logger.debug(\n                        f\"Running agent {current_agent.name} (turn {current_turn})\",\n                    )\n\n                    if current_turn == 1:\n                        input_guardrail_results, turn_result = await asyncio.gather(\n                            cls._run_input_guardrails(\n                                starting_agent,\n                                starting_agent.input_guardrails\n                                + (run_config.input_guardrails or []),\n                                copy.deepcopy(input),\n                                context_wrapper,\n                            ),\n                            cls._run_single_turn(\n                                agent=current_agent,\n                                all_tools=all_tools,\n                                original_input=original_input,\n                                generated_items=generated_items,\n                                hooks=hooks,\n                                context_wrapper=context_wrapper,\n                                run_config=run_config,\n                                should_run_agent_start_hooks=should_run_agent_start_hooks,\n                                tool_use_tracker=tool_use_tracker,\n                            ),\n                        )\n                    else:\n                        turn_result = await cls._run_single_turn(\n                            agent=current_agent,\n                            all_tools=all_tools,\n                            original_input=original_input,\n                            generated_items=generated_items,\n                            hooks=hooks,\n                            context_wrapper=context_wrapper,\n                            run_config=run_config,\n                            should_run_agent_start_hooks=should_run_agent_start_hooks,\n                            tool_use_tracker=tool_use_tracker,\n                        )\n                    should_run_agent_start_hooks = False\n\n                    model_responses.append(turn_result.model_response)\n                    original_input = turn_result.original_input\n                    generated_items = turn_result.generated_items\n\n                    if isinstance(turn_result.next_step, NextStepFinalOutput):\n                        output_guardrail_results = await cls._run_output_guardrails(\n                            current_agent.output_guardrails + (run_config.output_guardrails or []),\n                            current_agent,\n                            turn_result.next_step.output,\n                            context_wrapper,\n                        )\n                        return RunResult(\n                            input=original_input,\n                            new_items=generated_items,\n                            raw_responses=model_responses,\n                            final_output=turn_result.next_step.output,\n                            _last_agent=current_agent,\n                            input_guardrail_results=input_guardrail_results,\n                            output_guardrail_results=output_guardrail_results,\n                        )\n                    elif isinstance(turn_result.next_step, NextStepHandoff):\n                        # Get the previous agent before switching\n                        previous_agent = current_agent\n                        current_agent = cast(Agent[TContext], turn_result.next_step.new_agent)\n\n                        # Transfer message history for swarm patterns\n                        # Check if both agents have models with message_history\n                        if (hasattr(previous_agent, 'model') and hasattr(previous_agent.model, 'message_history') and\n                            hasattr(current_agent, 'model') and hasattr(current_agent.model, 'message_history')):\n                            # Import the is_swarm_pattern function from patterns utils\n                            try:\n                                from cai.agents.patterns.utils import is_swarm_pattern\n                                # Check if either agent is part of a swarm pattern\n                                if is_swarm_pattern(previous_agent) or is_swarm_pattern(current_agent):\n                                    # Transfer the message history to the new agent\n                                    current_agent.model.message_history = previous_agent.model.message_history\n                                    # Also share history in AGENT_MANAGER\n                                    if hasattr(previous_agent, 'name') and hasattr(current_agent, 'name'):\n                                        from cai.sdk.agents.simple_agent_manager import AGENT_MANAGER\n                                        AGENT_MANAGER.share_swarm_history(previous_agent.name, current_agent.name)\n                            except ImportError:\n                                # If we can't import, check if agents have bidirectional handoffs\n                                # by looking if the new agent can handoff back to the previous agent\n                                if hasattr(current_agent, 'handoffs'):\n                                    for handoff_item in current_agent.handoffs:\n                                        if hasattr(handoff_item, 'agent_name') and handoff_item.agent_name == previous_agent.name:\n                                            # Bidirectional handoff detected, share history\n                                            current_agent.model.message_history = previous_agent.model.message_history\n                                            break\n\n                        # Register the handoff agent with AGENT_MANAGER for tracking\n                        # This ensures patterns/swarms work with commands like /history and /graph\n                        from cai.sdk.agents.simple_agent_manager import AGENT_MANAGER\n                        if hasattr(current_agent, 'name'):\n                            # For non-parallel patterns, use set_active_agent which will handle it as single agent\n                            # This maintains compatibility with single agent commands\n                            AGENT_MANAGER.set_active_agent(current_agent, current_agent.name)\n\n                        current_span.finish(reset_current=True)\n                        current_span = None\n                        should_run_agent_start_hooks = True\n                    elif isinstance(turn_result.next_step, NextStepRunAgain):\n                        pass\n                    else:\n                        raise AgentsException(\n                            f\"Unknown next step type: {type(turn_result.next_step)}\"\n                        )\n            finally:\n                if current_span:\n                    current_span.finish(reset_current=True)\n\n    @classmethod\n    def run_sync(\n        cls,\n        starting_agent: Agent[TContext],\n        input: str | list[TResponseInputItem],\n        *,\n        context: TContext | None = None,\n        max_turns: int = DEFAULT_MAX_TURNS,\n        hooks: RunHooks[TContext] | None = None,\n        run_config: RunConfig | None = None,\n    ) -&gt; RunResult:\n        \"\"\"Run a workflow synchronously, starting at the given agent. Note that this just wraps the\n        `run` method, so it will not work if there's already an event loop (e.g. inside an async\n        function, or in a Jupyter notebook or async context like FastAPI). For those cases, use\n        the `run` method instead.\n\n        The agent will run in a loop until a final output is generated. The loop runs like so:\n        1. The agent is invoked with the given input.\n        2. If there is a final output (i.e. the agent produces something of type\n            `agent.output_type`, the loop terminates.\n        3. If there's a handoff, we run the loop again, with the new agent.\n        4. Else, we run tool calls (if any), and re-run the loop.\n\n        In two cases, the agent may raise an exception:\n        1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised.\n        2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.\n\n        Note that only the first agent's input guardrails are run.\n\n        Args:\n            starting_agent: The starting agent to run.\n            input: The initial input to the agent. You can pass a single string for a user message,\n                or a list of input items.\n            context: The context to run the agent with.\n            max_turns: The maximum number of turns to run the agent for. A turn is defined as one\n                AI invocation (including any tool calls that might occur).\n            hooks: An object that receives callbacks on various lifecycle events.\n            run_config: Global settings for the entire agent run.\n\n        Returns:\n            A run result containing all the inputs, guardrail results and the output of the last\n            agent. Agents may perform handoffs, so we don't know the specific type of the output.\n        \"\"\"\n        return asyncio.get_event_loop().run_until_complete(\n            cls.run(\n                starting_agent,\n                input,\n                context=context,\n                max_turns=max_turns,\n                hooks=hooks,\n                run_config=run_config,\n            )\n        )\n\n    @classmethod\n    def run_streamed(\n        cls,\n        starting_agent: Agent[TContext],\n        input: str | list[TResponseInputItem],\n        context: TContext | None = None,\n        max_turns: int = DEFAULT_MAX_TURNS,\n        hooks: RunHooks[TContext] | None = None,\n        run_config: RunConfig | None = None,\n    ) -&gt; RunResultStreaming:\n        \"\"\"Run a workflow starting at the given agent in streaming mode. The returned result object\n        contains a method you can use to stream semantic events as they are generated.\n\n        The agent will run in a loop until a final output is generated. The loop runs like so:\n        1. The agent is invoked with the given input.\n        2. If there is a final output (i.e. the agent produces something of type\n            `agent.output_type`, the loop terminates.\n        3. If there's a handoff, we run the loop again, with the new agent.\n        4. Else, we run tool calls (if any), and re-run the loop.\n\n        In two cases, the agent may raise an exception:\n        1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised.\n        2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.\n\n        Note that only the first agent's input guardrails are run.\n\n        Args:\n            starting_agent: The starting agent to run.\n            input: The initial input to the agent. You can pass a single string for a user message,\n                or a list of input items.\n            context: The context to run the agent with.\n            max_turns: The maximum number of turns to run the agent for. A turn is defined as one\n                AI invocation (including any tool calls that might occur).\n            hooks: An object that receives callbacks on various lifecycle events.\n            run_config: Global settings for the entire agent run.\n\n        Returns:\n            A result object that contains data about the run, as well as a method to stream events.\n        \"\"\"\n        if hooks is None:\n            hooks = RunHooks[Any]()\n        if run_config is None:\n            run_config = RunConfig()\n\n        # If there's already a trace, we don't create a new one. In addition, we can't end the\n        # trace here, because the actual work is done in `stream_events` and this method ends\n        # before that.\n        new_trace = (\n            None\n            if get_current_trace()\n            else trace(\n                workflow_name=run_config.workflow_name,\n                trace_id=run_config.trace_id,\n                group_id=run_config.group_id,\n                metadata=run_config.trace_metadata,\n                disabled=run_config.tracing_disabled,\n            )\n        )\n        # Need to start the trace here, because the current trace contextvar is captured at\n        # asyncio.create_task time\n        if new_trace:\n            new_trace.start(mark_as_current=True)\n\n        output_schema = cls._get_output_schema(starting_agent)\n        context_wrapper: RunContextWrapper[TContext] = RunContextWrapper(\n            context=context  # type: ignore\n        )\n\n        streamed_result = RunResultStreaming(\n            input=copy.deepcopy(input),\n            new_items=[],\n            current_agent=starting_agent,\n            raw_responses=[],\n            final_output=None,\n            is_complete=False,\n            current_turn=0,\n            max_turns=max_turns,\n            input_guardrail_results=[],\n            output_guardrail_results=[],\n            _current_agent_output_schema=output_schema,\n            _trace=new_trace,\n        )\n\n        # Kick off the actual agent loop in the background and return the streamed result object.\n        streamed_result._run_impl_task = asyncio.create_task(\n            cls._run_streamed_impl(\n                starting_input=input,\n                streamed_result=streamed_result,\n                starting_agent=starting_agent,\n                max_turns=max_turns,\n                hooks=hooks,\n                context_wrapper=context_wrapper,\n                run_config=run_config,\n            )\n        )\n        return streamed_result\n\n    @classmethod\n    async def _run_input_guardrails_with_queue(\n        cls,\n        agent: Agent[Any],\n        guardrails: list[InputGuardrail[TContext]],\n        input: str | list[TResponseInputItem],\n        context: RunContextWrapper[TContext],\n        streamed_result: RunResultStreaming,\n        parent_span: Span[Any],\n    ):\n        queue = streamed_result._input_guardrail_queue\n\n        # We'll run the guardrails and push them onto the queue as they complete\n        guardrail_tasks = [\n            asyncio.create_task(\n                RunImpl.run_single_input_guardrail(agent, guardrail, input, context)\n            )\n            for guardrail in guardrails\n        ]\n        guardrail_results = []\n        try:\n            for done in asyncio.as_completed(guardrail_tasks):\n                result = await done\n                if result.output.tripwire_triggered:\n                    _error_tracing.attach_error_to_span(\n                        parent_span,\n                        SpanError(\n                            message=\"Guardrail tripwire triggered\",\n                            data={\n                                \"guardrail\": result.guardrail.get_name(),\n                                \"type\": \"input_guardrail\",\n                            },\n                        ),\n                    )\n                queue.put_nowait(result)\n                guardrail_results.append(result)\n        except Exception:\n            for t in guardrail_tasks:\n                t.cancel()\n            raise\n\n        streamed_result.input_guardrail_results = guardrail_results\n\n    @classmethod\n    async def _run_streamed_impl(\n        cls,\n        starting_input: str | list[TResponseInputItem],\n        streamed_result: RunResultStreaming,\n        starting_agent: Agent[TContext],\n        max_turns: int,\n        hooks: RunHooks[TContext],\n        context_wrapper: RunContextWrapper[TContext],\n        run_config: RunConfig,\n    ):\n        current_span: Span[AgentSpanData] | None = None\n        current_agent = starting_agent\n        current_turn = 0\n        should_run_agent_start_hooks = True\n        tool_use_tracker = AgentToolUseTracker()\n\n        streamed_result._event_queue.put_nowait(AgentUpdatedStreamEvent(new_agent=current_agent))\n\n        try:\n            while True:\n                if streamed_result.is_complete:\n                    break\n\n                # Start an agent span if we don't have one. This span is ended if the current\n                # agent changes, or if the agent loop ends.\n                if current_span is None:\n                    handoff_names = [h.agent_name for h in cls._get_handoffs(current_agent)]\n                    if output_schema := cls._get_output_schema(current_agent):\n                        output_type_name = output_schema.output_type_name()\n                    else:\n                        output_type_name = \"str\"\n\n                    current_span = agent_span(\n                        name=current_agent.name,\n                        handoffs=handoff_names,\n                        output_type=output_type_name,\n                    )\n                    current_span.start(mark_as_current=True)\n\n                    all_tools = await cls._get_all_tools(current_agent)\n                    tool_names = [t.name for t in all_tools]\n                    current_span.span_data.tools = tool_names\n                current_turn += 1\n                streamed_result.current_turn = current_turn\n\n                if current_turn &gt; max_turns:\n                    _error_tracing.attach_error_to_span(\n                        current_span,\n                        SpanError(\n                            message=\"Max turns exceeded\",\n                            data={\"max_turns\": max_turns},\n                        ),\n                    )\n                    streamed_result._event_queue.put_nowait(QueueCompleteSentinel())\n                    break\n\n                if current_turn == 1:\n                    # Run the input guardrails in the background and put the results on the queue\n                    streamed_result._input_guardrails_task = asyncio.create_task(\n                        cls._run_input_guardrails_with_queue(\n                            starting_agent,\n                            starting_agent.input_guardrails + (run_config.input_guardrails or []),\n                            copy.deepcopy(ItemHelpers.input_to_new_input_list(starting_input)),\n                            context_wrapper,\n                            streamed_result,\n                            current_span,\n                        )\n                    )\n                try:\n                    turn_result = await cls._run_single_turn_streamed(\n                        streamed_result,\n                        current_agent,\n                        hooks,\n                        context_wrapper,\n                        run_config,\n                        should_run_agent_start_hooks,\n                        tool_use_tracker,\n                        all_tools,\n                    )\n                    should_run_agent_start_hooks = False\n\n                    # Process the turn result\n                    streamed_result.raw_responses = streamed_result.raw_responses + [\n                        turn_result.model_response\n                    ]\n                    streamed_result.input = turn_result.original_input\n                    streamed_result.new_items = turn_result.generated_items\n\n                    if isinstance(turn_result.next_step, NextStepHandoff):\n                        # Get the previous agent before switching\n                        previous_agent = current_agent\n                        current_agent = turn_result.next_step.new_agent\n\n                        # Transfer message history for swarm patterns\n                        # Check if both agents have models with message_history\n                        if (hasattr(previous_agent, 'model') and hasattr(previous_agent.model, 'message_history') and\n                            hasattr(current_agent, 'model') and hasattr(current_agent.model, 'message_history')):\n                            # Import the is_swarm_pattern function from patterns utils\n                            try:\n                                from cai.agents.patterns.utils import is_swarm_pattern\n                                # Check if either agent is part of a swarm pattern\n                                if is_swarm_pattern(previous_agent) or is_swarm_pattern(current_agent):\n                                    # Transfer the message history to the new agent\n                                    current_agent.model.message_history = previous_agent.model.message_history\n                                    # Also share history in AGENT_MANAGER\n                                    if hasattr(previous_agent, 'name') and hasattr(current_agent, 'name'):\n                                        from cai.sdk.agents.simple_agent_manager import AGENT_MANAGER\n                                        AGENT_MANAGER.share_swarm_history(previous_agent.name, current_agent.name)\n                            except ImportError:\n                                # If we can't import, check if agents have bidirectional handoffs\n                                # by looking if the new agent can handoff back to the previous agent\n                                if hasattr(current_agent, 'handoffs'):\n                                    for handoff_item in current_agent.handoffs:\n                                        if hasattr(handoff_item, 'agent_name') and handoff_item.agent_name == previous_agent.name:\n                                            # Bidirectional handoff detected, share history\n                                            current_agent.model.message_history = previous_agent.model.message_history\n                                            break\n\n                        current_span.finish(reset_current=True)\n                        current_span = None\n                        should_run_agent_start_hooks = True\n                        streamed_result._event_queue.put_nowait(\n                            AgentUpdatedStreamEvent(new_agent=current_agent)\n                        )\n                    elif isinstance(turn_result.next_step, NextStepFinalOutput):\n                        streamed_result._output_guardrails_task = asyncio.create_task(\n                            cls._run_output_guardrails(\n                                current_agent.output_guardrails\n                                + (run_config.output_guardrails or []),\n                                current_agent,\n                                turn_result.next_step.output,\n                                context_wrapper,\n                            )\n                        )\n\n                        try:\n                            output_guardrail_results = await streamed_result._output_guardrails_task\n                        except Exception:\n                            # Exceptions will be checked in the stream_events loop\n                            output_guardrail_results = []\n\n                        streamed_result.output_guardrail_results = output_guardrail_results\n                        streamed_result.final_output = turn_result.next_step.output\n                        streamed_result.is_complete = True\n                        streamed_result._event_queue.put_nowait(QueueCompleteSentinel())\n                    elif isinstance(turn_result.next_step, NextStepRunAgain):\n                        pass\n                except (KeyboardInterrupt, asyncio.CancelledError) as e:\n                    # Re-raise to propagate the interruption\n                    raise e\n                except Exception as e:\n                    if current_span:\n                        _error_tracing.attach_error_to_span(\n                            current_span,\n                            SpanError(\n                                message=\"Error in agent run\",\n                                data={\"error\": str(e)},\n                            ),\n                        )\n                    streamed_result.is_complete = True\n                    streamed_result._event_queue.put_nowait(QueueCompleteSentinel())\n                    raise\n\n            streamed_result.is_complete = True\n        finally:\n            if current_span:\n                current_span.finish(reset_current=True)\n\n    @classmethod\n    async def _run_single_turn_streamed(\n        cls,\n        streamed_result: RunResultStreaming,\n        agent: Agent[TContext],\n        hooks: RunHooks[TContext],\n        context_wrapper: RunContextWrapper[TContext],\n        run_config: RunConfig,\n        should_run_agent_start_hooks: bool,\n        tool_use_tracker: AgentToolUseTracker,\n        all_tools: list[Tool],\n    ) -&gt; SingleStepResult:\n        if should_run_agent_start_hooks:\n            await asyncio.gather(\n                hooks.on_agent_start(context_wrapper, agent),\n                (\n                    agent.hooks.on_start(context_wrapper, agent)\n                    if agent.hooks\n                    else _coro.noop_coroutine()\n                ),\n            )\n\n        output_schema = cls._get_output_schema(agent)\n\n        streamed_result.current_agent = agent\n        streamed_result._current_agent_output_schema = output_schema\n\n        system_prompt = await agent.get_system_prompt(context_wrapper)\n\n        handoffs = cls._get_handoffs(agent)\n        model = cls._get_model(agent, run_config)\n        model_settings = agent.model_settings.resolve(run_config.model_settings)\n        model_settings = RunImpl.maybe_reset_tool_choice(agent, tool_use_tracker, model_settings)\n\n        # Ensure agent model is set in model_settings for streaming mode\n        if not hasattr(model_settings, \"agent_model\") or not model_settings.agent_model:\n            if isinstance(agent.model, str):\n                model_settings.agent_model = agent.model\n            elif isinstance(run_config.model, str):\n                model_settings.agent_model = run_config.model\n\n        final_response: ModelResponse | None = None\n\n        input = ItemHelpers.input_to_new_input_list(streamed_result.input)\n        input.extend([item.to_input_item() for item in streamed_result.new_items])\n\n        # 1. Stream the output events\n        async for event in model.stream_response(\n            system_prompt,\n            input,\n            model_settings,\n            all_tools,\n            output_schema,\n            handoffs,\n            get_model_tracing_impl(\n                run_config.tracing_disabled, run_config.trace_include_sensitive_data\n            ),\n        ):\n            if isinstance(event, ResponseCompletedEvent):\n                usage = (\n                    Usage(\n                        requests=1,\n                        input_tokens=event.response.usage.input_tokens,\n                        output_tokens=event.response.usage.output_tokens,\n                        total_tokens=event.response.usage.total_tokens,\n                    )\n                    if event.response.usage\n                    else Usage()\n                )\n                final_response = ModelResponse(\n                    output=event.response.output,\n                    usage=usage,\n                    referenceable_id=event.response.id,\n                )\n\n            streamed_result._event_queue.put_nowait(RawResponsesStreamEvent(data=event))\n\n        # 2. At this point, the streaming is complete for this turn of the agent loop.\n        if not final_response:\n            raise ModelBehaviorError(\"Model did not produce a final response!\")\n\n        # 3. Now, we can process the turn as we do in the non-streaming case\n        single_step_result = None\n        try:\n            single_step_result = await cls._get_single_step_result_from_response(\n                agent=agent,\n                original_input=streamed_result.input,\n                pre_step_items=streamed_result.new_items,\n                new_response=final_response,\n                output_schema=output_schema,\n                all_tools=all_tools,\n                handoffs=handoffs,\n                hooks=hooks,\n                context_wrapper=context_wrapper,\n                run_config=run_config,\n                tool_use_tracker=tool_use_tracker,\n            )\n\n            RunImpl.stream_step_result_to_queue(single_step_result, streamed_result._event_queue)\n            return single_step_result\n        except (KeyboardInterrupt, asyncio.CancelledError) as e:\n            # When interrupted, we need to ensure the message history is consistent\n            # The tool calls were already added during streaming, but results were not\n            # If we have a partial result, stream it before re-raising\n            if single_step_result:\n                RunImpl.stream_step_result_to_queue(single_step_result, streamed_result._event_queue)\n            raise e\n\n    @classmethod\n    async def _run_single_turn(\n        cls,\n        *,\n        agent: Agent[TContext],\n        all_tools: list[Tool],\n        original_input: str | list[TResponseInputItem],\n        generated_items: list[RunItem],\n        hooks: RunHooks[TContext],\n        context_wrapper: RunContextWrapper[TContext],\n        run_config: RunConfig,\n        should_run_agent_start_hooks: bool,\n        tool_use_tracker: AgentToolUseTracker,\n    ) -&gt; SingleStepResult:\n        # Ensure we run the hooks before anything else\n        if should_run_agent_start_hooks:\n            await asyncio.gather(\n                hooks.on_agent_start(context_wrapper, agent),\n                (\n                    agent.hooks.on_start(context_wrapper, agent)\n                    if agent.hooks\n                    else _coro.noop_coroutine()\n                ),\n            )\n\n        system_prompt = await agent.get_system_prompt(context_wrapper)\n\n        output_schema = cls._get_output_schema(agent)\n        handoffs = cls._get_handoffs(agent)\n        input = ItemHelpers.input_to_new_input_list(original_input)\n        input.extend([generated_item.to_input_item() for generated_item in generated_items])\n\n        new_response = await cls._get_new_response(\n            agent,\n            system_prompt,\n            input,\n            output_schema,\n            all_tools,\n            handoffs,\n            context_wrapper,\n            run_config,\n            tool_use_tracker,\n        )\n\n        return await cls._get_single_step_result_from_response(\n            agent=agent,\n            original_input=original_input,\n            pre_step_items=generated_items,\n            new_response=new_response,\n            output_schema=output_schema,\n            all_tools=all_tools,\n            handoffs=handoffs,\n            hooks=hooks,\n            context_wrapper=context_wrapper,\n            run_config=run_config,\n            tool_use_tracker=tool_use_tracker,\n        )\n\n    @classmethod\n    async def _get_single_step_result_from_response(\n        cls,\n        *,\n        agent: Agent[TContext],\n        all_tools: list[Tool],\n        original_input: str | list[TResponseInputItem],\n        pre_step_items: list[RunItem],\n        new_response: ModelResponse,\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        hooks: RunHooks[TContext],\n        context_wrapper: RunContextWrapper[TContext],\n        run_config: RunConfig,\n        tool_use_tracker: AgentToolUseTracker,\n    ) -&gt; SingleStepResult:\n        processed_response = RunImpl.process_model_response(\n            agent=agent,\n            all_tools=all_tools,\n            response=new_response,\n            output_schema=output_schema,\n            handoffs=handoffs,\n        )\n\n        # Log tools used with robust type checking\n        if hasattr(processed_response, \"tools_used\") and processed_response.tools_used:\n            for i, tool_call in enumerate(processed_response.tools_used):\n                try:\n                    # Safely extract tool name with multiple fallbacks\n                    tool_name = \"Unknown\"\n                    try:\n                        if hasattr(tool_call, \"tool\"):\n                            if isinstance(tool_call.tool, str):\n                                tool_name = tool_call.tool\n                            elif hasattr(tool_call.tool, \"name\"):\n                                tool_name = tool_call.tool.name\n                            else:\n                                tool_name = str(tool_call.tool)\n                    except Exception:\n                        pass\n\n                    # Safely extract call_id\n                    call_id = \"Unknown\"\n                    try:\n                        if hasattr(tool_call, \"call_id\"):\n                            call_id = str(tool_call.call_id)\n                    except Exception:\n                        pass\n\n                    # Safely extract parsed_args\n                    parsed_args = \"Unknown\"\n                    try:\n                        if hasattr(tool_call, \"parsed_args\"):\n                            parsed_args = str(tool_call.parsed_args)\n                    except Exception:\n                        pass\n                except Exception:\n                    pass\n\n        tool_use_tracker.add_tool_use(agent, processed_response.tools_used)\n\n        return await RunImpl.execute_tools_and_side_effects(\n            agent=agent,\n            original_input=original_input,\n            pre_step_items=pre_step_items,\n            new_response=new_response,\n            processed_response=processed_response,\n            output_schema=output_schema,\n            hooks=hooks,\n            context_wrapper=context_wrapper,\n            run_config=run_config,\n        )\n\n    @classmethod\n    async def _run_input_guardrails(\n        cls,\n        agent: Agent[Any],\n        guardrails: list[InputGuardrail[TContext]],\n        input: str | list[TResponseInputItem],\n        context: RunContextWrapper[TContext],\n    ) -&gt; list[InputGuardrailResult]:\n        if not guardrails:\n            return []\n\n        guardrail_tasks = [\n            asyncio.create_task(\n                RunImpl.run_single_input_guardrail(agent, guardrail, input, context)\n            )\n            for guardrail in guardrails\n        ]\n\n        guardrail_results = []\n\n        for done in asyncio.as_completed(guardrail_tasks):\n            result = await done\n            if result.output.tripwire_triggered:\n                # Cancel all guardrail tasks if a tripwire is triggered.\n                for t in guardrail_tasks:\n                    t.cancel()\n                _error_tracing.attach_error_to_current_span(\n                    SpanError(\n                        message=\"Guardrail tripwire triggered\",\n                        data={\"guardrail\": result.guardrail.get_name()},\n                    )\n                )\n                raise InputGuardrailTripwireTriggered(result)\n            else:\n                guardrail_results.append(result)\n\n        return guardrail_results\n\n    @classmethod\n    async def _run_output_guardrails(\n        cls,\n        guardrails: list[OutputGuardrail[TContext]],\n        agent: Agent[TContext],\n        agent_output: Any,\n        context: RunContextWrapper[TContext],\n    ) -&gt; list[OutputGuardrailResult]:\n        if not guardrails:\n            return []\n\n        guardrail_tasks = [\n            asyncio.create_task(\n                RunImpl.run_single_output_guardrail(guardrail, agent, agent_output, context)\n            )\n            for guardrail in guardrails\n        ]\n\n        guardrail_results = []\n\n        for done in asyncio.as_completed(guardrail_tasks):\n            result = await done\n            if result.output.tripwire_triggered:\n                # Cancel all guardrail tasks if a tripwire is triggered.\n                for t in guardrail_tasks:\n                    t.cancel()\n                _error_tracing.attach_error_to_current_span(\n                    SpanError(\n                        message=\"Guardrail tripwire triggered\",\n                        data={\"guardrail\": result.guardrail.get_name()},\n                    )\n                )\n                raise OutputGuardrailTripwireTriggered(result)\n            else:\n                guardrail_results.append(result)\n\n        return guardrail_results\n\n    @classmethod\n    async def _get_new_response(\n        cls,\n        agent: Agent[TContext],\n        system_prompt: str | None,\n        input: list[TResponseInputItem],\n        output_schema: AgentOutputSchema | None,\n        all_tools: list[Tool],\n        handoffs: list[Handoff],\n        context_wrapper: RunContextWrapper[TContext],\n        run_config: RunConfig,\n        tool_use_tracker: AgentToolUseTracker,\n    ) -&gt; ModelResponse:\n        model = cls._get_model(agent, run_config)\n        model_settings = agent.model_settings.resolve(run_config.model_settings)\n        model_settings = RunImpl.maybe_reset_tool_choice(agent, tool_use_tracker, model_settings)\n\n        # Ensure agent model is set in model_settings\n        if not hasattr(model_settings, \"agent_model\") or not model_settings.agent_model:\n            if isinstance(agent.model, str):\n                model_settings.agent_model = agent.model\n            elif isinstance(run_config.model, str):\n                model_settings.agent_model = run_config.model\n\n        new_response = await model.get_response(\n            system_instructions=system_prompt,\n            input=input,\n            model_settings=model_settings,\n            tools=all_tools,\n            output_schema=output_schema,\n            handoffs=handoffs,\n            tracing=get_model_tracing_impl(\n                run_config.tracing_disabled, run_config.trace_include_sensitive_data\n            ),\n        )\n\n        context_wrapper.usage.add(new_response.usage)\n\n        return new_response\n\n    @classmethod\n    def _get_output_schema(cls, agent: Agent[Any]) -&gt; AgentOutputSchema | None:\n        if agent.output_type is None or agent.output_type is str:\n            return None\n\n        return AgentOutputSchema(agent.output_type)\n\n    @classmethod\n    def _get_handoffs(cls, agent: Agent[Any]) -&gt; list[Handoff]:\n        handoffs = []\n        for handoff_item in agent.handoffs:\n            if isinstance(handoff_item, Handoff):\n                handoffs.append(handoff_item)\n            elif isinstance(handoff_item, Agent):\n                handoffs.append(handoff(handoff_item))\n        return handoffs\n\n    @classmethod\n    async def _get_all_tools(cls, agent: Agent[Any]) -&gt; list[Tool]:\n        return await agent.get_all_tools()\n\n    @classmethod\n    def _get_model(cls, agent: Agent[Any], run_config: RunConfig) -&gt; Model:\n        model = None\n        agent_model = None\n        if isinstance(run_config.model, Model):\n            model = run_config.model\n        elif isinstance(run_config.model, str):\n            model = run_config.model_provider.get_model(run_config.model)\n            agent_model = run_config.model\n        elif isinstance(agent.model, Model):\n            model = agent.model\n        else:\n            model = run_config.model_provider.get_model(agent.model)\n            agent_model = agent.model\n\n        # Store the original agent model in model_settings for later use\n        if agent_model and hasattr(agent, \"model_settings\"):\n            agent.model_settings.agent_model = agent_model\n\n        # Set agent name if the model supports it (for CLI display)\n        if hasattr(model, \"set_agent_name\"):\n            model.set_agent_name(agent.name)\n\n        return model\n</code></pre>"},{"location":"ref/run/#cai.sdk.agents.run.Runner.run","title":"run  <code>async</code> <code>classmethod</code>","text":"<pre><code>run(\n    starting_agent: Agent[TContext],\n    input: str | list[TResponseInputItem],\n    *,\n    context: TContext | None = None,\n    max_turns: int = DEFAULT_MAX_TURNS,\n    hooks: RunHooks[TContext] | None = None,\n    run_config: RunConfig | None = None,\n) -&gt; RunResult\n</code></pre> <p>Run a workflow starting at the given agent. The agent will run in a loop until a final output is generated. The loop runs like so: 1. The agent is invoked with the given input. 2. If there is a final output (i.e. the agent produces something of type     <code>agent.output_type</code>, the loop terminates. 3. If there's a handoff, we run the loop again, with the new agent. 4. Else, we run tool calls (if any), and re-run the loop.</p> <p>In two cases, the agent may raise an exception: 1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised. 2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.</p> <p>Note that only the first agent's input guardrails are run.</p> <p>Parameters:</p> Name Type Description Default <code>starting_agent</code> <code>Agent[TContext]</code> <p>The starting agent to run.</p> required <code>input</code> <code>str | list[TResponseInputItem]</code> <p>The initial input to the agent. You can pass a single string for a user message, or a list of input items.</p> required <code>context</code> <code>TContext | None</code> <p>The context to run the agent with.</p> <code>None</code> <code>max_turns</code> <code>int</code> <p>The maximum number of turns to run the agent for. A turn is defined as one AI invocation (including any tool calls that might occur).</p> <code>DEFAULT_MAX_TURNS</code> <code>hooks</code> <code>RunHooks[TContext] | None</code> <p>An object that receives callbacks on various lifecycle events.</p> <code>None</code> <code>run_config</code> <code>RunConfig | None</code> <p>Global settings for the entire agent run.</p> <code>None</code> <p>Returns:</p> Type Description <code>RunResult</code> <p>A run result containing all the inputs, guardrail results and the output of the last</p> <code>RunResult</code> <p>agent. Agents may perform handoffs, so we don't know the specific type of the output.</p> Source code in <code>src/cai/sdk/agents/run.py</code> <pre><code>@classmethod\nasync def run(\n    cls,\n    starting_agent: Agent[TContext],\n    input: str | list[TResponseInputItem],\n    *,\n    context: TContext | None = None,\n    max_turns: int = DEFAULT_MAX_TURNS,\n    hooks: RunHooks[TContext] | None = None,\n    run_config: RunConfig | None = None,\n) -&gt; RunResult:\n    \"\"\"Run a workflow starting at the given agent. The agent will run in a loop until a final\n    output is generated. The loop runs like so:\n    1. The agent is invoked with the given input.\n    2. If there is a final output (i.e. the agent produces something of type\n        `agent.output_type`, the loop terminates.\n    3. If there's a handoff, we run the loop again, with the new agent.\n    4. Else, we run tool calls (if any), and re-run the loop.\n\n    In two cases, the agent may raise an exception:\n    1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised.\n    2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.\n\n    Note that only the first agent's input guardrails are run.\n\n    Args:\n        starting_agent: The starting agent to run.\n        input: The initial input to the agent. You can pass a single string for a user message,\n            or a list of input items.\n        context: The context to run the agent with.\n        max_turns: The maximum number of turns to run the agent for. A turn is defined as one\n            AI invocation (including any tool calls that might occur).\n        hooks: An object that receives callbacks on various lifecycle events.\n        run_config: Global settings for the entire agent run.\n\n    Returns:\n        A run result containing all the inputs, guardrail results and the output of the last\n        agent. Agents may perform handoffs, so we don't know the specific type of the output.\n    \"\"\"\n    if hooks is None:\n        hooks = RunHooks[Any]()\n    if run_config is None:\n        run_config = RunConfig()\n\n    tool_use_tracker = AgentToolUseTracker()\n\n    with TraceCtxManager(\n        workflow_name=run_config.workflow_name,\n        trace_id=run_config.trace_id,\n        group_id=run_config.group_id,\n        metadata=run_config.trace_metadata,\n        disabled=run_config.tracing_disabled,\n    ):\n        current_turn = 0\n        original_input: str | list[TResponseInputItem] = copy.deepcopy(input)\n        generated_items: list[RunItem] = []\n        model_responses: list[ModelResponse] = []\n\n        context_wrapper: RunContextWrapper[TContext] = RunContextWrapper(\n            context=context,  # type: ignore\n        )\n\n        input_guardrail_results: list[InputGuardrailResult] = []\n\n        current_span: Span[AgentSpanData] | None = None\n        current_agent = starting_agent\n        should_run_agent_start_hooks = True\n\n        try:\n            while True:\n                # Start an agent span if we don't have one. This span is ended if the current\n                # agent changes, or if the agent loop ends.\n                if current_span is None:\n                    handoff_names = [h.agent_name for h in cls._get_handoffs(current_agent)]\n                    if output_schema := cls._get_output_schema(current_agent):\n                        output_type_name = output_schema.output_type_name()\n                    else:\n                        output_type_name = \"str\"\n\n                    current_span = agent_span(\n                        name=current_agent.name,\n                        handoffs=handoff_names,\n                        output_type=output_type_name,\n                    )\n                    current_span.start(mark_as_current=True)\n\n                    all_tools = await cls._get_all_tools(current_agent)\n                    current_span.span_data.tools = [t.name for t in all_tools]\n\n                current_turn += 1\n                if current_turn &gt; max_turns:\n                    _error_tracing.attach_error_to_span(\n                        current_span,\n                        SpanError(\n                            message=\"Max turns exceeded\",\n                            data={\"max_turns\": max_turns},\n                        ),\n                    )\n                    raise MaxTurnsExceeded(f\"Max turns ({max_turns}) exceeded\")\n\n                logger.debug(\n                    f\"Running agent {current_agent.name} (turn {current_turn})\",\n                )\n\n                if current_turn == 1:\n                    input_guardrail_results, turn_result = await asyncio.gather(\n                        cls._run_input_guardrails(\n                            starting_agent,\n                            starting_agent.input_guardrails\n                            + (run_config.input_guardrails or []),\n                            copy.deepcopy(input),\n                            context_wrapper,\n                        ),\n                        cls._run_single_turn(\n                            agent=current_agent,\n                            all_tools=all_tools,\n                            original_input=original_input,\n                            generated_items=generated_items,\n                            hooks=hooks,\n                            context_wrapper=context_wrapper,\n                            run_config=run_config,\n                            should_run_agent_start_hooks=should_run_agent_start_hooks,\n                            tool_use_tracker=tool_use_tracker,\n                        ),\n                    )\n                else:\n                    turn_result = await cls._run_single_turn(\n                        agent=current_agent,\n                        all_tools=all_tools,\n                        original_input=original_input,\n                        generated_items=generated_items,\n                        hooks=hooks,\n                        context_wrapper=context_wrapper,\n                        run_config=run_config,\n                        should_run_agent_start_hooks=should_run_agent_start_hooks,\n                        tool_use_tracker=tool_use_tracker,\n                    )\n                should_run_agent_start_hooks = False\n\n                model_responses.append(turn_result.model_response)\n                original_input = turn_result.original_input\n                generated_items = turn_result.generated_items\n\n                if isinstance(turn_result.next_step, NextStepFinalOutput):\n                    output_guardrail_results = await cls._run_output_guardrails(\n                        current_agent.output_guardrails + (run_config.output_guardrails or []),\n                        current_agent,\n                        turn_result.next_step.output,\n                        context_wrapper,\n                    )\n                    return RunResult(\n                        input=original_input,\n                        new_items=generated_items,\n                        raw_responses=model_responses,\n                        final_output=turn_result.next_step.output,\n                        _last_agent=current_agent,\n                        input_guardrail_results=input_guardrail_results,\n                        output_guardrail_results=output_guardrail_results,\n                    )\n                elif isinstance(turn_result.next_step, NextStepHandoff):\n                    # Get the previous agent before switching\n                    previous_agent = current_agent\n                    current_agent = cast(Agent[TContext], turn_result.next_step.new_agent)\n\n                    # Transfer message history for swarm patterns\n                    # Check if both agents have models with message_history\n                    if (hasattr(previous_agent, 'model') and hasattr(previous_agent.model, 'message_history') and\n                        hasattr(current_agent, 'model') and hasattr(current_agent.model, 'message_history')):\n                        # Import the is_swarm_pattern function from patterns utils\n                        try:\n                            from cai.agents.patterns.utils import is_swarm_pattern\n                            # Check if either agent is part of a swarm pattern\n                            if is_swarm_pattern(previous_agent) or is_swarm_pattern(current_agent):\n                                # Transfer the message history to the new agent\n                                current_agent.model.message_history = previous_agent.model.message_history\n                                # Also share history in AGENT_MANAGER\n                                if hasattr(previous_agent, 'name') and hasattr(current_agent, 'name'):\n                                    from cai.sdk.agents.simple_agent_manager import AGENT_MANAGER\n                                    AGENT_MANAGER.share_swarm_history(previous_agent.name, current_agent.name)\n                        except ImportError:\n                            # If we can't import, check if agents have bidirectional handoffs\n                            # by looking if the new agent can handoff back to the previous agent\n                            if hasattr(current_agent, 'handoffs'):\n                                for handoff_item in current_agent.handoffs:\n                                    if hasattr(handoff_item, 'agent_name') and handoff_item.agent_name == previous_agent.name:\n                                        # Bidirectional handoff detected, share history\n                                        current_agent.model.message_history = previous_agent.model.message_history\n                                        break\n\n                    # Register the handoff agent with AGENT_MANAGER for tracking\n                    # This ensures patterns/swarms work with commands like /history and /graph\n                    from cai.sdk.agents.simple_agent_manager import AGENT_MANAGER\n                    if hasattr(current_agent, 'name'):\n                        # For non-parallel patterns, use set_active_agent which will handle it as single agent\n                        # This maintains compatibility with single agent commands\n                        AGENT_MANAGER.set_active_agent(current_agent, current_agent.name)\n\n                    current_span.finish(reset_current=True)\n                    current_span = None\n                    should_run_agent_start_hooks = True\n                elif isinstance(turn_result.next_step, NextStepRunAgain):\n                    pass\n                else:\n                    raise AgentsException(\n                        f\"Unknown next step type: {type(turn_result.next_step)}\"\n                    )\n        finally:\n            if current_span:\n                current_span.finish(reset_current=True)\n</code></pre>"},{"location":"ref/run/#cai.sdk.agents.run.Runner.run_sync","title":"run_sync  <code>classmethod</code>","text":"<pre><code>run_sync(\n    starting_agent: Agent[TContext],\n    input: str | list[TResponseInputItem],\n    *,\n    context: TContext | None = None,\n    max_turns: int = DEFAULT_MAX_TURNS,\n    hooks: RunHooks[TContext] | None = None,\n    run_config: RunConfig | None = None,\n) -&gt; RunResult\n</code></pre> <p>Run a workflow synchronously, starting at the given agent. Note that this just wraps the <code>run</code> method, so it will not work if there's already an event loop (e.g. inside an async function, or in a Jupyter notebook or async context like FastAPI). For those cases, use the <code>run</code> method instead.</p> <p>The agent will run in a loop until a final output is generated. The loop runs like so: 1. The agent is invoked with the given input. 2. If there is a final output (i.e. the agent produces something of type     <code>agent.output_type</code>, the loop terminates. 3. If there's a handoff, we run the loop again, with the new agent. 4. Else, we run tool calls (if any), and re-run the loop.</p> <p>In two cases, the agent may raise an exception: 1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised. 2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.</p> <p>Note that only the first agent's input guardrails are run.</p> <p>Parameters:</p> Name Type Description Default <code>starting_agent</code> <code>Agent[TContext]</code> <p>The starting agent to run.</p> required <code>input</code> <code>str | list[TResponseInputItem]</code> <p>The initial input to the agent. You can pass a single string for a user message, or a list of input items.</p> required <code>context</code> <code>TContext | None</code> <p>The context to run the agent with.</p> <code>None</code> <code>max_turns</code> <code>int</code> <p>The maximum number of turns to run the agent for. A turn is defined as one AI invocation (including any tool calls that might occur).</p> <code>DEFAULT_MAX_TURNS</code> <code>hooks</code> <code>RunHooks[TContext] | None</code> <p>An object that receives callbacks on various lifecycle events.</p> <code>None</code> <code>run_config</code> <code>RunConfig | None</code> <p>Global settings for the entire agent run.</p> <code>None</code> <p>Returns:</p> Type Description <code>RunResult</code> <p>A run result containing all the inputs, guardrail results and the output of the last</p> <code>RunResult</code> <p>agent. Agents may perform handoffs, so we don't know the specific type of the output.</p> Source code in <code>src/cai/sdk/agents/run.py</code> <pre><code>@classmethod\ndef run_sync(\n    cls,\n    starting_agent: Agent[TContext],\n    input: str | list[TResponseInputItem],\n    *,\n    context: TContext | None = None,\n    max_turns: int = DEFAULT_MAX_TURNS,\n    hooks: RunHooks[TContext] | None = None,\n    run_config: RunConfig | None = None,\n) -&gt; RunResult:\n    \"\"\"Run a workflow synchronously, starting at the given agent. Note that this just wraps the\n    `run` method, so it will not work if there's already an event loop (e.g. inside an async\n    function, or in a Jupyter notebook or async context like FastAPI). For those cases, use\n    the `run` method instead.\n\n    The agent will run in a loop until a final output is generated. The loop runs like so:\n    1. The agent is invoked with the given input.\n    2. If there is a final output (i.e. the agent produces something of type\n        `agent.output_type`, the loop terminates.\n    3. If there's a handoff, we run the loop again, with the new agent.\n    4. Else, we run tool calls (if any), and re-run the loop.\n\n    In two cases, the agent may raise an exception:\n    1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised.\n    2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.\n\n    Note that only the first agent's input guardrails are run.\n\n    Args:\n        starting_agent: The starting agent to run.\n        input: The initial input to the agent. You can pass a single string for a user message,\n            or a list of input items.\n        context: The context to run the agent with.\n        max_turns: The maximum number of turns to run the agent for. A turn is defined as one\n            AI invocation (including any tool calls that might occur).\n        hooks: An object that receives callbacks on various lifecycle events.\n        run_config: Global settings for the entire agent run.\n\n    Returns:\n        A run result containing all the inputs, guardrail results and the output of the last\n        agent. Agents may perform handoffs, so we don't know the specific type of the output.\n    \"\"\"\n    return asyncio.get_event_loop().run_until_complete(\n        cls.run(\n            starting_agent,\n            input,\n            context=context,\n            max_turns=max_turns,\n            hooks=hooks,\n            run_config=run_config,\n        )\n    )\n</code></pre>"},{"location":"ref/run/#cai.sdk.agents.run.Runner.run_streamed","title":"run_streamed  <code>classmethod</code>","text":"<pre><code>run_streamed(\n    starting_agent: Agent[TContext],\n    input: str | list[TResponseInputItem],\n    context: TContext | None = None,\n    max_turns: int = DEFAULT_MAX_TURNS,\n    hooks: RunHooks[TContext] | None = None,\n    run_config: RunConfig | None = None,\n) -&gt; RunResultStreaming\n</code></pre> <p>Run a workflow starting at the given agent in streaming mode. The returned result object contains a method you can use to stream semantic events as they are generated.</p> <p>The agent will run in a loop until a final output is generated. The loop runs like so: 1. The agent is invoked with the given input. 2. If there is a final output (i.e. the agent produces something of type     <code>agent.output_type</code>, the loop terminates. 3. If there's a handoff, we run the loop again, with the new agent. 4. Else, we run tool calls (if any), and re-run the loop.</p> <p>In two cases, the agent may raise an exception: 1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised. 2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.</p> <p>Note that only the first agent's input guardrails are run.</p> <p>Parameters:</p> Name Type Description Default <code>starting_agent</code> <code>Agent[TContext]</code> <p>The starting agent to run.</p> required <code>input</code> <code>str | list[TResponseInputItem]</code> <p>The initial input to the agent. You can pass a single string for a user message, or a list of input items.</p> required <code>context</code> <code>TContext | None</code> <p>The context to run the agent with.</p> <code>None</code> <code>max_turns</code> <code>int</code> <p>The maximum number of turns to run the agent for. A turn is defined as one AI invocation (including any tool calls that might occur).</p> <code>DEFAULT_MAX_TURNS</code> <code>hooks</code> <code>RunHooks[TContext] | None</code> <p>An object that receives callbacks on various lifecycle events.</p> <code>None</code> <code>run_config</code> <code>RunConfig | None</code> <p>Global settings for the entire agent run.</p> <code>None</code> <p>Returns:</p> Type Description <code>RunResultStreaming</code> <p>A result object that contains data about the run, as well as a method to stream events.</p> Source code in <code>src/cai/sdk/agents/run.py</code> <pre><code>@classmethod\ndef run_streamed(\n    cls,\n    starting_agent: Agent[TContext],\n    input: str | list[TResponseInputItem],\n    context: TContext | None = None,\n    max_turns: int = DEFAULT_MAX_TURNS,\n    hooks: RunHooks[TContext] | None = None,\n    run_config: RunConfig | None = None,\n) -&gt; RunResultStreaming:\n    \"\"\"Run a workflow starting at the given agent in streaming mode. The returned result object\n    contains a method you can use to stream semantic events as they are generated.\n\n    The agent will run in a loop until a final output is generated. The loop runs like so:\n    1. The agent is invoked with the given input.\n    2. If there is a final output (i.e. the agent produces something of type\n        `agent.output_type`, the loop terminates.\n    3. If there's a handoff, we run the loop again, with the new agent.\n    4. Else, we run tool calls (if any), and re-run the loop.\n\n    In two cases, the agent may raise an exception:\n    1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised.\n    2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.\n\n    Note that only the first agent's input guardrails are run.\n\n    Args:\n        starting_agent: The starting agent to run.\n        input: The initial input to the agent. You can pass a single string for a user message,\n            or a list of input items.\n        context: The context to run the agent with.\n        max_turns: The maximum number of turns to run the agent for. A turn is defined as one\n            AI invocation (including any tool calls that might occur).\n        hooks: An object that receives callbacks on various lifecycle events.\n        run_config: Global settings for the entire agent run.\n\n    Returns:\n        A result object that contains data about the run, as well as a method to stream events.\n    \"\"\"\n    if hooks is None:\n        hooks = RunHooks[Any]()\n    if run_config is None:\n        run_config = RunConfig()\n\n    # If there's already a trace, we don't create a new one. In addition, we can't end the\n    # trace here, because the actual work is done in `stream_events` and this method ends\n    # before that.\n    new_trace = (\n        None\n        if get_current_trace()\n        else trace(\n            workflow_name=run_config.workflow_name,\n            trace_id=run_config.trace_id,\n            group_id=run_config.group_id,\n            metadata=run_config.trace_metadata,\n            disabled=run_config.tracing_disabled,\n        )\n    )\n    # Need to start the trace here, because the current trace contextvar is captured at\n    # asyncio.create_task time\n    if new_trace:\n        new_trace.start(mark_as_current=True)\n\n    output_schema = cls._get_output_schema(starting_agent)\n    context_wrapper: RunContextWrapper[TContext] = RunContextWrapper(\n        context=context  # type: ignore\n    )\n\n    streamed_result = RunResultStreaming(\n        input=copy.deepcopy(input),\n        new_items=[],\n        current_agent=starting_agent,\n        raw_responses=[],\n        final_output=None,\n        is_complete=False,\n        current_turn=0,\n        max_turns=max_turns,\n        input_guardrail_results=[],\n        output_guardrail_results=[],\n        _current_agent_output_schema=output_schema,\n        _trace=new_trace,\n    )\n\n    # Kick off the actual agent loop in the background and return the streamed result object.\n    streamed_result._run_impl_task = asyncio.create_task(\n        cls._run_streamed_impl(\n            starting_input=input,\n            streamed_result=streamed_result,\n            starting_agent=starting_agent,\n            max_turns=max_turns,\n            hooks=hooks,\n            context_wrapper=context_wrapper,\n            run_config=run_config,\n        )\n    )\n    return streamed_result\n</code></pre>"},{"location":"ref/run/#cai.sdk.agents.run.RunConfig","title":"RunConfig  <code>dataclass</code>","text":"<p>Configures settings for the entire agent run.</p> Source code in <code>src/cai/sdk/agents/run.py</code> <pre><code>@dataclass\nclass RunConfig:\n    \"\"\"Configures settings for the entire agent run.\"\"\"\n\n    model: str | Model | None = None\n    \"\"\"The model to use for the entire agent run. If set, will override the model set on every\n    agent. The model_provider passed in below must be able to resolve this model name.\n    \"\"\"\n\n    model_provider: ModelProvider = field(default_factory=OpenAIProvider)\n    \"\"\"The model provider to use when looking up string model names. Defaults to OpenAI.\"\"\"\n\n    model_settings: ModelSettings | None = None\n    \"\"\"Configure global model settings. Any non-null values will override the agent-specific model\n    settings.\n    \"\"\"\n\n    handoff_input_filter: HandoffInputFilter | None = None\n    \"\"\"A global input filter to apply to all handoffs. If `Handoff.input_filter` is set, then that\n    will take precedence. The input filter allows you to edit the inputs that are sent to the new\n    agent. See the documentation in `Handoff.input_filter` for more details.\n    \"\"\"\n\n    input_guardrails: list[InputGuardrail[Any]] | None = None\n    \"\"\"A list of input guardrails to run on the initial run input.\"\"\"\n\n    output_guardrails: list[OutputGuardrail[Any]] | None = None\n    \"\"\"A list of output guardrails to run on the final output of the run.\"\"\"\n\n    tracing_disabled: bool = False\n    \"\"\"Whether tracing is disabled for the agent run. If disabled, we will not trace the agent run.\n    \"\"\"\n\n    trace_include_sensitive_data: bool = True\n    \"\"\"Whether we include potentially sensitive data (for example: inputs/outputs of tool calls or\n    LLM generations) in traces. If False, we'll still create spans for these events, but the\n    sensitive data will not be included.\n    \"\"\"\n\n    workflow_name: str = \"Agent workflow\"\n    \"\"\"The name of the run, used for tracing. Should be a logical name for the run, like\n    \"Code generation workflow\" or \"Customer support agent\".\n    \"\"\"\n\n    trace_id: str | None = None\n    \"\"\"A custom trace ID to use for tracing. If not provided, we will generate a new trace ID.\"\"\"\n\n    group_id: str | None = None\n    \"\"\"\n    A grouping identifier to use for tracing, to link multiple traces from the same conversation\n    or process. For example, you might use a chat thread ID.\n    \"\"\"\n\n    trace_metadata: dict[str, Any] | None = None\n    \"\"\"\n    An optional dictionary of additional metadata to include with the trace.\n    \"\"\"\n</code></pre>"},{"location":"ref/run/#cai.sdk.agents.run.RunConfig.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: str | Model | None = None\n</code></pre> <p>The model to use for the entire agent run. If set, will override the model set on every agent. The model_provider passed in below must be able to resolve this model name.</p>"},{"location":"ref/run/#cai.sdk.agents.run.RunConfig.model_provider","title":"model_provider  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_provider: ModelProvider = field(\n    default_factory=OpenAIProvider\n)\n</code></pre> <p>The model provider to use when looking up string model names. Defaults to OpenAI.</p>"},{"location":"ref/run/#cai.sdk.agents.run.RunConfig.model_settings","title":"model_settings  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_settings: ModelSettings | None = None\n</code></pre> <p>Configure global model settings. Any non-null values will override the agent-specific model settings.</p>"},{"location":"ref/run/#cai.sdk.agents.run.RunConfig.handoff_input_filter","title":"handoff_input_filter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>handoff_input_filter: HandoffInputFilter | None = None\n</code></pre> <p>A global input filter to apply to all handoffs. If <code>Handoff.input_filter</code> is set, then that will take precedence. The input filter allows you to edit the inputs that are sent to the new agent. See the documentation in <code>Handoff.input_filter</code> for more details.</p>"},{"location":"ref/run/#cai.sdk.agents.run.RunConfig.input_guardrails","title":"input_guardrails  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>input_guardrails: list[InputGuardrail[Any]] | None = None\n</code></pre> <p>A list of input guardrails to run on the initial run input.</p>"},{"location":"ref/run/#cai.sdk.agents.run.RunConfig.output_guardrails","title":"output_guardrails  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_guardrails: list[OutputGuardrail[Any]] | None = None\n</code></pre> <p>A list of output guardrails to run on the final output of the run.</p>"},{"location":"ref/run/#cai.sdk.agents.run.RunConfig.tracing_disabled","title":"tracing_disabled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tracing_disabled: bool = False\n</code></pre> <p>Whether tracing is disabled for the agent run. If disabled, we will not trace the agent run.</p>"},{"location":"ref/run/#cai.sdk.agents.run.RunConfig.trace_include_sensitive_data","title":"trace_include_sensitive_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace_include_sensitive_data: bool = True\n</code></pre> <p>Whether we include potentially sensitive data (for example: inputs/outputs of tool calls or LLM generations) in traces. If False, we'll still create spans for these events, but the sensitive data will not be included.</p>"},{"location":"ref/run/#cai.sdk.agents.run.RunConfig.workflow_name","title":"workflow_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>workflow_name: str = 'Agent workflow'\n</code></pre> <p>The name of the run, used for tracing. Should be a logical name for the run, like \"Code generation workflow\" or \"Customer support agent\".</p>"},{"location":"ref/run/#cai.sdk.agents.run.RunConfig.trace_id","title":"trace_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace_id: str | None = None\n</code></pre> <p>A custom trace ID to use for tracing. If not provided, we will generate a new trace ID.</p>"},{"location":"ref/run/#cai.sdk.agents.run.RunConfig.group_id","title":"group_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>group_id: str | None = None\n</code></pre> <p>A grouping identifier to use for tracing, to link multiple traces from the same conversation or process. For example, you might use a chat thread ID.</p>"},{"location":"ref/run/#cai.sdk.agents.run.RunConfig.trace_metadata","title":"trace_metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace_metadata: dict[str, Any] | None = None\n</code></pre> <p>An optional dictionary of additional metadata to include with the trace.</p>"},{"location":"ref/run_context/","title":"<code>Run context</code>","text":""},{"location":"ref/run_context/#cai.sdk.agents.run_context.RunContextWrapper","title":"RunContextWrapper  <code>dataclass</code>","text":"<p>               Bases: <code>Generic[TContext]</code></p> <p>This wraps the context object that you passed to <code>Runner.run()</code>. It also contains information about the usage of the agent run so far.</p> <p>NOTE: Contexts are not passed to the LLM. They're a way to pass dependencies and data to code you implement, like tool functions, callbacks, hooks, etc.</p> Source code in <code>src/cai/sdk/agents/run_context.py</code> <pre><code>@dataclass\nclass RunContextWrapper(Generic[TContext]):\n    \"\"\"This wraps the context object that you passed to `Runner.run()`. It also contains\n    information about the usage of the agent run so far.\n\n    NOTE: Contexts are not passed to the LLM. They're a way to pass dependencies and data to code\n    you implement, like tool functions, callbacks, hooks, etc.\n    \"\"\"\n\n    context: TContext\n    \"\"\"The context object (or None), passed by you to `Runner.run()`\"\"\"\n\n    usage: Usage = field(default_factory=Usage)\n    \"\"\"The usage of the agent run so far. For streamed responses, the usage will be stale until the\n    last chunk of the stream is processed.\n    \"\"\"\n</code></pre>"},{"location":"ref/run_context/#cai.sdk.agents.run_context.RunContextWrapper.context","title":"context  <code>instance-attribute</code>","text":"<pre><code>context: TContext\n</code></pre> <p>The context object (or None), passed by you to <code>Runner.run()</code></p>"},{"location":"ref/run_context/#cai.sdk.agents.run_context.RunContextWrapper.usage","title":"usage  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>usage: Usage = field(default_factory=Usage)\n</code></pre> <p>The usage of the agent run so far. For streamed responses, the usage will be stale until the last chunk of the stream is processed.</p>"},{"location":"ref/stream_events/","title":"<code>Streaming events</code>","text":""},{"location":"ref/stream_events/#cai.sdk.agents.stream_events.StreamEvent","title":"StreamEvent  <code>module-attribute</code>","text":"<pre><code>StreamEvent: TypeAlias = Union[\n    RawResponsesStreamEvent,\n    RunItemStreamEvent,\n    AgentUpdatedStreamEvent,\n]\n</code></pre> <p>A streaming event from an agent.</p>"},{"location":"ref/stream_events/#cai.sdk.agents.stream_events.RawResponsesStreamEvent","title":"RawResponsesStreamEvent  <code>dataclass</code>","text":"<p>Streaming event from the LLM. These are 'raw' events, i.e. they are directly passed through from the LLM.</p> Source code in <code>src/cai/sdk/agents/stream_events.py</code> <pre><code>@dataclass\nclass RawResponsesStreamEvent:\n    \"\"\"Streaming event from the LLM. These are 'raw' events, i.e. they are directly passed through\n    from the LLM.\n    \"\"\"\n\n    data: TResponseStreamEvent\n    \"\"\"The raw responses streaming event from the LLM.\"\"\"\n\n    type: Literal[\"raw_response_event\"] = \"raw_response_event\"\n    \"\"\"The type of the event.\"\"\"\n</code></pre>"},{"location":"ref/stream_events/#cai.sdk.agents.stream_events.RawResponsesStreamEvent.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: TResponseStreamEvent\n</code></pre> <p>The raw responses streaming event from the LLM.</p>"},{"location":"ref/stream_events/#cai.sdk.agents.stream_events.RawResponsesStreamEvent.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Literal['raw_response_event'] = 'raw_response_event'\n</code></pre> <p>The type of the event.</p>"},{"location":"ref/stream_events/#cai.sdk.agents.stream_events.RunItemStreamEvent","title":"RunItemStreamEvent  <code>dataclass</code>","text":"<p>Streaming events that wrap a <code>RunItem</code>. As the agent processes the LLM response, it will generate these events for new messages, tool calls, tool outputs, handoffs, etc.</p> Source code in <code>src/cai/sdk/agents/stream_events.py</code> <pre><code>@dataclass\nclass RunItemStreamEvent:\n    \"\"\"Streaming events that wrap a `RunItem`. As the agent processes the LLM response, it will\n    generate these events for new messages, tool calls, tool outputs, handoffs, etc.\n    \"\"\"\n\n    name: Literal[\n        \"message_output_created\",\n        \"handoff_requested\",\n        \"handoff_occured\",\n        \"tool_called\",\n        \"tool_output\",\n        \"reasoning_item_created\",\n    ]\n    \"\"\"The name of the event.\"\"\"\n\n    item: RunItem\n    \"\"\"The item that was created.\"\"\"\n\n    type: Literal[\"run_item_stream_event\"] = \"run_item_stream_event\"\n</code></pre>"},{"location":"ref/stream_events/#cai.sdk.agents.stream_events.RunItemStreamEvent.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: Literal[\n    \"message_output_created\",\n    \"handoff_requested\",\n    \"handoff_occured\",\n    \"tool_called\",\n    \"tool_output\",\n    \"reasoning_item_created\",\n]\n</code></pre> <p>The name of the event.</p>"},{"location":"ref/stream_events/#cai.sdk.agents.stream_events.RunItemStreamEvent.item","title":"item  <code>instance-attribute</code>","text":"<pre><code>item: RunItem\n</code></pre> <p>The item that was created.</p>"},{"location":"ref/stream_events/#cai.sdk.agents.stream_events.AgentUpdatedStreamEvent","title":"AgentUpdatedStreamEvent  <code>dataclass</code>","text":"<p>Event that notifies that there is a new agent running.</p> Source code in <code>src/cai/sdk/agents/stream_events.py</code> <pre><code>@dataclass\nclass AgentUpdatedStreamEvent:\n    \"\"\"Event that notifies that there is a new agent running.\"\"\"\n\n    new_agent: Agent[Any]\n    \"\"\"The new agent.\"\"\"\n\n    type: Literal[\"agent_updated_stream_event\"] = \"agent_updated_stream_event\"\n</code></pre>"},{"location":"ref/stream_events/#cai.sdk.agents.stream_events.AgentUpdatedStreamEvent.new_agent","title":"new_agent  <code>instance-attribute</code>","text":"<pre><code>new_agent: Agent[Any]\n</code></pre> <p>The new agent.</p>"},{"location":"ref/tool/","title":"<code>Tools</code>","text":""},{"location":"ref/tool/#cai.sdk.agents.tool.Tool","title":"Tool  <code>module-attribute</code>","text":"<pre><code>Tool = Union[\n    FunctionTool,\n    FileSearchTool,\n    WebSearchTool,\n    ComputerTool,\n]\n</code></pre> <p>A tool that can be used in an agent.</p>"},{"location":"ref/tool/#cai.sdk.agents.tool.FunctionTool","title":"FunctionTool  <code>dataclass</code>","text":"<p>A tool that wraps a function. In most cases, you should use  the <code>function_tool</code> helpers to create a FunctionTool, as they let you easily wrap a Python function.</p> Source code in <code>src/cai/sdk/agents/tool.py</code> <pre><code>@dataclass\nclass FunctionTool:\n    \"\"\"A tool that wraps a function. In most cases, you should use  the `function_tool` helpers to\n    create a FunctionTool, as they let you easily wrap a Python function.\n    \"\"\"\n\n    name: str\n    \"\"\"The name of the tool, as shown to the LLM. Generally the name of the function.\"\"\"\n\n    description: str\n    \"\"\"A description of the tool, as shown to the LLM.\"\"\"\n\n    params_json_schema: dict[str, Any]\n    \"\"\"The JSON schema for the tool's parameters.\"\"\"\n\n    on_invoke_tool: Callable[[RunContextWrapper[Any], str], Awaitable[Any]]\n    \"\"\"A function that invokes the tool with the given context and parameters. The params passed\n    are:\n    1. The tool run context.\n    2. The arguments from the LLM, as a JSON string.\n\n    You must return a string representation of the tool output, or something we can call `str()` on.\n    In case of errors, you can either raise an Exception (which will cause the run to fail) or\n    return a string error message (which will be sent back to the LLM).\n    \"\"\"\n\n    strict_json_schema: bool = True\n    \"\"\"Whether the JSON schema is in strict mode. We **strongly** recommend setting this to True,\n    as it increases the likelihood of correct JSON input.\"\"\"\n</code></pre>"},{"location":"ref/tool/#cai.sdk.agents.tool.FunctionTool.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the tool, as shown to the LLM. Generally the name of the function.</p>"},{"location":"ref/tool/#cai.sdk.agents.tool.FunctionTool.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre> <p>A description of the tool, as shown to the LLM.</p>"},{"location":"ref/tool/#cai.sdk.agents.tool.FunctionTool.params_json_schema","title":"params_json_schema  <code>instance-attribute</code>","text":"<pre><code>params_json_schema: dict[str, Any]\n</code></pre> <p>The JSON schema for the tool's parameters.</p>"},{"location":"ref/tool/#cai.sdk.agents.tool.FunctionTool.on_invoke_tool","title":"on_invoke_tool  <code>instance-attribute</code>","text":"<pre><code>on_invoke_tool: Callable[\n    [RunContextWrapper[Any], str], Awaitable[Any]\n]\n</code></pre> <p>A function that invokes the tool with the given context and parameters. The params passed are: 1. The tool run context. 2. The arguments from the LLM, as a JSON string.</p> <p>You must return a string representation of the tool output, or something we can call <code>str()</code> on. In case of errors, you can either raise an Exception (which will cause the run to fail) or return a string error message (which will be sent back to the LLM).</p>"},{"location":"ref/tool/#cai.sdk.agents.tool.FunctionTool.strict_json_schema","title":"strict_json_schema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strict_json_schema: bool = True\n</code></pre> <p>Whether the JSON schema is in strict mode. We strongly recommend setting this to True, as it increases the likelihood of correct JSON input.</p>"},{"location":"ref/tool/#cai.sdk.agents.tool.function_tool","title":"function_tool","text":"<pre><code>function_tool(\n    func: ToolFunction[...],\n    *,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    docstring_style: DocstringStyle | None = None,\n    use_docstring_info: bool = True,\n    failure_error_function: ToolErrorFunction | None = None,\n    strict_mode: bool = True,\n) -&gt; FunctionTool\n</code></pre><pre><code>function_tool(\n    *,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    docstring_style: DocstringStyle | None = None,\n    use_docstring_info: bool = True,\n    failure_error_function: ToolErrorFunction | None = None,\n    strict_mode: bool = True,\n) -&gt; Callable[[ToolFunction[...]], FunctionTool]\n</code></pre> <pre><code>function_tool(\n    func: ToolFunction[...] | None = None,\n    *,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    docstring_style: DocstringStyle | None = None,\n    use_docstring_info: bool = True,\n    failure_error_function: ToolErrorFunction\n    | None = default_tool_error_function,\n    strict_mode: bool = True,\n) -&gt; (\n    FunctionTool\n    | Callable[[ToolFunction[...]], FunctionTool]\n)\n</code></pre> <p>Decorator to create a FunctionTool from a function. By default, we will: 1. Parse the function signature to create a JSON schema for the tool's parameters. 2. Use the function's docstring to populate the tool's description. 3. Use the function's docstring to populate argument descriptions. The docstring style is detected automatically, but you can override it.</p> <p>If the function takes a <code>RunContextWrapper</code> as the first argument, it must match the context type of the agent that uses the tool.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>ToolFunction[...] | None</code> <p>The function to wrap.</p> <code>None</code> <code>name_override</code> <code>str | None</code> <p>If provided, use this name for the tool instead of the function's name.</p> <code>None</code> <code>description_override</code> <code>str | None</code> <p>If provided, use this description for the tool instead of the function's docstring.</p> <code>None</code> <code>docstring_style</code> <code>DocstringStyle | None</code> <p>If provided, use this style for the tool's docstring. If not provided, we will attempt to auto-detect the style.</p> <code>None</code> <code>use_docstring_info</code> <code>bool</code> <p>If True, use the function's docstring to populate the tool's description and argument descriptions.</p> <code>True</code> <code>failure_error_function</code> <code>ToolErrorFunction | None</code> <p>If provided, use this function to generate an error message when the tool call fails. The error message is sent to the LLM. If you pass None, then no error message will be sent and instead an Exception will be raised.</p> <code>default_tool_error_function</code> <code>strict_mode</code> <code>bool</code> <p>Whether to enable strict mode for the tool's JSON schema. We strongly recommend setting this to True, as it increases the likelihood of correct JSON input. If False, it allows non-strict JSON schemas. For example, if a parameter has a default value, it will be optional, additional properties are allowed, etc. See here for more: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#supported-schemas</p> <code>True</code> Source code in <code>src/cai/sdk/agents/tool.py</code> <pre><code>def function_tool(\n    func: ToolFunction[...] | None = None,\n    *,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    docstring_style: DocstringStyle | None = None,\n    use_docstring_info: bool = True,\n    failure_error_function: ToolErrorFunction | None = default_tool_error_function,\n    strict_mode: bool = True,\n) -&gt; FunctionTool | Callable[[ToolFunction[...]], FunctionTool]:\n    \"\"\"\n    Decorator to create a FunctionTool from a function. By default, we will:\n    1. Parse the function signature to create a JSON schema for the tool's parameters.\n    2. Use the function's docstring to populate the tool's description.\n    3. Use the function's docstring to populate argument descriptions.\n    The docstring style is detected automatically, but you can override it.\n\n    If the function takes a `RunContextWrapper` as the first argument, it *must* match the\n    context type of the agent that uses the tool.\n\n    Args:\n        func: The function to wrap.\n        name_override: If provided, use this name for the tool instead of the function's name.\n        description_override: If provided, use this description for the tool instead of the\n            function's docstring.\n        docstring_style: If provided, use this style for the tool's docstring. If not provided,\n            we will attempt to auto-detect the style.\n        use_docstring_info: If True, use the function's docstring to populate the tool's\n            description and argument descriptions.\n        failure_error_function: If provided, use this function to generate an error message when\n            the tool call fails. The error message is sent to the LLM. If you pass None, then no\n            error message will be sent and instead an Exception will be raised.\n        strict_mode: Whether to enable strict mode for the tool's JSON schema. We *strongly*\n            recommend setting this to True, as it increases the likelihood of correct JSON input.\n            If False, it allows non-strict JSON schemas. For example, if a parameter has a default\n            value, it will be optional, additional properties are allowed, etc. See here for more:\n            https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#supported-schemas\n    \"\"\"\n\n    def _create_function_tool(the_func: ToolFunction[...]) -&gt; FunctionTool:\n        schema = function_schema(\n            func=the_func,\n            name_override=name_override,\n            description_override=description_override,\n            docstring_style=docstring_style,\n            use_docstring_info=use_docstring_info,\n            strict_json_schema=strict_mode,\n        )\n\n        async def _on_invoke_tool_impl(ctx: RunContextWrapper[Any], input: str) -&gt; Any:\n            try:\n                json_data: dict[str, Any] = json.loads(input) if input else {}\n            except Exception as e:\n                if _debug.DONT_LOG_TOOL_DATA:\n                    logger.debug(f\"Invalid JSON input for tool {schema.name}\")\n                else:\n                    logger.debug(f\"Invalid JSON input for tool {schema.name}: {input}\")\n                raise ModelBehaviorError(\n                    f\"Invalid JSON input for tool {schema.name}: {input}\"\n                ) from e\n\n            if _debug.DONT_LOG_TOOL_DATA:\n                logger.debug(f\"Invoking tool {schema.name}\")\n            else:\n                logger.debug(f\"Invoking tool {schema.name} with input {input}\")\n\n            try:\n                parsed = (\n                    schema.params_pydantic_model(**json_data)\n                    if json_data\n                    else schema.params_pydantic_model()\n                )\n            except ValidationError as e:\n                raise ModelBehaviorError(f\"Invalid JSON input for tool {schema.name}: {e}\") from e\n\n            args, kwargs_dict = schema.to_call_args(parsed)\n\n            if not _debug.DONT_LOG_TOOL_DATA:\n                logger.debug(f\"Tool call args: {args}, kwargs: {kwargs_dict}\")\n\n            if inspect.iscoroutinefunction(the_func):\n                if schema.takes_context:\n                    result = await the_func(ctx, *args, **kwargs_dict)\n                else:\n                    result = await the_func(*args, **kwargs_dict)\n            else:\n                # Run synchronous functions in a thread pool to avoid blocking the event loop\n                import asyncio\n                import functools\n\n                if schema.takes_context:\n                    func_with_args = functools.partial(the_func, ctx, *args, **kwargs_dict)\n                else:\n                    func_with_args = functools.partial(the_func, *args, **kwargs_dict)\n\n                # Run in thread pool executor to prevent blocking\n                loop = asyncio.get_event_loop()\n                result = await loop.run_in_executor(None, func_with_args)\n\n            if _debug.DONT_LOG_TOOL_DATA:\n                logger.debug(f\"Tool {schema.name} completed.\")\n            else:\n                logger.debug(f\"Tool {schema.name} returned {truncate_for_logging(result)}\")\n\n            return result\n\n        async def _on_invoke_tool(ctx: RunContextWrapper[Any], input: str) -&gt; Any:\n            try:\n                return await _on_invoke_tool_impl(ctx, input)\n            except Exception as e:\n                if failure_error_function is None:\n                    raise\n\n                result = failure_error_function(ctx, e)\n                if inspect.isawaitable(result):\n                    return await result\n\n                _error_tracing.attach_error_to_current_span(\n                    SpanError(\n                        message=\"Error running tool (non-fatal)\",\n                        data={\n                            \"tool_name\": schema.name,\n                            \"error\": str(e),\n                        },\n                    )\n                )\n                return result\n\n        return FunctionTool(\n            name=schema.name,\n            description=schema.description or \"\",\n            params_json_schema=schema.params_json_schema,\n            on_invoke_tool=_on_invoke_tool,\n            strict_json_schema=strict_mode,\n        )\n\n    # If func is actually a callable, we were used as @function_tool with no parentheses\n    if callable(func):\n        return _create_function_tool(func)\n\n    # Otherwise, we were used as @function_tool(...), so return a decorator\n    def decorator(real_func: ToolFunction[...]) -&gt; FunctionTool:\n        return _create_function_tool(real_func)\n\n    return decorator\n</code></pre>"},{"location":"ref/usage/","title":"<code>Usage</code>","text":""},{"location":"ref/usage/#cai.sdk.agents.usage.Usage","title":"Usage  <code>dataclass</code>","text":"Source code in <code>src/cai/sdk/agents/usage.py</code> <pre><code>@dataclass\nclass Usage:\n    requests: int = 0\n    \"\"\"Total requests made to the LLM API.\"\"\"\n\n    input_tokens: int = 0\n    \"\"\"Total input tokens sent, across all requests.\"\"\"\n\n    output_tokens: int = 0\n    \"\"\"Total output tokens received, across all requests.\"\"\"\n\n    total_tokens: int = 0\n    \"\"\"Total tokens sent and received, across all requests.\"\"\"\n\n    def add(self, other: \"Usage\") -&gt; None:\n        self.requests += other.requests if other.requests else 0\n        self.input_tokens += other.input_tokens if other.input_tokens else 0\n        self.output_tokens += other.output_tokens if other.output_tokens else 0\n        self.total_tokens += other.total_tokens if other.total_tokens else 0\n</code></pre>"},{"location":"ref/usage/#cai.sdk.agents.usage.Usage.requests","title":"requests  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requests: int = 0\n</code></pre> <p>Total requests made to the LLM API.</p>"},{"location":"ref/usage/#cai.sdk.agents.usage.Usage.input_tokens","title":"input_tokens  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>input_tokens: int = 0\n</code></pre> <p>Total input tokens sent, across all requests.</p>"},{"location":"ref/usage/#cai.sdk.agents.usage.Usage.output_tokens","title":"output_tokens  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_tokens: int = 0\n</code></pre> <p>Total output tokens received, across all requests.</p>"},{"location":"ref/usage/#cai.sdk.agents.usage.Usage.total_tokens","title":"total_tokens  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>total_tokens: int = 0\n</code></pre> <p>Total tokens sent and received, across all requests.</p>"},{"location":"ref/extensions/handoff_filters/","title":"<code>Handoff filters</code>","text":""},{"location":"ref/extensions/handoff_filters/#cai.sdk.agents.extensions.handoff_filters.remove_all_tools","title":"remove_all_tools","text":"<pre><code>remove_all_tools(\n    handoff_input_data: HandoffInputData,\n) -&gt; HandoffInputData\n</code></pre> <p>Filters out all tool items: file search, web search and function calls+output.</p> Source code in <code>src/cai/sdk/agents/extensions/handoff_filters.py</code> <pre><code>def remove_all_tools(handoff_input_data: HandoffInputData) -&gt; HandoffInputData:\n    \"\"\"Filters out all tool items: file search, web search and function calls+output.\"\"\"\n\n    history = handoff_input_data.input_history\n    new_items = handoff_input_data.new_items\n\n    filtered_history = (\n        _remove_tool_types_from_input(history) if isinstance(history, tuple) else history\n    )\n    filtered_pre_handoff_items = _remove_tools_from_items(handoff_input_data.pre_handoff_items)\n    filtered_new_items = _remove_tools_from_items(new_items)\n\n    return HandoffInputData(\n        input_history=filtered_history,\n        pre_handoff_items=filtered_pre_handoff_items,\n        new_items=filtered_new_items,\n    )\n</code></pre>"},{"location":"ref/extensions/handoff_prompt/","title":"<code>Handoff prompt</code>","text":""},{"location":"ref/extensions/handoff_prompt/#cai.sdk.agents.extensions.handoff_prompt.RECOMMENDED_PROMPT_PREFIX","title":"RECOMMENDED_PROMPT_PREFIX  <code>module-attribute</code>","text":"<pre><code>RECOMMENDED_PROMPT_PREFIX = \"# System context\\nYou are part of a multi-agent system called the Agents SDK, designed to make agent coordination and execution easy. Agents uses two primary abstraction: **Agents** and **Handoffs**. An agent encompasses instructions and tools and can hand off a conversation to another agent when appropriate. Handoffs are achieved by calling a handoff function, generally named `transfer_to_&lt;agent_name&gt;`. Transfers between agents are handled seamlessly in the background; do not mention or draw attention to these transfers in your conversation with the user.\\n\"\n</code></pre>"},{"location":"ref/extensions/handoff_prompt/#cai.sdk.agents.extensions.handoff_prompt.prompt_with_handoff_instructions","title":"prompt_with_handoff_instructions","text":"<pre><code>prompt_with_handoff_instructions(prompt: str) -&gt; str\n</code></pre> <p>Add recommended instructions to the prompt for agents that use handoffs.</p> Source code in <code>src/cai/sdk/agents/extensions/handoff_prompt.py</code> <pre><code>def prompt_with_handoff_instructions(prompt: str) -&gt; str:\n    \"\"\"\n    Add recommended instructions to the prompt for agents that use handoffs.\n    \"\"\"\n    return f\"{RECOMMENDED_PROMPT_PREFIX}\\n\\n{prompt}\"\n</code></pre>"},{"location":"ref/mcp/server/","title":"<code>MCP Servers</code>","text":""},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServer","title":"MCPServer","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for Model Context Protocol servers.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>class MCPServer(abc.ABC):\n    \"\"\"Base class for Model Context Protocol servers.\"\"\"\n\n    @abc.abstractmethod\n    async def connect(self):\n        \"\"\"Connect to the server. For example, this might mean spawning a subprocess or\n        opening a network connection. The server is expected to remain connected until\n        `cleanup()` is called.\n        \"\"\"\n        pass\n\n    @property\n    @abc.abstractmethod\n    def name(self) -&gt; str:\n        \"\"\"A readable name for the server.\"\"\"\n        pass\n\n    @abc.abstractmethod\n    async def cleanup(self):\n        \"\"\"Cleanup the server. For example, this might mean closing a subprocess or\n        closing a network connection.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    async def list_tools(self) -&gt; list[MCPTool]:\n        \"\"\"List the tools available on the server.\"\"\"\n        pass\n\n    @abc.abstractmethod\n    async def call_tool(self, tool_name: str, arguments: dict[str, Any] | None) -&gt; CallToolResult:\n        \"\"\"Invoke a tool on the server.\"\"\"\n        pass\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServer.name","title":"name  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>A readable name for the server.</p>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServer.connect","title":"connect  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>connect()\n</code></pre> <p>Connect to the server. For example, this might mean spawning a subprocess or opening a network connection. The server is expected to remain connected until <code>cleanup()</code> is called.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>@abc.abstractmethod\nasync def connect(self):\n    \"\"\"Connect to the server. For example, this might mean spawning a subprocess or\n    opening a network connection. The server is expected to remain connected until\n    `cleanup()` is called.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServer.cleanup","title":"cleanup  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>cleanup()\n</code></pre> <p>Cleanup the server. For example, this might mean closing a subprocess or closing a network connection.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>@abc.abstractmethod\nasync def cleanup(self):\n    \"\"\"Cleanup the server. For example, this might mean closing a subprocess or\n    closing a network connection.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServer.list_tools","title":"list_tools  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>list_tools() -&gt; list[Tool]\n</code></pre> <p>List the tools available on the server.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>@abc.abstractmethod\nasync def list_tools(self) -&gt; list[MCPTool]:\n    \"\"\"List the tools available on the server.\"\"\"\n    pass\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServer.call_tool","title":"call_tool  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>call_tool(\n    tool_name: str, arguments: dict[str, Any] | None\n) -&gt; CallToolResult\n</code></pre> <p>Invoke a tool on the server.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>@abc.abstractmethod\nasync def call_tool(self, tool_name: str, arguments: dict[str, Any] | None) -&gt; CallToolResult:\n    \"\"\"Invoke a tool on the server.\"\"\"\n    pass\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdioParams","title":"MCPServerStdioParams","text":"<p>               Bases: <code>TypedDict</code></p> <p>Mirrors <code>mcp.client.stdio.StdioServerParameters</code>, but lets you pass params without another import.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>class MCPServerStdioParams(TypedDict):\n    \"\"\"Mirrors `mcp.client.stdio.StdioServerParameters`, but lets you pass params without another\n    import.\n    \"\"\"\n\n    command: str\n    \"\"\"The executable to run to start the server. For example, `python` or `node`.\"\"\"\n\n    args: NotRequired[list[str]]\n    \"\"\"Command line args to pass to the `command` executable. For example, `['foo.py']` or\n    `['server.js', '--port', '8080']`.\"\"\"\n\n    env: NotRequired[dict[str, str]]\n    \"\"\"The environment variables to set for the server. .\"\"\"\n\n    cwd: NotRequired[str | Path]\n    \"\"\"The working directory to use when spawning the process.\"\"\"\n\n    encoding: NotRequired[str]\n    \"\"\"The text encoding used when sending/receiving messages to the server. Defaults to `utf-8`.\"\"\"\n\n    encoding_error_handler: NotRequired[Literal[\"strict\", \"ignore\", \"replace\"]]\n    \"\"\"The text encoding error handler. Defaults to `strict`.\n\n    See https://docs.python.org/3/library/codecs.html#codec-base-classes for\n    explanations of possible values.\n    \"\"\"\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdioParams.command","title":"command  <code>instance-attribute</code>","text":"<pre><code>command: str\n</code></pre> <p>The executable to run to start the server. For example, <code>python</code> or <code>node</code>.</p>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdioParams.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args: NotRequired[list[str]]\n</code></pre> <p>Command line args to pass to the <code>command</code> executable. For example, <code>['foo.py']</code> or <code>['server.js', '--port', '8080']</code>.</p>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdioParams.env","title":"env  <code>instance-attribute</code>","text":"<pre><code>env: NotRequired[dict[str, str]]\n</code></pre> <p>The environment variables to set for the server. .</p>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdioParams.cwd","title":"cwd  <code>instance-attribute</code>","text":"<pre><code>cwd: NotRequired[str | Path]\n</code></pre> <p>The working directory to use when spawning the process.</p>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdioParams.encoding","title":"encoding  <code>instance-attribute</code>","text":"<pre><code>encoding: NotRequired[str]\n</code></pre> <p>The text encoding used when sending/receiving messages to the server. Defaults to <code>utf-8</code>.</p>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdioParams.encoding_error_handler","title":"encoding_error_handler  <code>instance-attribute</code>","text":"<pre><code>encoding_error_handler: NotRequired[\n    Literal[\"strict\", \"ignore\", \"replace\"]\n]\n</code></pre> <p>The text encoding error handler. Defaults to <code>strict</code>.</p> <p>See https://docs.python.org/3/library/codecs.html#codec-base-classes for explanations of possible values.</p>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdio","title":"MCPServerStdio","text":"<p>               Bases: <code>_MCPServerWithClientSession</code></p> <p>MCP server implementation that uses the stdio transport. See the [spec] (https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#stdio) for details.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>class MCPServerStdio(_MCPServerWithClientSession):\n    \"\"\"MCP server implementation that uses the stdio transport. See the [spec]\n    (https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#stdio) for\n    details.\n    \"\"\"\n\n    def __init__(\n        self,\n        params: MCPServerStdioParams,\n        cache_tools_list: bool = False,\n        name: str | None = None,\n    ):\n        \"\"\"Create a new MCP server based on the stdio transport.\n\n        Args:\n            params: The params that configure the server. This includes the command to run to\n                start the server, the args to pass to the command, the environment variables to\n                set for the server, the working directory to use when spawning the process, and\n                the text encoding used when sending/receiving messages to the server.\n            cache_tools_list: Whether to cache the tools list. If `True`, the tools list will be\n                cached and only fetched from the server once. If `False`, the tools list will be\n                fetched from the server on each call to `list_tools()`. The cache can be\n                invalidated by calling `invalidate_tools_cache()`. You should set this to `True`\n                if you know the server will not change its tools list, because it can drastically\n                improve latency (by avoiding a round-trip to the server every time).\n            name: A readable name for the server. If not provided, we'll create one from the\n                command.\n        \"\"\"\n        super().__init__(cache_tools_list)\n\n        self.params = StdioServerParameters(\n            command=params[\"command\"],\n            args=params.get(\"args\", []),\n            env=params.get(\"env\"),\n            cwd=params.get(\"cwd\"),\n            encoding=params.get(\"encoding\", \"utf-8\"),\n            encoding_error_handler=params.get(\"encoding_error_handler\", \"strict\"),\n        )\n\n        self._name = name or f\"stdio: {self.params.command}\"\n\n    def create_streams(\n        self,\n    ) -&gt; AbstractAsyncContextManager[\n        tuple[\n            MemoryObjectReceiveStream[JSONRPCMessage | Exception],\n            MemoryObjectSendStream[JSONRPCMessage],\n        ]\n    ]:\n        \"\"\"Create the streams for the server.\"\"\"\n        return stdio_client(self.params)\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"A readable name for the server.\"\"\"\n        return self._name\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdio.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>A readable name for the server.</p>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdio.__init__","title":"__init__","text":"<pre><code>__init__(\n    params: MCPServerStdioParams,\n    cache_tools_list: bool = False,\n    name: str | None = None,\n)\n</code></pre> <p>Create a new MCP server based on the stdio transport.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>MCPServerStdioParams</code> <p>The params that configure the server. This includes the command to run to start the server, the args to pass to the command, the environment variables to set for the server, the working directory to use when spawning the process, and the text encoding used when sending/receiving messages to the server.</p> required <code>cache_tools_list</code> <code>bool</code> <p>Whether to cache the tools list. If <code>True</code>, the tools list will be cached and only fetched from the server once. If <code>False</code>, the tools list will be fetched from the server on each call to <code>list_tools()</code>. The cache can be invalidated by calling <code>invalidate_tools_cache()</code>. You should set this to <code>True</code> if you know the server will not change its tools list, because it can drastically improve latency (by avoiding a round-trip to the server every time).</p> <code>False</code> <code>name</code> <code>str | None</code> <p>A readable name for the server. If not provided, we'll create one from the command.</p> <code>None</code> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>def __init__(\n    self,\n    params: MCPServerStdioParams,\n    cache_tools_list: bool = False,\n    name: str | None = None,\n):\n    \"\"\"Create a new MCP server based on the stdio transport.\n\n    Args:\n        params: The params that configure the server. This includes the command to run to\n            start the server, the args to pass to the command, the environment variables to\n            set for the server, the working directory to use when spawning the process, and\n            the text encoding used when sending/receiving messages to the server.\n        cache_tools_list: Whether to cache the tools list. If `True`, the tools list will be\n            cached and only fetched from the server once. If `False`, the tools list will be\n            fetched from the server on each call to `list_tools()`. The cache can be\n            invalidated by calling `invalidate_tools_cache()`. You should set this to `True`\n            if you know the server will not change its tools list, because it can drastically\n            improve latency (by avoiding a round-trip to the server every time).\n        name: A readable name for the server. If not provided, we'll create one from the\n            command.\n    \"\"\"\n    super().__init__(cache_tools_list)\n\n    self.params = StdioServerParameters(\n        command=params[\"command\"],\n        args=params.get(\"args\", []),\n        env=params.get(\"env\"),\n        cwd=params.get(\"cwd\"),\n        encoding=params.get(\"encoding\", \"utf-8\"),\n        encoding_error_handler=params.get(\"encoding_error_handler\", \"strict\"),\n    )\n\n    self._name = name or f\"stdio: {self.params.command}\"\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdio.create_streams","title":"create_streams","text":"<pre><code>create_streams() -&gt; AbstractAsyncContextManager[\n    tuple[\n        MemoryObjectReceiveStream[\n            JSONRPCMessage | Exception\n        ],\n        MemoryObjectSendStream[JSONRPCMessage],\n    ]\n]\n</code></pre> <p>Create the streams for the server.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>def create_streams(\n    self,\n) -&gt; AbstractAsyncContextManager[\n    tuple[\n        MemoryObjectReceiveStream[JSONRPCMessage | Exception],\n        MemoryObjectSendStream[JSONRPCMessage],\n    ]\n]:\n    \"\"\"Create the streams for the server.\"\"\"\n    return stdio_client(self.params)\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdio.connect","title":"connect  <code>async</code>","text":"<pre><code>connect()\n</code></pre> <p>Connect to the server.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>async def connect(self):\n    \"\"\"Connect to the server.\"\"\"\n    try:\n        transport = await self.exit_stack.enter_async_context(self.create_streams())\n        read, write = transport\n        session = await self.exit_stack.enter_async_context(ClientSession(read, write))\n        await session.initialize()\n        self.session = session\n    except Exception as e:\n        # Only log connection errors at debug level\n        error_str = str(e).lower()\n        error_type = type(e).__name__\n        if (\"connection\" in error_str or \n            \"refused\" in error_str or \n            \"taskgroup\" in error_str or\n            error_type == \"ExceptionGroup\"):\n            logger.debug(f\"Expected connection error during MCP server init: {e}\")\n        else:\n            logger.error(f\"Error initializing MCP server: {e}\")\n        await self.cleanup()\n        raise\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdio.cleanup","title":"cleanup  <code>async</code>","text":"<pre><code>cleanup()\n</code></pre> <p>Cleanup the server.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>async def cleanup(self):\n    \"\"\"Cleanup the server.\"\"\"\n    async with self._cleanup_lock:\n        try:\n            # Suppress async generator warnings during cleanup\n            with warnings.catch_warnings():\n                warnings.filterwarnings(\"ignore\", category=RuntimeWarning, message=\".*asynchronous generator.*\")\n                warnings.filterwarnings(\"ignore\", category=RuntimeWarning, message=\".*was never awaited.*\")\n                await self.exit_stack.aclose()\n                self.session = None\n        except Exception as e:\n            # Only log errors that aren't expected during cleanup\n            if \"ClosedResourceError\" not in str(e) and \"async generator\" not in str(e).lower():\n                logger.debug(f\"Expected cleanup error (can be ignored): {e}\")\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdio.list_tools","title":"list_tools  <code>async</code>","text":"<pre><code>list_tools() -&gt; list[Tool]\n</code></pre> <p>List the tools available on the server.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>async def list_tools(self) -&gt; list[MCPTool]:\n    \"\"\"List the tools available on the server.\"\"\"\n    if not self.session:\n        raise UserError(\"Server not initialized. Make sure you call `connect()` first.\")\n\n    # Return from cache if caching is enabled, we have tools, and the cache is not dirty\n    if self.cache_tools_list and not self._cache_dirty and self._tools_list:\n        return self._tools_list\n\n    # Reset the cache dirty to False\n    self._cache_dirty = False\n\n    # Fetch the tools from the server\n    self._tools_list = (await self.session.list_tools()).tools\n    return self._tools_list\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdio.call_tool","title":"call_tool  <code>async</code>","text":"<pre><code>call_tool(\n    tool_name: str, arguments: dict[str, Any] | None\n) -&gt; CallToolResult\n</code></pre> <p>Invoke a tool on the server.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>async def call_tool(self, tool_name: str, arguments: dict[str, Any] | None) -&gt; CallToolResult:\n    \"\"\"Invoke a tool on the server.\"\"\"\n    if not self.session:\n        raise UserError(\"Server not initialized. Make sure you call `connect()` first.\")\n\n    return await self.session.call_tool(tool_name, arguments)\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerStdio.invalidate_tools_cache","title":"invalidate_tools_cache","text":"<pre><code>invalidate_tools_cache()\n</code></pre> <p>Invalidate the tools cache.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>def invalidate_tools_cache(self):\n    \"\"\"Invalidate the tools cache.\"\"\"\n    self._cache_dirty = True\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerSseParams","title":"MCPServerSseParams","text":"<p>               Bases: <code>TypedDict</code></p> <p>Mirrors the params in<code>mcp.client.sse.sse_client</code>.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>class MCPServerSseParams(TypedDict):\n    \"\"\"Mirrors the params in`mcp.client.sse.sse_client`.\"\"\"\n\n    url: str\n    \"\"\"The URL of the server.\"\"\"\n\n    headers: NotRequired[dict[str, str]]\n    \"\"\"The headers to send to the server.\"\"\"\n\n    timeout: NotRequired[float]\n    \"\"\"The timeout for the HTTP request. Defaults to 5 seconds.\"\"\"\n\n    sse_read_timeout: NotRequired[float]\n    \"\"\"The timeout for the SSE connection, in seconds. Defaults to 5 minutes.\"\"\"\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerSseParams.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url: str\n</code></pre> <p>The URL of the server.</p>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerSseParams.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers: NotRequired[dict[str, str]]\n</code></pre> <p>The headers to send to the server.</p>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerSseParams.timeout","title":"timeout  <code>instance-attribute</code>","text":"<pre><code>timeout: NotRequired[float]\n</code></pre> <p>The timeout for the HTTP request. Defaults to 5 seconds.</p>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerSseParams.sse_read_timeout","title":"sse_read_timeout  <code>instance-attribute</code>","text":"<pre><code>sse_read_timeout: NotRequired[float]\n</code></pre> <p>The timeout for the SSE connection, in seconds. Defaults to 5 minutes.</p>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerSse","title":"MCPServerSse","text":"<p>               Bases: <code>_MCPServerWithClientSession</code></p> <p>MCP server implementation that uses the HTTP with SSE transport. See the [spec] (https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#http-with-sse) for details.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>class MCPServerSse(_MCPServerWithClientSession):\n    \"\"\"MCP server implementation that uses the HTTP with SSE transport. See the [spec]\n    (https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#http-with-sse)\n    for details.\n    \"\"\"\n\n    def __init__(\n        self,\n        params: MCPServerSseParams,\n        cache_tools_list: bool = False,\n        name: str | None = None,\n    ):\n        \"\"\"Create a new MCP server based on the HTTP with SSE transport.\n\n        Args:\n            params: The params that configure the server. This includes the URL of the server,\n                the headers to send to the server, the timeout for the HTTP request, and the\n                timeout for the SSE connection.\n\n            cache_tools_list: Whether to cache the tools list. If `True`, the tools list will be\n                cached and only fetched from the server once. If `False`, the tools list will be\n                fetched from the server on each call to `list_tools()`. The cache can be\n                invalidated by calling `invalidate_tools_cache()`. You should set this to `True`\n                if you know the server will not change its tools list, because it can drastically\n                improve latency (by avoiding a round-trip to the server every time).\n\n            name: A readable name for the server. If not provided, we'll create one from the\n                URL.\n        \"\"\"\n        super().__init__(cache_tools_list)\n\n        self.params = params\n        self._name = name or f\"sse: {self.params['url']}\"\n\n    def create_streams(\n        self,\n    ) -&gt; AbstractAsyncContextManager[\n        tuple[\n            MemoryObjectReceiveStream[JSONRPCMessage | Exception],\n            MemoryObjectSendStream[JSONRPCMessage],\n        ]\n    ]:\n        \"\"\"Create the streams for the server.\"\"\"\n        return sse_client(\n            url=self.params[\"url\"],\n            headers=self.params.get(\"headers\", None),\n            timeout=self.params.get(\"timeout\", 5),\n            sse_read_timeout=self.params.get(\"sse_read_timeout\", 60 * 5),\n        )\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"A readable name for the server.\"\"\"\n        return self._name\n\n    async def cleanup(self):\n        \"\"\"Cleanup the SSE server with special handling for async generators.\"\"\"\n        import warnings\n        import asyncio\n\n        async with self._cleanup_lock:\n            try:\n                # For SSE servers, we need to handle cleanup more carefully\n                with warnings.catch_warnings():\n                    warnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n                    warnings.filterwarnings(\"ignore\", message=\".*asynchronous generator.*\")\n                    warnings.filterwarnings(\"ignore\", message=\".*didn't stop after athrow.*\")\n                    warnings.filterwarnings(\"ignore\", message=\".*cancel scope.*\")\n\n                    # Try to close gracefully with a short timeout\n                    try:\n                        await asyncio.wait_for(self.exit_stack.aclose(), timeout=0.5)\n                    except asyncio.TimeoutError:\n                        # Expected for SSE connections\n                        pass\n                    except Exception:\n                        # Ignore other cleanup errors for SSE\n                        pass\n\n                    self.session = None\n            except Exception:\n                # Silently ignore all cleanup errors for SSE\n                pass\n\n    async def cleanup(self):\n        \"\"\"Cleanup the SSE server with special handling for async generators.\"\"\"\n        async with self._cleanup_lock:\n            try:\n                # For SSE connections, we need to handle cleanup differently\n                # to avoid async generator warnings\n                with warnings.catch_warnings():\n                    warnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n                    warnings.filterwarnings(\"ignore\", message=\".*asynchronous generator.*\")\n                    warnings.filterwarnings(\"ignore\", message=\".*was never awaited.*\")\n\n                    # Try a quick cleanup with a short timeout\n                    try:\n                        await asyncio.wait_for(self.exit_stack.aclose(), timeout=0.5)\n                    except asyncio.TimeoutError:\n                        # Expected for SSE connections\n                        pass\n                    except Exception:\n                        # Ignore any other errors during SSE cleanup\n                        pass\n                    finally:\n                        self.session = None\n            except Exception:\n                # Silently ignore all errors for SSE cleanup\n                pass\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerSse.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>A readable name for the server.</p>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerSse.__init__","title":"__init__","text":"<pre><code>__init__(\n    params: MCPServerSseParams,\n    cache_tools_list: bool = False,\n    name: str | None = None,\n)\n</code></pre> <p>Create a new MCP server based on the HTTP with SSE transport.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>MCPServerSseParams</code> <p>The params that configure the server. This includes the URL of the server, the headers to send to the server, the timeout for the HTTP request, and the timeout for the SSE connection.</p> required <code>cache_tools_list</code> <code>bool</code> <p>Whether to cache the tools list. If <code>True</code>, the tools list will be cached and only fetched from the server once. If <code>False</code>, the tools list will be fetched from the server on each call to <code>list_tools()</code>. The cache can be invalidated by calling <code>invalidate_tools_cache()</code>. You should set this to <code>True</code> if you know the server will not change its tools list, because it can drastically improve latency (by avoiding a round-trip to the server every time).</p> <code>False</code> <code>name</code> <code>str | None</code> <p>A readable name for the server. If not provided, we'll create one from the URL.</p> <code>None</code> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>def __init__(\n    self,\n    params: MCPServerSseParams,\n    cache_tools_list: bool = False,\n    name: str | None = None,\n):\n    \"\"\"Create a new MCP server based on the HTTP with SSE transport.\n\n    Args:\n        params: The params that configure the server. This includes the URL of the server,\n            the headers to send to the server, the timeout for the HTTP request, and the\n            timeout for the SSE connection.\n\n        cache_tools_list: Whether to cache the tools list. If `True`, the tools list will be\n            cached and only fetched from the server once. If `False`, the tools list will be\n            fetched from the server on each call to `list_tools()`. The cache can be\n            invalidated by calling `invalidate_tools_cache()`. You should set this to `True`\n            if you know the server will not change its tools list, because it can drastically\n            improve latency (by avoiding a round-trip to the server every time).\n\n        name: A readable name for the server. If not provided, we'll create one from the\n            URL.\n    \"\"\"\n    super().__init__(cache_tools_list)\n\n    self.params = params\n    self._name = name or f\"sse: {self.params['url']}\"\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerSse.create_streams","title":"create_streams","text":"<pre><code>create_streams() -&gt; AbstractAsyncContextManager[\n    tuple[\n        MemoryObjectReceiveStream[\n            JSONRPCMessage | Exception\n        ],\n        MemoryObjectSendStream[JSONRPCMessage],\n    ]\n]\n</code></pre> <p>Create the streams for the server.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>def create_streams(\n    self,\n) -&gt; AbstractAsyncContextManager[\n    tuple[\n        MemoryObjectReceiveStream[JSONRPCMessage | Exception],\n        MemoryObjectSendStream[JSONRPCMessage],\n    ]\n]:\n    \"\"\"Create the streams for the server.\"\"\"\n    return sse_client(\n        url=self.params[\"url\"],\n        headers=self.params.get(\"headers\", None),\n        timeout=self.params.get(\"timeout\", 5),\n        sse_read_timeout=self.params.get(\"sse_read_timeout\", 60 * 5),\n    )\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerSse.cleanup","title":"cleanup  <code>async</code>","text":"<pre><code>cleanup()\n</code></pre> <p>Cleanup the SSE server with special handling for async generators.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>async def cleanup(self):\n    \"\"\"Cleanup the SSE server with special handling for async generators.\"\"\"\n    async with self._cleanup_lock:\n        try:\n            # For SSE connections, we need to handle cleanup differently\n            # to avoid async generator warnings\n            with warnings.catch_warnings():\n                warnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n                warnings.filterwarnings(\"ignore\", message=\".*asynchronous generator.*\")\n                warnings.filterwarnings(\"ignore\", message=\".*was never awaited.*\")\n\n                # Try a quick cleanup with a short timeout\n                try:\n                    await asyncio.wait_for(self.exit_stack.aclose(), timeout=0.5)\n                except asyncio.TimeoutError:\n                    # Expected for SSE connections\n                    pass\n                except Exception:\n                    # Ignore any other errors during SSE cleanup\n                    pass\n                finally:\n                    self.session = None\n        except Exception:\n            # Silently ignore all errors for SSE cleanup\n            pass\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerSse.connect","title":"connect  <code>async</code>","text":"<pre><code>connect()\n</code></pre> <p>Connect to the server.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>async def connect(self):\n    \"\"\"Connect to the server.\"\"\"\n    try:\n        transport = await self.exit_stack.enter_async_context(self.create_streams())\n        read, write = transport\n        session = await self.exit_stack.enter_async_context(ClientSession(read, write))\n        await session.initialize()\n        self.session = session\n    except Exception as e:\n        # Only log connection errors at debug level\n        error_str = str(e).lower()\n        error_type = type(e).__name__\n        if (\"connection\" in error_str or \n            \"refused\" in error_str or \n            \"taskgroup\" in error_str or\n            error_type == \"ExceptionGroup\"):\n            logger.debug(f\"Expected connection error during MCP server init: {e}\")\n        else:\n            logger.error(f\"Error initializing MCP server: {e}\")\n        await self.cleanup()\n        raise\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerSse.list_tools","title":"list_tools  <code>async</code>","text":"<pre><code>list_tools() -&gt; list[Tool]\n</code></pre> <p>List the tools available on the server.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>async def list_tools(self) -&gt; list[MCPTool]:\n    \"\"\"List the tools available on the server.\"\"\"\n    if not self.session:\n        raise UserError(\"Server not initialized. Make sure you call `connect()` first.\")\n\n    # Return from cache if caching is enabled, we have tools, and the cache is not dirty\n    if self.cache_tools_list and not self._cache_dirty and self._tools_list:\n        return self._tools_list\n\n    # Reset the cache dirty to False\n    self._cache_dirty = False\n\n    # Fetch the tools from the server\n    self._tools_list = (await self.session.list_tools()).tools\n    return self._tools_list\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerSse.call_tool","title":"call_tool  <code>async</code>","text":"<pre><code>call_tool(\n    tool_name: str, arguments: dict[str, Any] | None\n) -&gt; CallToolResult\n</code></pre> <p>Invoke a tool on the server.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>async def call_tool(self, tool_name: str, arguments: dict[str, Any] | None) -&gt; CallToolResult:\n    \"\"\"Invoke a tool on the server.\"\"\"\n    if not self.session:\n        raise UserError(\"Server not initialized. Make sure you call `connect()` first.\")\n\n    return await self.session.call_tool(tool_name, arguments)\n</code></pre>"},{"location":"ref/mcp/server/#cai.sdk.agents.mcp.server.MCPServerSse.invalidate_tools_cache","title":"invalidate_tools_cache","text":"<pre><code>invalidate_tools_cache()\n</code></pre> <p>Invalidate the tools cache.</p> Source code in <code>src/cai/sdk/agents/mcp/server.py</code> <pre><code>def invalidate_tools_cache(self):\n    \"\"\"Invalidate the tools cache.\"\"\"\n    self._cache_dirty = True\n</code></pre>"},{"location":"ref/mcp/util/","title":"<code>MCP Util</code>","text":""},{"location":"ref/mcp/util/#cai.sdk.agents.mcp.util.MCPUtil","title":"MCPUtil","text":"<p>Set of utilities for interop between MCP and CAI tools.</p> Source code in <code>src/cai/sdk/agents/mcp/util.py</code> <pre><code>class MCPUtil:\n    \"\"\"Set of utilities for interop between MCP and CAI tools.\"\"\"\n\n    @classmethod\n    async def get_all_function_tools(cls, servers: list[\"MCPServer\"]) -&gt; list[Tool]:\n        \"\"\"Get all function tools from a list of MCP servers.\"\"\"\n        tools = []\n        tool_names: set[str] = set()\n        for server in servers:\n            server_tools = await cls.get_function_tools(server)\n            server_tool_names = {tool.name for tool in server_tools}\n            if len(server_tool_names &amp; tool_names) &gt; 0:\n                raise UserError(\n                    f\"Duplicate tool names found across MCP servers: \"\n                    f\"{server_tool_names &amp; tool_names}\"\n                )\n            tool_names.update(server_tool_names)\n            tools.extend(server_tools)\n\n        return tools\n\n    @classmethod\n    async def get_function_tools(cls, server: \"MCPServer\") -&gt; list[Tool]:\n        \"\"\"Get all function tools from a single MCP server.\"\"\"\n\n        with mcp_tools_span(server=server.name) as span:\n            tools = await server.list_tools()\n            span.span_data.result = [tool.name for tool in tools]\n\n        return [cls.to_function_tool(tool, server) for tool in tools]\n\n    @classmethod\n    def to_function_tool(cls, tool: \"MCPTool\", server: \"MCPServer\") -&gt; FunctionTool:\n        \"\"\"Convert an MCP tool to an CAI function tool.\"\"\"\n        invoke_func = functools.partial(cls.invoke_mcp_tool, server, tool)\n        return FunctionTool(\n            name=tool.name,\n            description=tool.description or \"\",\n            params_json_schema=tool.inputSchema,\n            on_invoke_tool=invoke_func,\n            strict_json_schema=False,\n        )\n\n    @classmethod\n    async def invoke_mcp_tool(\n        cls, server: \"MCPServer\", tool: \"MCPTool\", context: RunContextWrapper[Any], input_json: str\n    ) -&gt; str:\n        \"\"\"Invoke an MCP tool and return the result as a string.\"\"\"\n        try:\n            json_data: dict[str, Any] = json.loads(input_json) if input_json else {}\n        except Exception as e:\n            if _debug.DONT_LOG_TOOL_DATA:\n                logger.debug(f\"Invalid JSON input for tool {tool.name}\")\n            else:\n                logger.debug(f\"Invalid JSON input for tool {tool.name}: {input_json}\")\n            raise ModelBehaviorError(\n                f\"Invalid JSON input for tool {tool.name}: {input_json}\"\n            ) from e\n\n        if _debug.DONT_LOG_TOOL_DATA:\n            logger.debug(f\"Invoking MCP tool {tool.name}\")\n        else:\n            logger.debug(f\"Invoking MCP tool {tool.name} with input {input_json}\")\n\n        try:\n            # Check if server session is still valid\n            if not hasattr(server, 'session') or server.session is None:\n                logger.warning(f\"MCP server session not found for tool {tool.name}, attempting to reconnect...\")\n                # Try to reconnect\n                try:\n                    await server.connect()\n                    logger.info(f\"Successfully reconnected to MCP server for tool {tool.name}\")\n                except Exception as reconnect_error:\n                    logger.error(f\"Failed to reconnect to MCP server: {reconnect_error}\")\n                    raise AgentsException(\n                        f\"MCP server connection lost for tool {tool.name}. \"\n                        f\"Please remove and re-add the MCP server. \"\n                        f\"Reconnection error: {str(reconnect_error)}\"\n                    ) from reconnect_error\n\n            # Now try to call the tool\n            result = await server.call_tool(tool.name, json_data)\n\n        except AttributeError as ae:\n            # This often happens when the server object is not properly initialized\n            logger.error(f\"MCP server not properly initialized for tool {tool.name}: {ae}\")\n            logger.error(f\"Server type: {type(server)}, has session: {hasattr(server, 'session')}\")\n            raise AgentsException(\n                f\"MCP server not properly initialized for tool {tool.name}. \"\n                f\"The server connection may have been lost. \"\n                f\"AttributeError: {str(ae)}\\n\"\n                f\"Try: /mcp remove &lt;server_name&gt; then /mcp load ... to reconnect.\"\n            ) from ae\n        except Exception as e:\n            # Log the full exception details\n            logger.error(f\"Error invoking MCP tool {tool.name}: {type(e).__name__}: {str(e)}\")\n            logger.error(f\"Full exception details: {repr(e)}\")\n\n            # Check if it's a ClosedResourceError or connection issue\n            error_type = type(e).__name__\n            error_str = str(e).lower()\n\n            # Also check for ExceptionGroup which wraps SSE errors\n            if (error_type in (\"ClosedResourceError\", \"ExceptionGroup\") or \n                \"closedresourceerror\" in error_str or\n                \"taskgroup\" in error_str):\n                # Connection was closed, attempt to reconnect\n                logger.debug(f\"MCP connection issue for tool {tool.name}, attempting to reconnect...\")\n                try:\n                    # Suppress warnings during reconnection\n                    import warnings\n                    with warnings.catch_warnings():\n                        warnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n                        # Force reconnection\n                        server.session = None  # Clear the old session\n                        await server.connect()\n                        logger.debug(f\"Successfully reconnected to MCP server for tool {tool.name}\")\n                        # Retry the tool call\n                        result = await server.call_tool(tool.name, json_data)\n                        return await cls._format_tool_result(result, tool, server)\n                except Exception as reconnect_error:\n                    logger.debug(f\"Failed to reconnect: {reconnect_error}\")\n                    raise AgentsException(\n                        f\"MCP server connection was closed and reconnection failed for tool {tool.name}. \"\n                        f\"Please use '/mcp remove {server.name}' and '/mcp load ...' to reload the server.\"\n                    ) from reconnect_error\n            elif \"session\" in error_str or \"connection\" in error_str or \"closed\" in error_str:\n                raise AgentsException(\n                    f\"MCP server connection error for tool {tool.name}. \"\n                    f\"Error: {type(e).__name__}: {str(e)}\\n\"\n                    f\"Use '/mcp status' to check server health and '/mcp remove' + '/mcp load' to reconnect.\"\n                ) from e\n            else:\n                # For other errors, include the full error details\n                raise AgentsException(\n                    f\"Error invoking MCP tool {tool.name}: {type(e).__name__}: {str(e)}\"\n                ) from e\n\n        # Log and format the result\n        return await cls._format_tool_result(result, tool, server)\n\n    @classmethod\n    async def _format_tool_result(cls, result, tool: \"MCPTool\", server: \"MCPServer\") -&gt; str:\n        \"\"\"Format the MCP tool result into a string.\"\"\"\n        if _debug.DONT_LOG_TOOL_DATA:\n            logger.debug(f\"MCP tool {tool.name} completed.\")\n        else:\n            logger.debug(f\"MCP tool {tool.name} returned {result}\")\n\n        # The MCP tool result is a list of content items, whereas OpenAI tool outputs are a single\n        # string. We'll try to convert.\n        if len(result.content) == 1:\n            tool_output = result.content[0].model_dump_json()\n        elif len(result.content) &gt; 1:\n            tool_output = json.dumps([item.model_dump() for item in result.content])\n        else:\n            logger.error(f\"Errored MCP tool result: {result}\")\n            tool_output = \"Error running tool.\"\n\n        current_span = get_current_span()\n        if current_span:\n            if isinstance(current_span.span_data, FunctionSpanData):\n                current_span.span_data.output = tool_output\n                current_span.span_data.mcp_data = {\n                    \"server\": server.name,\n                }\n            else:\n                logger.warning(\n                    f\"Current span is not a FunctionSpanData, skipping tool output: {current_span}\"\n                )\n\n        return tool_output\n</code></pre>"},{"location":"ref/mcp/util/#cai.sdk.agents.mcp.util.MCPUtil.get_all_function_tools","title":"get_all_function_tools  <code>async</code> <code>classmethod</code>","text":"<pre><code>get_all_function_tools(\n    servers: list[MCPServer],\n) -&gt; list[Tool]\n</code></pre> <p>Get all function tools from a list of MCP servers.</p> Source code in <code>src/cai/sdk/agents/mcp/util.py</code> <pre><code>@classmethod\nasync def get_all_function_tools(cls, servers: list[\"MCPServer\"]) -&gt; list[Tool]:\n    \"\"\"Get all function tools from a list of MCP servers.\"\"\"\n    tools = []\n    tool_names: set[str] = set()\n    for server in servers:\n        server_tools = await cls.get_function_tools(server)\n        server_tool_names = {tool.name for tool in server_tools}\n        if len(server_tool_names &amp; tool_names) &gt; 0:\n            raise UserError(\n                f\"Duplicate tool names found across MCP servers: \"\n                f\"{server_tool_names &amp; tool_names}\"\n            )\n        tool_names.update(server_tool_names)\n        tools.extend(server_tools)\n\n    return tools\n</code></pre>"},{"location":"ref/mcp/util/#cai.sdk.agents.mcp.util.MCPUtil.get_function_tools","title":"get_function_tools  <code>async</code> <code>classmethod</code>","text":"<pre><code>get_function_tools(server: MCPServer) -&gt; list[Tool]\n</code></pre> <p>Get all function tools from a single MCP server.</p> Source code in <code>src/cai/sdk/agents/mcp/util.py</code> <pre><code>@classmethod\nasync def get_function_tools(cls, server: \"MCPServer\") -&gt; list[Tool]:\n    \"\"\"Get all function tools from a single MCP server.\"\"\"\n\n    with mcp_tools_span(server=server.name) as span:\n        tools = await server.list_tools()\n        span.span_data.result = [tool.name for tool in tools]\n\n    return [cls.to_function_tool(tool, server) for tool in tools]\n</code></pre>"},{"location":"ref/mcp/util/#cai.sdk.agents.mcp.util.MCPUtil.to_function_tool","title":"to_function_tool  <code>classmethod</code>","text":"<pre><code>to_function_tool(\n    tool: Tool, server: MCPServer\n) -&gt; FunctionTool\n</code></pre> <p>Convert an MCP tool to an CAI function tool.</p> Source code in <code>src/cai/sdk/agents/mcp/util.py</code> <pre><code>@classmethod\ndef to_function_tool(cls, tool: \"MCPTool\", server: \"MCPServer\") -&gt; FunctionTool:\n    \"\"\"Convert an MCP tool to an CAI function tool.\"\"\"\n    invoke_func = functools.partial(cls.invoke_mcp_tool, server, tool)\n    return FunctionTool(\n        name=tool.name,\n        description=tool.description or \"\",\n        params_json_schema=tool.inputSchema,\n        on_invoke_tool=invoke_func,\n        strict_json_schema=False,\n    )\n</code></pre>"},{"location":"ref/mcp/util/#cai.sdk.agents.mcp.util.MCPUtil.invoke_mcp_tool","title":"invoke_mcp_tool  <code>async</code> <code>classmethod</code>","text":"<pre><code>invoke_mcp_tool(\n    server: MCPServer,\n    tool: Tool,\n    context: RunContextWrapper[Any],\n    input_json: str,\n) -&gt; str\n</code></pre> <p>Invoke an MCP tool and return the result as a string.</p> Source code in <code>src/cai/sdk/agents/mcp/util.py</code> <pre><code>@classmethod\nasync def invoke_mcp_tool(\n    cls, server: \"MCPServer\", tool: \"MCPTool\", context: RunContextWrapper[Any], input_json: str\n) -&gt; str:\n    \"\"\"Invoke an MCP tool and return the result as a string.\"\"\"\n    try:\n        json_data: dict[str, Any] = json.loads(input_json) if input_json else {}\n    except Exception as e:\n        if _debug.DONT_LOG_TOOL_DATA:\n            logger.debug(f\"Invalid JSON input for tool {tool.name}\")\n        else:\n            logger.debug(f\"Invalid JSON input for tool {tool.name}: {input_json}\")\n        raise ModelBehaviorError(\n            f\"Invalid JSON input for tool {tool.name}: {input_json}\"\n        ) from e\n\n    if _debug.DONT_LOG_TOOL_DATA:\n        logger.debug(f\"Invoking MCP tool {tool.name}\")\n    else:\n        logger.debug(f\"Invoking MCP tool {tool.name} with input {input_json}\")\n\n    try:\n        # Check if server session is still valid\n        if not hasattr(server, 'session') or server.session is None:\n            logger.warning(f\"MCP server session not found for tool {tool.name}, attempting to reconnect...\")\n            # Try to reconnect\n            try:\n                await server.connect()\n                logger.info(f\"Successfully reconnected to MCP server for tool {tool.name}\")\n            except Exception as reconnect_error:\n                logger.error(f\"Failed to reconnect to MCP server: {reconnect_error}\")\n                raise AgentsException(\n                    f\"MCP server connection lost for tool {tool.name}. \"\n                    f\"Please remove and re-add the MCP server. \"\n                    f\"Reconnection error: {str(reconnect_error)}\"\n                ) from reconnect_error\n\n        # Now try to call the tool\n        result = await server.call_tool(tool.name, json_data)\n\n    except AttributeError as ae:\n        # This often happens when the server object is not properly initialized\n        logger.error(f\"MCP server not properly initialized for tool {tool.name}: {ae}\")\n        logger.error(f\"Server type: {type(server)}, has session: {hasattr(server, 'session')}\")\n        raise AgentsException(\n            f\"MCP server not properly initialized for tool {tool.name}. \"\n            f\"The server connection may have been lost. \"\n            f\"AttributeError: {str(ae)}\\n\"\n            f\"Try: /mcp remove &lt;server_name&gt; then /mcp load ... to reconnect.\"\n        ) from ae\n    except Exception as e:\n        # Log the full exception details\n        logger.error(f\"Error invoking MCP tool {tool.name}: {type(e).__name__}: {str(e)}\")\n        logger.error(f\"Full exception details: {repr(e)}\")\n\n        # Check if it's a ClosedResourceError or connection issue\n        error_type = type(e).__name__\n        error_str = str(e).lower()\n\n        # Also check for ExceptionGroup which wraps SSE errors\n        if (error_type in (\"ClosedResourceError\", \"ExceptionGroup\") or \n            \"closedresourceerror\" in error_str or\n            \"taskgroup\" in error_str):\n            # Connection was closed, attempt to reconnect\n            logger.debug(f\"MCP connection issue for tool {tool.name}, attempting to reconnect...\")\n            try:\n                # Suppress warnings during reconnection\n                import warnings\n                with warnings.catch_warnings():\n                    warnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n                    # Force reconnection\n                    server.session = None  # Clear the old session\n                    await server.connect()\n                    logger.debug(f\"Successfully reconnected to MCP server for tool {tool.name}\")\n                    # Retry the tool call\n                    result = await server.call_tool(tool.name, json_data)\n                    return await cls._format_tool_result(result, tool, server)\n            except Exception as reconnect_error:\n                logger.debug(f\"Failed to reconnect: {reconnect_error}\")\n                raise AgentsException(\n                    f\"MCP server connection was closed and reconnection failed for tool {tool.name}. \"\n                    f\"Please use '/mcp remove {server.name}' and '/mcp load ...' to reload the server.\"\n                ) from reconnect_error\n        elif \"session\" in error_str or \"connection\" in error_str or \"closed\" in error_str:\n            raise AgentsException(\n                f\"MCP server connection error for tool {tool.name}. \"\n                f\"Error: {type(e).__name__}: {str(e)}\\n\"\n                f\"Use '/mcp status' to check server health and '/mcp remove' + '/mcp load' to reconnect.\"\n            ) from e\n        else:\n            # For other errors, include the full error details\n            raise AgentsException(\n                f\"Error invoking MCP tool {tool.name}: {type(e).__name__}: {str(e)}\"\n            ) from e\n\n    # Log and format the result\n    return await cls._format_tool_result(result, tool, server)\n</code></pre>"},{"location":"ref/models/interface/","title":"<code>Model interface</code>","text":""},{"location":"ref/models/interface/#cai.sdk.agents.models.interface.ModelTracing","title":"ModelTracing","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>src/cai/sdk/agents/models/interface.py</code> <pre><code>class ModelTracing(enum.Enum):\n    DISABLED = 0\n    \"\"\"Tracing is disabled entirely.\"\"\"\n\n    ENABLED = 1\n    \"\"\"Tracing is enabled, and all data is included.\"\"\"\n\n    ENABLED_WITHOUT_DATA = 2\n    \"\"\"Tracing is enabled, but inputs/outputs are not included.\"\"\"\n\n    def is_disabled(self) -&gt; bool:\n        return self == ModelTracing.DISABLED\n\n    def include_data(self) -&gt; bool:\n        return self == ModelTracing.ENABLED\n</code></pre>"},{"location":"ref/models/interface/#cai.sdk.agents.models.interface.ModelTracing.DISABLED","title":"DISABLED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DISABLED = 0\n</code></pre> <p>Tracing is disabled entirely.</p>"},{"location":"ref/models/interface/#cai.sdk.agents.models.interface.ModelTracing.ENABLED","title":"ENABLED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ENABLED = 1\n</code></pre> <p>Tracing is enabled, and all data is included.</p>"},{"location":"ref/models/interface/#cai.sdk.agents.models.interface.ModelTracing.ENABLED_WITHOUT_DATA","title":"ENABLED_WITHOUT_DATA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ENABLED_WITHOUT_DATA = 2\n</code></pre> <p>Tracing is enabled, but inputs/outputs are not included.</p>"},{"location":"ref/models/interface/#cai.sdk.agents.models.interface.Model","title":"Model","text":"<p>               Bases: <code>ABC</code></p> <p>The base interface for calling an LLM.</p> Source code in <code>src/cai/sdk/agents/models/interface.py</code> <pre><code>class Model(abc.ABC):\n    \"\"\"The base interface for calling an LLM.\"\"\"\n\n    @abc.abstractmethod\n    async def get_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        tracing: ModelTracing,\n    ) -&gt; ModelResponse:\n        \"\"\"Get a response from the model.\n\n        Args:\n            system_instructions: The system instructions to use.\n            input: The input items to the model, in OpenAI Responses format.\n            model_settings: The model settings to use.\n            tools: The tools available to the model.\n            output_schema: The output schema to use.\n            handoffs: The handoffs available to the model.\n            tracing: Tracing configuration.\n\n        Returns:\n            The full model response.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def stream_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        tracing: ModelTracing,\n    ) -&gt; AsyncIterator[TResponseStreamEvent]:\n        \"\"\"Stream a response from the model.\n\n        Args:\n            system_instructions: The system instructions to use.\n            input: The input items to the model, in OpenAI Responses format.\n            model_settings: The model settings to use.\n            tools: The tools available to the model.\n            output_schema: The output schema to use.\n            handoffs: The handoffs available to the model.\n            tracing: Tracing configuration.\n\n        Returns:\n            An iterator of response stream events, in OpenAI Responses format.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"ref/models/interface/#cai.sdk.agents.models.interface.Model.get_response","title":"get_response  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>get_response(\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; ModelResponse\n</code></pre> <p>Get a response from the model.</p> <p>Parameters:</p> Name Type Description Default <code>system_instructions</code> <code>str | None</code> <p>The system instructions to use.</p> required <code>input</code> <code>str | list[TResponseInputItem]</code> <p>The input items to the model, in OpenAI Responses format.</p> required <code>model_settings</code> <code>ModelSettings</code> <p>The model settings to use.</p> required <code>tools</code> <code>list[Tool]</code> <p>The tools available to the model.</p> required <code>output_schema</code> <code>AgentOutputSchema | None</code> <p>The output schema to use.</p> required <code>handoffs</code> <code>list[Handoff]</code> <p>The handoffs available to the model.</p> required <code>tracing</code> <code>ModelTracing</code> <p>Tracing configuration.</p> required <p>Returns:</p> Type Description <code>ModelResponse</code> <p>The full model response.</p> Source code in <code>src/cai/sdk/agents/models/interface.py</code> <pre><code>@abc.abstractmethod\nasync def get_response(\n    self,\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; ModelResponse:\n    \"\"\"Get a response from the model.\n\n    Args:\n        system_instructions: The system instructions to use.\n        input: The input items to the model, in OpenAI Responses format.\n        model_settings: The model settings to use.\n        tools: The tools available to the model.\n        output_schema: The output schema to use.\n        handoffs: The handoffs available to the model.\n        tracing: Tracing configuration.\n\n    Returns:\n        The full model response.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/models/interface/#cai.sdk.agents.models.interface.Model.stream_response","title":"stream_response  <code>abstractmethod</code>","text":"<pre><code>stream_response(\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; AsyncIterator[TResponseStreamEvent]\n</code></pre> <p>Stream a response from the model.</p> <p>Parameters:</p> Name Type Description Default <code>system_instructions</code> <code>str | None</code> <p>The system instructions to use.</p> required <code>input</code> <code>str | list[TResponseInputItem]</code> <p>The input items to the model, in OpenAI Responses format.</p> required <code>model_settings</code> <code>ModelSettings</code> <p>The model settings to use.</p> required <code>tools</code> <code>list[Tool]</code> <p>The tools available to the model.</p> required <code>output_schema</code> <code>AgentOutputSchema | None</code> <p>The output schema to use.</p> required <code>handoffs</code> <code>list[Handoff]</code> <p>The handoffs available to the model.</p> required <code>tracing</code> <code>ModelTracing</code> <p>Tracing configuration.</p> required <p>Returns:</p> Type Description <code>AsyncIterator[TResponseStreamEvent]</code> <p>An iterator of response stream events, in OpenAI Responses format.</p> Source code in <code>src/cai/sdk/agents/models/interface.py</code> <pre><code>@abc.abstractmethod\ndef stream_response(\n    self,\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; AsyncIterator[TResponseStreamEvent]:\n    \"\"\"Stream a response from the model.\n\n    Args:\n        system_instructions: The system instructions to use.\n        input: The input items to the model, in OpenAI Responses format.\n        model_settings: The model settings to use.\n        tools: The tools available to the model.\n        output_schema: The output schema to use.\n        handoffs: The handoffs available to the model.\n        tracing: Tracing configuration.\n\n    Returns:\n        An iterator of response stream events, in OpenAI Responses format.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/models/interface/#cai.sdk.agents.models.interface.ModelProvider","title":"ModelProvider","text":"<p>               Bases: <code>ABC</code></p> <p>The base interface for a model provider.</p> <p>Model provider is responsible for looking up Models by name.</p> Source code in <code>src/cai/sdk/agents/models/interface.py</code> <pre><code>class ModelProvider(abc.ABC):\n    \"\"\"The base interface for a model provider.\n\n    Model provider is responsible for looking up Models by name.\n    \"\"\"\n\n    @abc.abstractmethod\n    def get_model(self, model_name: str | None) -&gt; Model:\n        \"\"\"Get a model by name.\n\n        Args:\n            model_name: The name of the model to get.\n\n        Returns:\n            The model.\n        \"\"\"\n</code></pre>"},{"location":"ref/models/interface/#cai.sdk.agents.models.interface.ModelProvider.get_model","title":"get_model  <code>abstractmethod</code>","text":"<pre><code>get_model(model_name: str | None) -&gt; Model\n</code></pre> <p>Get a model by name.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str | None</code> <p>The name of the model to get.</p> required <p>Returns:</p> Type Description <code>Model</code> <p>The model.</p> Source code in <code>src/cai/sdk/agents/models/interface.py</code> <pre><code>@abc.abstractmethod\ndef get_model(self, model_name: str | None) -&gt; Model:\n    \"\"\"Get a model by name.\n\n    Args:\n        model_name: The name of the model to get.\n\n    Returns:\n        The model.\n    \"\"\"\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/","title":"<code>OpenAI Chat Completions model</code>","text":""},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.InputTokensDetails","title":"InputTokensDetails","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>class InputTokensDetails(BaseModel):\n    prompt_tokens: int\n    \"\"\"The number of prompt tokens.\"\"\"\n    cached_tokens: int = 0\n    \"\"\"The number of cached tokens.\"\"\"\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.InputTokensDetails.prompt_tokens","title":"prompt_tokens  <code>instance-attribute</code>","text":"<pre><code>prompt_tokens: int\n</code></pre> <p>The number of prompt tokens.</p>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.InputTokensDetails.cached_tokens","title":"cached_tokens  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cached_tokens: int = 0\n</code></pre> <p>The number of cached tokens.</p>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.CustomResponseUsage","title":"CustomResponseUsage","text":"<p>               Bases: <code>ResponseUsage</code></p> <p>Custom ResponseUsage class that provides compatibility between different field naming conventions. Works with both input_tokens/output_tokens and prompt_tokens/completion_tokens.</p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>class CustomResponseUsage(ResponseUsage):\n    \"\"\"\n    Custom ResponseUsage class that provides compatibility between different field naming conventions.\n    Works with both input_tokens/output_tokens and prompt_tokens/completion_tokens.\n    \"\"\"\n\n    @property\n    def prompt_tokens(self) -&gt; int:\n        \"\"\"Alias for input_tokens to maintain compatibility\"\"\"\n        return self.input_tokens\n\n    @property\n    def completion_tokens(self) -&gt; int:\n        \"\"\"Alias for output_tokens to maintain compatibility\"\"\"\n        return self.output_tokens\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.CustomResponseUsage.prompt_tokens","title":"prompt_tokens  <code>property</code>","text":"<pre><code>prompt_tokens: int\n</code></pre> <p>Alias for input_tokens to maintain compatibility</p>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.CustomResponseUsage.completion_tokens","title":"completion_tokens  <code>property</code>","text":"<pre><code>completion_tokens: int\n</code></pre> <p>Alias for output_tokens to maintain compatibility</p>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.OpenAIChatCompletionsModel","title":"OpenAIChatCompletionsModel","text":"<p>               Bases: <code>Model</code></p> <p>OpenAI Chat Completions Model</p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>class OpenAIChatCompletionsModel(Model):\n    \"\"\"OpenAI Chat Completions Model\"\"\"\n\n    INTERMEDIATE_LOG_INTERVAL = 5\n\n    def __init__(\n        self,\n        model: str | ChatModel,\n        openai_client: AsyncOpenAI,\n        agent_name: str = \"CTF agent\",  # Default to CTF agent instead of generic \"Agent\"\n        agent_id: str | None = None,\n        agent_type: str | None = None,  # The type of agent (e.g., \"red_teamer\")\n    ) -&gt; None:\n        self.model = model\n        self._client = openai_client\n        # Check if we're using OLLAMA models\n        self.is_ollama = os.getenv(\"OLLAMA\") is not None and os.getenv(\"OLLAMA\").lower() != \"false\"\n        self.empty_content_error_shown = False\n\n        # Track interaction counter and token totals for cli display\n        self.interaction_counter = 0\n        self.total_input_tokens = 0\n        self.total_output_tokens = 0\n        self.total_reasoning_tokens = 0\n        self.total_cost = 0.0\n        self.agent_name = agent_name\n        self.agent_type = agent_type or agent_name.lower().replace(\" \", \"_\")  # For registry tracking\n        self.uses_unified_context = False  # Flag to indicate if using shared message history\n\n        # For SimpleAgentManager, we don't auto-register\n        # The agent will be registered when explicitly created by cli.py\n        self.agent_id = agent_id or AGENT_MANAGER.get_agent_id()\n        self._display_name = self.agent_name\n\n        # Instance-based message history\n        # Check if we have an isolated history for this agent (parallel mode)\n        if agent_id and PARALLEL_ISOLATION.is_parallel_mode():\n            isolated_history = PARALLEL_ISOLATION.get_isolated_history(agent_id)\n            if isolated_history is not None:\n                self.message_history = isolated_history\n            else:\n                self.message_history = []\n        else:\n            # Get or create history from AGENT_MANAGER to ensure we share the same list reference\n            # This is critical for proper history clearing to work\n            existing_history = AGENT_MANAGER.get_message_history(self.agent_name)\n            if existing_history is not None and isinstance(existing_history, list):\n                # Use the existing list reference from AGENT_MANAGER\n                self.message_history = existing_history\n            else:\n                # Create new history and ensure AGENT_MANAGER has it too\n                self.message_history = []\n                if self.agent_name not in AGENT_MANAGER._message_history:\n                    AGENT_MANAGER._message_history[self.agent_name] = self.message_history\n\n        # NOTE: Models should NOT register themselves with AGENT_MANAGER\n        # The agent that owns this model will handle registration\n        # This prevents duplicate registrations with agent keys\n\n        # CRITICAL: Ensure AGENT_MANAGER uses the same list reference as the model\n        # This is necessary for proper history clearing to work\n        if agent_id is not None and not PARALLEL_ISOLATION.is_parallel_mode():\n            if self.agent_name in AGENT_MANAGER._message_history:\n                # Share the same list reference\n                self.message_history = AGENT_MANAGER._message_history[self.agent_name]\n\n        # Instance-based converter\n        self._converter = _Converter()\n\n        # Flags for CLI integration\n        self.disable_rich_streaming = False  # Prevents creating a rich panel in the model\n        self.suppress_final_output = False  # Prevents duplicate output at end of streaming\n\n        # Initialize the session logger\n        self.logger = get_session_recorder()\n\n        # DEPRECATED: Still maintain backward compatibility with ACTIVE_MODEL_INSTANCES\n        # TODO: Remove this after updating all dependent code\n        ACTIVE_MODEL_INSTANCES[(self._display_name, self.agent_id)] = weakref.ref(self)\n\n    def get_full_display_name(self) -&gt; str:\n        \"\"\"Get the full display name including ID.\"\"\"\n        return f\"{self._display_name} [{self.agent_id}]\"\n\n    def __del__(self):\n        \"\"\"Clean up when the model instance is destroyed.\"\"\"\n        try:\n            # DEPRECATED: Remove from old registry for backward compatibility\n            if hasattr(self, '_display_name') and hasattr(self, 'agent_id'):\n                key = (self._display_name, self.agent_id)\n                if key in ACTIVE_MODEL_INSTANCES:\n                    del ACTIVE_MODEL_INSTANCES[key]\n\n            # SimpleAgentManager handles history persistence\n            # No need to save to PERSISTENT_MESSAGE_HISTORIES\n\n        except Exception:\n            # Ignore any errors during cleanup\n            pass\n\n    def add_to_message_history(self, msg):\n        \"\"\"Add a message to this instance's history if it's not a duplicate.\n\n        Now only adds to the instance's local history, no global registry.\n        \"\"\"\n        is_duplicate = False\n\n        if self.message_history:\n            if msg.get(\"role\") in [\"system\", \"user\"]:\n                is_duplicate = any(\n                    existing.get(\"role\") == msg.get(\"role\")\n                    and existing.get(\"content\") == msg.get(\"content\")\n                    for existing in self.message_history\n                )\n            elif msg.get(\"role\") == \"assistant\" and msg.get(\"tool_calls\"):\n                # For tool calls, remove any existing message with the same tool call ID\n                # This handles the case where streaming might create duplicate entries\n                tool_call_id = msg[\"tool_calls\"][0].get(\"id\")\n                # Remove duplicates in-place to preserve list reference (important for swarm patterns)\n                indices_to_remove = []\n                for i, existing in enumerate(self.message_history):\n                    if (existing.get(\"role\") == \"assistant\"\n                        and existing.get(\"tool_calls\")\n                        and existing[\"tool_calls\"][0].get(\"id\") == tool_call_id):\n                        indices_to_remove.append(i)\n                # Remove in reverse order to avoid index shifting\n                for i in reversed(indices_to_remove):\n                    self.message_history.pop(i)\n                is_duplicate = False  # Always add after removing duplicates\n            elif msg.get(\"role\") == \"tool\":\n                is_duplicate = any(\n                    existing.get(\"role\") == \"tool\"\n                    and existing.get(\"tool_call_id\") == msg.get(\"tool_call_id\")\n                    for existing in self.message_history\n                )\n\n        if not is_duplicate:\n            self.message_history.append(msg)\n            # Also update SimpleAgentManager ONLY if they're not the same list reference\n            # This avoids double-adding when they share the same list\n            manager_history = AGENT_MANAGER.get_message_history(self.agent_name)\n            if manager_history is not self.message_history:\n                AGENT_MANAGER.add_to_history(self.agent_name, msg)\n            # Update isolated history if in parallel mode\n            if PARALLEL_ISOLATION.is_parallel_mode() and self.agent_id:\n                PARALLEL_ISOLATION.update_isolated_history(self.agent_id, msg)\n\n    def set_agent_name(self, name: str) -&gt; None:\n        \"\"\"Set the agent name for CLI display purposes.\"\"\"\n        self.agent_name = name\n\n    def _non_null_or_not_given(self, value: Any) -&gt; Any:\n        return value if value is not None else NOT_GIVEN\n\n    async def get_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        tracing: ModelTracing,\n    ) -&gt; ModelResponse:\n        # Increment the interaction counter for CLI display\n        self.interaction_counter += 1\n        self._intermediate_logs()\n\n        # Set this as the current active model for tool execution context\n        set_current_active_model(self)\n\n        # Stop idle timer and start active timer to track LLM processing time\n        stop_idle_timer()\n        start_active_timer()\n\n        with generation_span(\n            model=str(self.model),\n            model_config=dataclasses.asdict(model_settings)\n            | {\"base_url\": str(self._get_client().base_url)},\n            disabled=tracing.is_disabled(),\n        ) as span_generation:\n            # Prepare the messages for consistent token counting\n            # IMPORTANT: Include existing message history for context\n            converted_messages = []\n\n            # First, add all existing messages from history\n            if self.message_history:\n                for msg in self.message_history:\n                    msg_copy = msg.copy()  # Use copy to avoid modifying original\n                    # Remove any existing cache_control to avoid exceeding the 4-block limit\n                    if \"cache_control\" in msg_copy:\n                        del msg_copy[\"cache_control\"]\n                    converted_messages.append(msg_copy)\n\n            # Then convert and add the new input\n            new_messages = self._converter.items_to_messages(input, model_instance=self)\n            converted_messages.extend(new_messages)\n\n            if system_instructions:\n                # Check if we already have a system message\n                has_system = any(msg.get(\"role\") == \"system\" for msg in converted_messages)\n                if not has_system:\n                    converted_messages.insert(\n                        0,\n                        {\n                            \"content\": system_instructions,\n                            \"role\": \"system\",\n                        },\n                    )\n\n            # Add support for prompt caching for claude (not automatically applied)\n            # Gemini supports it too\n            # https://www.anthropic.com/news/token-saving-updates\n            # Maximize cache efficiency by using up to 4 cache_control blocks\n            if (str(self.model).startswith(\"claude\") or \"gemini\" in str(self.model)) and len(\n                converted_messages\n            ) &gt; 0:\n                # Strategy: Cache the most valuable messages for maximum savings\n                # 1. System message (always first priority)\n                # 2. Long user messages (high token count)\n                # 3. Assistant messages with tool calls (complex context)\n                # 4. Recent context (last message)\n\n                cache_candidates = []\n\n                # Always cache system message if present\n                for i, msg in enumerate(converted_messages):\n                    if msg.get(\"role\") == \"system\":\n                        cache_candidates.append((i, len(str(msg.get(\"content\", \"\"))), \"system\"))\n                        break\n\n                # Find long user messages and assistant messages with tool calls\n                for i, msg in enumerate(converted_messages):\n                    content_len = len(str(msg.get(\"content\", \"\")))\n                    role = msg.get(\"role\")\n\n                    if role == \"user\" and content_len &gt; 500:  # Long user messages\n                        cache_candidates.append((i, content_len, \"user\"))\n                    elif role == \"assistant\" and msg.get(\"tool_calls\"):  # Tool calls\n                        cache_candidates.append(\n                            (i, content_len + 200, \"assistant_tools\")\n                        )  # Bonus for tool calls\n\n                # Always consider the last message for recent context\n                if len(converted_messages) &gt; 1:\n                    last_idx = len(converted_messages) - 1\n                    last_msg = converted_messages[last_idx]\n                    last_content_len = len(str(last_msg.get(\"content\", \"\")))\n                    cache_candidates.append((last_idx, last_content_len, \"recent\"))\n\n                # Sort by value (content length) and select top 4 unique indices\n                cache_candidates.sort(key=lambda x: x[1], reverse=True)\n                selected_indices = []\n                for idx, _, msg_type in cache_candidates:\n                    if idx not in selected_indices:\n                        selected_indices.append(idx)\n                        if len(selected_indices) &gt;= 4:  # Max 4 cache blocks\n                            break\n\n                # Apply cache_control to selected messages\n                for idx in selected_indices:\n                    msg_copy = converted_messages[idx].copy()\n                    msg_copy[\"cache_control\"] = {\"type\": \"ephemeral\"}\n                    converted_messages[idx] = msg_copy\n\n            # # --- Add to message_history: user, system, and assistant tool call messages ---\n            # # Add system prompt to message_history\n            # if system_instructions:\n            #     sys_msg = {\n            #         \"role\": \"system\",\n            #         \"content\": system_instructions\n            #     }\n            #     self.add_to_message_history(sys_msg)\n\n            # Add user prompt(s) to message_history\n            if isinstance(input, str):\n                user_msg = {\"role\": \"user\", \"content\": input}\n                self.add_to_message_history(user_msg)\n                # Log the user message\n                self.logger.log_user_message(input)\n            elif isinstance(input, list):\n                for item in input:\n                    # Try to extract user messages\n                    if isinstance(item, dict):\n                        if item.get(\"role\") == \"user\":\n                            user_msg = {\"role\": \"user\", \"content\": item.get(\"content\", \"\")}\n                            self.add_to_message_history(user_msg)\n                            # Log the user message\n                            if item.get(\"content\"):\n                                self.logger.log_user_message(item.get(\"content\"))\n\n            # IMPORTANT: Ensure the message list has valid tool call/result pairs\n            # This needs to happen before the API call to prevent errors\n            try:\n                from cai.util import fix_message_list\n\n                converted_messages = fix_message_list(converted_messages)\n            except Exception:\n                pass\n\n            # Get token count estimate before API call for consistent counting\n            estimated_input_tokens, _ = count_tokens_with_tiktoken(converted_messages)\n\n            # Calculate and set context usage for toolbar\n            max_tokens = self._get_model_max_tokens(str(self.model))\n            context_usage = estimated_input_tokens / max_tokens if max_tokens &gt; 0 else 0.0\n            os.environ['CAI_CONTEXT_USAGE'] = str(context_usage)\n\n            # Check if auto-compaction is needed\n            input, system_instructions, compacted = await self._auto_compact_if_needed(estimated_input_tokens, input, system_instructions)\n\n            # If compaction occurred, recalculate tokens with new input\n            if compacted:\n                converted_messages = self._converter.items_to_messages(input, model_instance=self)\n                if system_instructions:\n                    converted_messages.insert(0, {\"role\": \"system\", \"content\": system_instructions})\n                estimated_input_tokens, _ = count_tokens_with_tiktoken(converted_messages)\n\n            # Pre-check price limit using estimated input tokens and a conservative estimate for output\n            # This prevents starting a request that would immediately exceed the price limit\n            if hasattr(COST_TRACKER, \"check_price_limit\"):\n                # Use a conservative estimate for output tokens (roughly equal to input)\n                estimated_cost = calculate_model_cost(\n                    str(self.model), estimated_input_tokens, estimated_input_tokens\n                )  # Conservative estimate\n                try:\n                    COST_TRACKER.check_price_limit(estimated_cost)\n                except Exception:\n                    # Stop active timer and start idle timer before re-raising the exception\n                    stop_active_timer()\n                    start_idle_timer()\n                    raise\n\n            try:\n                response = await self._fetch_response(\n                    system_instructions,\n                    input,\n                    model_settings,\n                    tools,\n                    output_schema,\n                    handoffs,\n                    span_generation,\n                    tracing,\n                    stream=False,\n                )\n            except KeyboardInterrupt:\n                # Handle KeyboardInterrupt during API call\n                # Clean up any pending tool calls that weren't executed\n                if hasattr(self, \"_pending_tool_calls\"):\n                    # Clear all pending tool calls to prevent incomplete history\n                    self._pending_tool_calls.clear()\n\n                # Let the interrupt propagate up to end the current operation\n                stop_active_timer()\n                start_idle_timer()\n\n                raise\n\n            if _debug.DONT_LOG_MODEL_DATA:\n                logger.debug(\"Received model response\")\n            else:\n                import json\n\n                logger.debug(\n                    f\"LLM resp:\\n{json.dumps(response.choices[0].message.model_dump(), indent=2)}\\n\"\n                )\n\n            # Ensure we have reasonable token counts\n            if response.usage:\n                input_tokens = response.usage.prompt_tokens\n                output_tokens = response.usage.completion_tokens\n                total_tokens = response.usage.total_tokens\n\n                # Use estimated tokens if API returns zeroes or implausible values\n                if input_tokens == 0 or input_tokens &lt; (len(str(input)) // 10):  # Sanity check\n                    input_tokens = estimated_input_tokens\n                    total_tokens = input_tokens + output_tokens\n\n                # # Debug information\n                # print(f\"\\nDEBUG CONSISTENT TOKEN COUNTS - API tokens: input={input_tokens}, output={output_tokens}, total={total_tokens}\")\n                # print(f\"Estimated tokens were: input={estimated_input_tokens}\")\n            else:\n                # If no usage info, use our estimates\n                input_tokens = estimated_input_tokens\n                output_tokens = 0\n                total_tokens = input_tokens\n                # print(f\"\\nDEBUG CONSISTENT TOKEN COUNTS - No API tokens, using estimates: input={input_tokens}, output={output_tokens}\")\n\n            # Update token totals for CLI display\n            self.total_input_tokens += input_tokens\n            self.total_output_tokens += output_tokens\n            reasoning_tokens = 0\n            if (\n                response.usage\n                and hasattr(response.usage, \"completion_tokens_details\")\n                and response.usage.completion_tokens_details\n                and hasattr(response.usage.completion_tokens_details, \"reasoning_tokens\")\n            ):\n                reasoning_tokens = response.usage.completion_tokens_details.reasoning_tokens\n                self.total_reasoning_tokens += reasoning_tokens\n\n            # Process costs for non-streaming mode\n            model_name = str(self.model)\n            interaction_cost = calculate_model_cost(model_name, input_tokens, output_tokens)\n\n            # Process the costs through COST_TRACKER only once\n            if interaction_cost &gt; 0.0:\n                # Check price limit before processing\n                if hasattr(COST_TRACKER, \"check_price_limit\"):\n                    COST_TRACKER.check_price_limit(interaction_cost)\n\n                # Process interaction cost\n                COST_TRACKER.process_interaction_cost(\n                    model_name,\n                    input_tokens,\n                    output_tokens,\n                    reasoning_tokens,\n                    interaction_cost\n                )\n\n                # Process total cost\n                total_cost = COST_TRACKER.process_total_cost(\n                    model_name,\n                    self.total_input_tokens,\n                    self.total_output_tokens,\n                    self.total_reasoning_tokens,\n                    None\n                )\n\n                # Track usage globally\n                GLOBAL_USAGE_TRACKER.track_usage(\n                    model_name=model_name,\n                    input_tokens=input_tokens,\n                    output_tokens=output_tokens,\n                    cost=interaction_cost,\n                    agent_name=self.agent_name\n                )\n            else:\n                # For free models\n                total_cost = COST_TRACKER.session_total_cost\n\n                # Still track token usage even for free models\n                GLOBAL_USAGE_TRACKER.track_usage(\n                    model_name=model_name,\n                    input_tokens=input_tokens,\n                    output_tokens=output_tokens,\n                    cost=0.0,\n                    agent_name=self.agent_name\n                )\n\n            # Check if this message contains tool calls\n            tool_output = None\n            should_display_message = True\n\n            if (\n                hasattr(response.choices[0].message, \"tool_calls\")\n                and response.choices[0].message.tool_calls\n            ):\n                # For each tool call in the message, get corresponding output if available\n                for tool_call in response.choices[0].message.tool_calls:\n                    call_id = tool_call.id\n\n                    # Check if this tool call has already been displayed\n                    if (\n                        hasattr(_Converter, \"tool_outputs\")\n                        and call_id in self._converter.tool_outputs\n                    ):\n                        tool_output_content = self._converter.tool_outputs[call_id]\n\n                        # Check if this is a command sent to an existing async session\n                        is_async_session_input = False\n                        has_auto_output = False\n                        is_regular_command = False\n                        try:\n                            import json\n\n                            # Handle empty arguments before trying to parse JSON\n                            tool_args = tool_call.function.arguments\n                            if tool_args is None or (isinstance(tool_args, str) and tool_args.strip() == \"\"):\n                                tool_args = \"{}\"\n\n                            args = json.loads(tool_args)\n                            # Check if this is a regular command (not a session command)\n                            if (\n                                isinstance(args, dict)\n                                and args.get(\"command\")\n                                and not args.get(\"session_id\")\n                                and not args.get(\"async_mode\")\n                            ):\n                                is_regular_command = True\n                            # Only consider it an async session input if it has session_id AND it's not creating a new session\n                            elif (\n                                isinstance(args, dict)\n                                and args.get(\"session_id\")\n                                and not args.get(\"async_mode\")  # Not creating a new session\n                                and not args.get(\"creating_session\")\n                            ):  # Not marked as session creation\n                                is_async_session_input = True\n                                # Check if this has auto_output flag\n                                has_auto_output = args.get(\"auto_output\", False)\n                        except:\n                            pass\n\n                        # For regular commands that were already shown via streaming, suppress the agent message\n                        if (\n                            is_regular_command\n                            and tool_call.function.name == \"generic_linux_command\"\n                        ):\n                            # Check if this was executed very recently (likely shown via streaming)\n                            if (\n                                hasattr(_Converter, \"recent_tool_calls\")\n                                and call_id in self._converter.recent_tool_calls\n                            ):\n                                tool_call_info = self._converter.recent_tool_calls[call_id]\n                                if \"start_time\" in tool_call_info:\n                                    import time\n\n                                    time_since_execution = (\n                                        time.time() - tool_call_info[\"start_time\"]\n                                    )\n                                    # If executed within last 2 seconds, it was likely shown via streaming\n                                    if time_since_execution &lt; 2.0:\n                                        should_display_message = False\n                                        tool_output = None\n                        elif is_async_session_input:\n                            should_display_message = True\n                            tool_output = None\n                        # For async session inputs without auto_output, always show the agent message\n                        elif is_async_session_input and not has_auto_output:\n                            should_display_message = True\n                            tool_output = None\n                        # For session creation messages, also show them\n                        elif (\n                            \"Started async session\" in tool_output_content\n                            or \"session\" in tool_output_content.lower()\n                            and \"async\" in tool_output_content.lower()\n                        ):\n                            should_display_message = True\n                            tool_output = None\n                        else:\n                            # For other tool calls, check if we should suppress based on timing\n                            # Only suppress if this tool was JUST executed (within last 2 seconds)\n                            if (\n                                hasattr(_Converter, \"recent_tool_calls\")\n                                and call_id in self._converter.recent_tool_calls\n                            ):\n                                tool_call_info = self._converter.recent_tool_calls[call_id]\n                                if \"start_time\" in tool_call_info:\n                                    import time\n\n                                    time_since_execution = (\n                                        time.time() - tool_call_info[\"start_time\"]\n                                    )\n                                    # Only suppress if this was executed very recently\n                                    if time_since_execution &lt; 2.0:\n                                        should_display_message = False\n                                    else:\n                                        # For older tool calls, show the message\n                                        should_display_message = True\n                        break\n\n            # Additional check: Always show messages that have text content\n            # This ensures agent explanations are not suppressed\n            if (\n                hasattr(response.choices[0].message, \"content\")\n                and response.choices[0].message.content\n                and str(response.choices[0].message.content).strip()\n            ):\n                # If the message has actual text content, always show it\n                should_display_message = True\n\n            # Display the agent message (this will show the command for async sessions)\n            if should_display_message:\n                # Ensure we're in non-streaming mode for proper markdown parsing\n                previous_stream_setting = os.environ.get(\"CAI_STREAM\", \"false\")\n                os.environ[\"CAI_STREAM\"] = \"false\"  # Force non-streaming mode for markdown parsing\n\n                # Print the agent message for CLI display\n                cli_print_agent_messages(\n                    agent_name=getattr(self, \"agent_name\", \"Agent\"),\n                    message=response.choices[0].message,\n                    counter=getattr(self, \"interaction_counter\", 0),\n                    model=str(self.model),\n                    debug=False,\n                    interaction_input_tokens=input_tokens,\n                    interaction_output_tokens=output_tokens,\n                    interaction_reasoning_tokens=reasoning_tokens,\n                    total_input_tokens=getattr(self, \"total_input_tokens\", 0),\n                    total_output_tokens=getattr(self, \"total_output_tokens\", 0),\n                    total_reasoning_tokens=getattr(self, \"total_reasoning_tokens\", 0),\n                    interaction_cost=interaction_cost,\n                    total_cost=total_cost,\n                    tool_output=tool_output,  # Pass tool_output only when needed\n                    suppress_empty=True,  # Keep suppress_empty=True as requested\n                )\n\n                # Restore previous streaming setting\n                os.environ[\"CAI_STREAM\"] = previous_stream_setting\n\n            # --- DEFERRED: Tool calls are no longer added immediately ---\n            # Tool calls will be added atomically with their responses\n            # to prevent incomplete message history on interruption\n            assistant_msg = response.choices[0].message\n            if hasattr(assistant_msg, \"tool_calls\") and assistant_msg.tool_calls:\n                # Store pending tool calls but don't add to history yet\n                if not hasattr(self, \"_pending_tool_calls\"):\n                    self._pending_tool_calls = {}\n\n                for tool_call in assistant_msg.tool_calls:\n                    # Handle empty arguments before storing\n                    tool_args = tool_call.function.arguments\n                    if tool_args is None or (isinstance(tool_args, str) and tool_args.strip() == \"\"):\n                        tool_args = \"{}\"\n\n                    # Compose a message for the tool call\n                    tool_call_msg = {\n                        \"role\": \"assistant\",\n                        \"content\": None,\n                        \"tool_calls\": [\n                            {\n                                \"id\": tool_call.id,\n                                \"type\": tool_call.type,\n                                \"function\": {\n                                    \"name\": tool_call.function.name,\n                                    \"arguments\": tool_args,\n                                },\n                            }\n                        ],\n                    }\n\n                    # Store for later atomic addition with response\n                    self._pending_tool_calls[tool_call.id] = tool_call_msg\n\n                    # Save the tool call details for later matching with output\n                    # This is important for non-streaming mode to track tool calls properly\n                    if not hasattr(self._converter, \"recent_tool_calls\"):\n                        self._converter.recent_tool_calls = {}\n\n                    # Store the tool call by ID for later reference\n                    import time\n\n                    self._converter.recent_tool_calls[tool_call.id] = {\n                        \"name\": tool_call.function.name,\n                        \"arguments\": tool_call.function.arguments,\n                        \"start_time\": time.time(),\n                        \"execution_info\": {\"start_time\": time.time()},\n                    }\n\n                # Log the assistant tool call message\n                tool_calls_list = []\n                for tool_call in assistant_msg.tool_calls:\n                    tool_calls_list.append(\n                        {\n                            \"id\": tool_call.id,\n                            \"type\": tool_call.type,\n                            \"function\": {\n                                \"name\": tool_call.function.name,\n                                \"arguments\": tool_call.function.arguments,\n                            },\n                        }\n                    )\n                self.logger.log_assistant_message(None, tool_calls_list)\n            # If the assistant message is just text, add it as well\n            elif hasattr(assistant_msg, \"content\") and assistant_msg.content:\n                asst_msg = {\"role\": \"assistant\", \"content\": assistant_msg.content}\n                self.add_to_message_history(asst_msg)\n                # Log the assistant message\n                self.logger.log_assistant_message(assistant_msg.content)\n\n            # En no-streaming, tambi\u00e9n necesitamos a\u00f1adir cualquier tool output al message_history\n            # Esto se hace procesando los items de output del ModelResponse\n            items = self._converter.message_to_output_items(response.choices[0].message)\n\n            # Adem\u00e1s, necesitamos a\u00f1adir los tool outputs que se hayan generado\n            # durante la ejecuci\u00f3n de las herramientas\n            if hasattr(_Converter, \"tool_outputs\"):\n                for call_id, output_content in self._converter.tool_outputs.items():\n                    # Verificar si ya existe un mensaje tool con este call_id en message_history\n                    tool_msg_exists = any(\n                        msg.get(\"role\") == \"tool\" and msg.get(\"tool_call_id\") == call_id\n                        for msg in message_history\n                    )\n\n                    if not tool_msg_exists:\n                        # A\u00f1adir el mensaje tool al message_history\n                        tool_msg = {\n                            \"role\": \"tool\",\n                            \"tool_call_id\": call_id,\n                            \"content\": output_content,\n                        }\n                        self.add_to_message_history(tool_msg)\n\n            # Log the complete response for the session\n            self.logger.rec_training_data(\n                {\n                    \"model\": str(self.model),\n                    \"messages\": converted_messages,\n                    \"stream\": False,\n                    \"tools\": [t.params_json_schema for t in tools] if tools else [],\n                    \"tool_choice\": model_settings.tool_choice,\n                },\n                response,\n                self.total_cost,\n                self.agent_name,\n            )\n\n            usage = (\n                Usage(\n                    requests=1,\n                    input_tokens=input_tokens,\n                    output_tokens=output_tokens,\n                    total_tokens=input_tokens + output_tokens,\n                )\n                if response.usage or input_tokens &gt; 0\n                else Usage()\n            )\n            if tracing.include_data():\n                span_generation.span_data.output = [response.choices[0].message.model_dump()]\n            span_generation.span_data.usage = {\n                \"input_tokens\": usage.input_tokens,\n                \"output_tokens\": usage.output_tokens,\n            }\n\n            items = self._converter.message_to_output_items(response.choices[0].message)\n\n            # For non-streaming responses, make sure we also log token usage with compatible field names\n            # This ensures both streaming and non-streaming use consistent naming\n            if not hasattr(response, \"usage\"):\n                response.usage = {}\n            if hasattr(response.usage, \"prompt_tokens\") and not hasattr(\n                response.usage, \"input_tokens\"\n            ):\n                response.usage.input_tokens = response.usage.prompt_tokens\n            if hasattr(response.usage, \"completion_tokens\") and not hasattr(\n                response.usage, \"output_tokens\"\n            ):\n                response.usage.output_tokens = response.usage.completion_tokens\n\n            # Ensure cost is properly initialized\n            if not hasattr(response, \"cost\"):\n                response.cost = None\n\n            return ModelResponse(\n                output=items,\n                usage=usage,\n                referenceable_id=None,\n            )\n\n        # Stop active timer and start idle timer when response is complete\n        stop_active_timer()\n        start_idle_timer()\n\n    async def stream_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        tracing: ModelTracing,\n    ) -&gt; AsyncIterator[TResponseStreamEvent]:\n        \"\"\"\n        Yields a partial message as it is generated, as well as the usage information.\n        \"\"\"\n        # Initialize streaming contexts as None\n        streaming_context = None\n        thinking_context = None\n        stream_interrupted = False\n\n        try:\n            # IMPORTANT: Pre-process input to ensure it's in the correct format\n            # for streaming. This helps prevent errors during stream handling.\n            if not isinstance(input, str):\n                # Convert input items to messages and verify structure\n                try:\n                    input_items = list(input)  # Make sure it's a list\n                    # Pre-verify the input messages to avoid errors during streaming\n                    from cai.util import fix_message_list\n\n                    # Apply fix_message_list to the input items that are dictionaries\n                    dict_items = [item for item in input_items if isinstance(item, dict)]\n                    if dict_items:\n                        fixed_dict_items = fix_message_list(dict_items)\n\n                        # Replace the original dict items with fixed ones while preserving non-dict items\n                        new_input = []\n                        dict_index = 0\n                        for item in input_items:\n                            if isinstance(item, dict):\n                                if dict_index &lt; len(fixed_dict_items):\n                                    new_input.append(fixed_dict_items[dict_index])\n                                    dict_index += 1\n                            else:\n                                new_input.append(item)\n\n                        # Update input with the fixed version\n                        input = new_input\n                except Exception as e:\n                    # Silently continue with original input if pre-processing failed\n                    # This is not critical and shouldn't show warnings\n                    pass\n\n            # Increment the interaction counter for CLI display\n            self.interaction_counter += 1\n            self._intermediate_logs()\n\n            # Stop idle timer and start active timer to track LLM processing time\n            stop_idle_timer()\n            start_active_timer()\n\n            # --- Check if streaming should be shown in rich panel ---\n            should_show_rich_stream = (\n                os.getenv(\"CAI_STREAM\", \"false\").lower() == \"true\"\n                and not self.disable_rich_streaming\n            )\n\n            # Create streaming context if needed\n            if should_show_rich_stream:\n                try:\n                    streaming_context = create_agent_streaming_context(\n                        agent_name=self.agent_name,\n                        counter=self.interaction_counter,\n                        model=str(self.model),\n                    )\n                except Exception as e:\n                    # Silently fall back to non-streaming display\n                    streaming_context = None\n\n            with generation_span(\n                model=str(self.model),\n                model_config=dataclasses.asdict(model_settings)\n                | {\"base_url\": str(self._get_client().base_url)},\n                disabled=tracing.is_disabled(),\n            ) as span_generation:\n                # Prepare messages for consistent token counting\n                converted_messages = self._converter.items_to_messages(input, model_instance=self)\n                if system_instructions:\n                    converted_messages.insert(\n                        0,\n                        {\n                            \"content\": system_instructions,\n                            \"role\": \"system\",\n                        },\n                    )\n\n                # Add support for prompt caching for claude (not automatically applied)\n                # Gemini supports it too\n                # https://www.anthropic.com/news/token-saving-updates\n                # Maximize cache efficiency by using up to 4 cache_control blocks\n                if (str(self.model).startswith(\"claude\") or \"gemini\" in str(self.model)) and len(\n                    converted_messages\n                ) &gt; 0:\n                    # Strategy: Cache the most valuable messages for maximum savings\n                    # 1. System message (always first priority)\n                    # 2. Long user messages (high token count)\n                    # 3. Assistant messages with tool calls (complex context)\n                    # 4. Recent context (last message)\n\n                    cache_candidates = []\n\n                    # Always cache system message if present\n                    for i, msg in enumerate(converted_messages):\n                        if msg.get(\"role\") == \"system\":\n                            cache_candidates.append((i, len(str(msg.get(\"content\", \"\"))), \"system\"))\n                            break\n\n                    # Find long user messages and assistant messages with tool calls\n                    for i, msg in enumerate(converted_messages):\n                        content_len = len(str(msg.get(\"content\", \"\")))\n                        role = msg.get(\"role\")\n\n                        if role == \"user\" and content_len &gt; 500:  # Long user messages\n                            cache_candidates.append((i, content_len, \"user\"))\n                        elif role == \"assistant\" and msg.get(\"tool_calls\"):  # Tool calls\n                            cache_candidates.append(\n                                (i, content_len + 200, \"assistant_tools\")\n                            )  # Bonus for tool calls\n\n                    # Always consider the last message for recent context\n                    if len(converted_messages) &gt; 1:\n                        last_idx = len(converted_messages) - 1\n                        last_msg = converted_messages[last_idx]\n                        last_content_len = len(str(last_msg.get(\"content\", \"\")))\n                        cache_candidates.append((last_idx, last_content_len, \"recent\"))\n\n                    # Sort by value (content length) and select top 4 unique indices\n                    cache_candidates.sort(key=lambda x: x[1], reverse=True)\n                    selected_indices = []\n                    for idx, _, msg_type in cache_candidates:\n                        if idx not in selected_indices:\n                            selected_indices.append(idx)\n                            if len(selected_indices) &gt;= 4:  # Max 4 cache blocks\n                                break\n\n                    # Apply cache_control to selected messages\n                    for idx in selected_indices:\n                        msg_copy = converted_messages[idx].copy()\n                        msg_copy[\"cache_control\"] = {\"type\": \"ephemeral\"}\n                        converted_messages[idx] = msg_copy\n\n                #    # --- Add to message_history: user, system prompts ---\n                #     if system_instructions:\n                #         sys_msg = {\n                #             \"role\": \"system\",\n                #             \"content\": system_instructions\n                #         }\n                #         self.add_to_message_history(sys_msg)\n\n                if isinstance(input, str):\n                    user_msg = {\"role\": \"user\", \"content\": input}\n                    self.add_to_message_history(user_msg)\n                    # Log the user message\n                    self.logger.log_user_message(input)\n                elif isinstance(input, list):\n                    for item in input:\n                        if isinstance(item, dict):\n                            if item.get(\"role\") == \"user\":\n                                user_msg = {\"role\": \"user\", \"content\": item.get(\"content\", \"\")}\n                                self.add_to_message_history(user_msg)\n                                # Log the user message\n                                if item.get(\"content\"):\n                                    self.logger.log_user_message(item.get(\"content\"))\n                # Get token count estimate before API call for consistent counting\n                estimated_input_tokens, _ = count_tokens_with_tiktoken(converted_messages)\n\n                # Check if auto-compaction is needed\n                input, system_instructions, compacted = await self._auto_compact_if_needed(estimated_input_tokens, input, system_instructions)\n\n                # If compaction occurred, recalculate tokens with new input\n                if compacted:\n                    converted_messages = self._converter.items_to_messages(input, model_instance=self)\n                    if system_instructions:\n                        converted_messages.insert(0, {\"role\": \"system\", \"content\": system_instructions})\n                    estimated_input_tokens, _ = count_tokens_with_tiktoken(converted_messages)\n\n                # Pre-check price limit using estimated input tokens and a conservative estimate for output\n                # This prevents starting a stream that would immediately exceed the price limit\n                if hasattr(COST_TRACKER, \"check_price_limit\"):\n                    # Use a conservative estimate for output tokens (roughly equal to input)\n                    estimated_cost = calculate_model_cost(\n                        str(self.model), estimated_input_tokens, estimated_input_tokens\n                    )  # Conservative estimate\n                    try:\n                        COST_TRACKER.check_price_limit(estimated_cost)\n                    except Exception:\n                        # Ensure streaming context is cleaned up in case of errors\n                        if streaming_context:\n                            try:\n                                finish_agent_streaming(streaming_context, None)\n                            except Exception:\n                                pass\n                        # Stop active timer and start idle timer before re-raising the exception\n                        stop_active_timer()\n                        start_idle_timer()\n                        raise\n\n                response, stream = await self._fetch_response(\n                    system_instructions,\n                    input,\n                    model_settings,\n                    tools,\n                    output_schema,\n                    handoffs,\n                    span_generation,\n                    tracing,\n                    stream=True,\n                )\n\n                usage: CompletionUsage | None = None\n                state = _StreamingState()\n\n                # Manual token counting (when API doesn't provide it)\n                output_text = \"\"\n                estimated_output_tokens = 0\n\n                # Initialize a streaming text accumulator for rich display\n                streaming_text_buffer = \"\"\n                # For tool call streaming, accumulate tool_calls to add to message_history at the end\n                streamed_tool_calls = []\n\n                # Initialize Claude thinking display if applicable\n                if should_show_rich_stream:  # Only show thinking in rich streaming mode\n                    thinking_context = start_claude_thinking_if_applicable(\n                        str(self.model), self.agent_name, self.interaction_counter\n                    )\n\n                # Ollama specific: accumulate full content to check for function calls at the end\n                # Some Ollama models output the function call as JSON in the text content\n                ollama_full_content = \"\"\n                is_ollama = False\n\n                model_str = str(self.model).lower()\n                is_ollama = (\n                    self.is_ollama\n                    or \"ollama\" in model_str\n                    or \":\" in model_str\n                    or \"qwen\" in model_str\n                )\n\n                # Add visual separation before agent output\n                if streaming_context and should_show_rich_stream:\n                    # If we're using rich context, we'll add separation through that\n                    pass\n                else:\n                    # Removed clear visual separator to avoid blank lines during streaming\n                    pass\n\n                try:\n                    async for chunk in stream:\n                        # Check if we've been interrupted\n                        if stream_interrupted:\n                            break\n\n                        if not state.started:\n                            state.started = True\n                            yield ResponseCreatedEvent(\n                                response=response,\n                                type=\"response.created\",\n                            )\n\n                        # The usage is only available in the last chunk\n                        if hasattr(chunk, \"usage\"):\n                            usage = chunk.usage\n                        # For Ollama/LiteLLM streams that don't have usage attribute\n                        else:\n                            usage = None\n\n                        # Handle different stream chunk formats\n                        if hasattr(chunk, \"choices\") and chunk.choices:\n                            choices = chunk.choices\n                        elif hasattr(chunk, \"delta\") and chunk.delta:\n                            # Some providers might return delta directly\n                            choices = [{\"delta\": chunk.delta}]\n                        elif isinstance(chunk, dict) and \"choices\" in chunk:\n                            choices = chunk[\"choices\"]\n                        # Special handling for Qwen/Ollama chunks\n                        elif isinstance(chunk, dict) and (\n                            \"content\" in chunk or \"function_call\" in chunk\n                        ):\n                            # Qwen direct delta format - convert to standard\n                            choices = [{\"delta\": chunk}]\n                        else:\n                            # Skip chunks that don't contain choice data\n                            continue\n\n                        if not choices or len(choices) == 0:\n                            continue\n\n                        # Get the delta content\n                        delta = None\n                        if hasattr(choices[0], \"delta\"):\n                            delta = choices[0].delta\n                        elif isinstance(choices[0], dict) and \"delta\" in choices[0]:\n                            delta = choices[0][\"delta\"]\n\n                        if not delta:\n                            continue\n\n                        # Handle Claude reasoning content first (before regular content)\n                        reasoning_content = None\n\n                        # Check for Claude reasoning in different possible formats\n                        if (\n                            hasattr(delta, \"reasoning_content\")\n                            and delta.reasoning_content is not None\n                        ):\n                            reasoning_content = delta.reasoning_content\n                        elif (\n                            isinstance(delta, dict)\n                            and \"reasoning_content\" in delta\n                            and delta[\"reasoning_content\"] is not None\n                        ):\n                            reasoning_content = delta[\"reasoning_content\"]\n\n                        # Also check for thinking_blocks structure (Claude 4 format)\n                        thinking_blocks = None\n                        if hasattr(delta, \"thinking_blocks\") and delta.thinking_blocks is not None:\n                            thinking_blocks = delta.thinking_blocks\n                        elif (\n                            isinstance(delta, dict)\n                            and \"thinking_blocks\" in delta\n                            and delta[\"thinking_blocks\"] is not None\n                        ):\n                            thinking_blocks = delta[\"thinking_blocks\"]\n\n                        # Extract reasoning content from thinking blocks if available\n                        if thinking_blocks and not reasoning_content:\n                            for block in thinking_blocks:\n                                if isinstance(block, dict) and block.get(\"type\") == \"thinking\":\n                                    reasoning_content = block.get(\"thinking\", \"\")\n                                    break\n                                elif (\n                                    isinstance(block, dict)\n                                    and block.get(\"type\") == \"text\"\n                                    and \"thinking\" in str(block)\n                                ):\n                                    # Sometimes thinking content comes as text blocks\n                                    reasoning_content = block.get(\"text\", \"\")\n                                    break\n\n                        # Check for direct thinking field (some Claude models)\n                        if not reasoning_content:\n                            if hasattr(delta, \"thinking\") and delta.thinking is not None:\n                                reasoning_content = delta.thinking\n                            elif (\n                                isinstance(delta, dict)\n                                and \"thinking\" in delta\n                                and delta[\"thinking\"] is not None\n                            ):\n                                reasoning_content = delta[\"thinking\"]\n\n                        # Update thinking display if we have reasoning content\n                        if reasoning_content:\n                            if thinking_context:\n                                # Streaming mode: Update the rich thinking display\n                                from cai.util import update_claude_thinking_content\n\n                                update_claude_thinking_content(thinking_context, reasoning_content)\n                            else:\n                                # Non-streaming mode: Use simple text output\n                                from cai.util import (\n                                    detect_claude_thinking_in_stream,\n                                    print_claude_reasoning_simple,\n                                )\n\n                                # Check if model supports reasoning (Claude or DeepSeek)\n                                model_str_lower = str(self.model).lower()\n                                if (\n                                    detect_claude_thinking_in_stream(str(self.model))\n                                    or \"deepseek\" in model_str_lower\n                                ):\n                                    print_claude_reasoning_simple(\n                                        reasoning_content, self.agent_name, str(self.model)\n                                    )\n\n                        # Handle text\n                        content = None\n                        if hasattr(delta, \"content\") and delta.content is not None:\n                            content = delta.content\n                        elif (\n                            isinstance(delta, dict)\n                            and \"content\" in delta\n                            and delta[\"content\"] is not None\n                        ):\n                            content = delta[\"content\"]\n\n                        if content:\n                            # IMPORTANT: If we have content and thinking_context is active,\n                            # it means thinking is complete and normal content is starting\n                            # Close the thinking display automatically\n                            if thinking_context:\n                                from cai.util import finish_claude_thinking_display\n\n                                finish_claude_thinking_display(thinking_context)\n                                thinking_context = None  # Clear the context\n\n                            # For Ollama, we need to accumulate the full content to check for function calls\n                            if is_ollama:\n                                ollama_full_content += content\n\n                            # Add to the streaming text buffer\n                            streaming_text_buffer += content\n\n                            # Update streaming display if enabled - ALWAYS respect CAI_STREAM setting\n                            # Both thinking and regular content should stream if streaming is enabled\n                            if streaming_context:\n                                # Calculate cost for current interaction\n                                current_cost = calculate_model_cost(\n                                    str(self.model), estimated_input_tokens, estimated_output_tokens\n                                )\n\n                                # Check price limit only for paid models\n                                if (\n                                    current_cost &gt; 0\n                                    and hasattr(COST_TRACKER, \"check_price_limit\")\n                                    and estimated_output_tokens % 50 == 0\n                                ):\n                                    try:\n                                        COST_TRACKER.check_price_limit(current_cost)\n                                    except Exception:\n                                        # Ensure streaming context is cleaned up\n                                        if streaming_context:\n                                            try:\n                                                finish_agent_streaming(streaming_context, None)\n                                            except Exception:\n                                                pass\n                                        # Stop timers and re-raise the exception\n                                        stop_active_timer()\n                                        start_idle_timer()\n                                        raise\n\n                                # Update session total cost for real-time display\n                                # This is a temporary estimate during streaming that will be properly updated at the end\n                                estimated_session_total = getattr(\n                                    COST_TRACKER, \"session_total_cost\", 0.0\n                                )\n\n                                # For free models, don't add to the total cost\n                                display_total_cost = estimated_session_total\n                                if current_cost &gt; 0:\n                                    display_total_cost += current_cost\n\n                                # Create token stats with both current interaction cost and updated total cost\n                                token_stats = {\n                                    \"input_tokens\": estimated_input_tokens,\n                                    \"output_tokens\": estimated_output_tokens,\n                                    \"cost\": current_cost,\n                                    \"total_cost\": display_total_cost,\n                                }\n\n                                update_agent_streaming_content(\n                                    streaming_context, content, token_stats\n                                )\n\n                            # More accurate token counting for text content\n                            output_text += content\n                            token_count, _ = count_tokens_with_tiktoken(output_text)\n                            estimated_output_tokens = token_count\n\n                            # Periodically check price limit during streaming\n                            # This allows early termination if price limit is reached mid-stream\n                            if (\n                                estimated_output_tokens &gt; 0 and estimated_output_tokens % 50 == 0\n                            ):  # Check every ~50 tokens\n                                # Calculate current estimated cost\n                                current_estimated_cost = calculate_model_cost(\n                                    str(self.model), estimated_input_tokens, estimated_output_tokens\n                                )\n\n                                # Check price limit only for paid models\n                                if current_estimated_cost &gt; 0 and hasattr(\n                                    COST_TRACKER, \"check_price_limit\"\n                                ):\n                                    try:\n                                        COST_TRACKER.check_price_limit(current_estimated_cost)\n                                    except Exception:\n                                        # Ensure streaming context is cleaned up\n                                        if streaming_context:\n                                            try:\n                                                finish_agent_streaming(streaming_context, None)\n                                            except Exception:\n                                                pass\n                                        # Stop timers and re-raise the exception\n                                        stop_active_timer()\n                                        start_idle_timer()\n                                        raise\n\n                                # Update the COST_TRACKER with the running cost for accurate display\n                                if hasattr(COST_TRACKER, \"interaction_cost\"):\n                                    COST_TRACKER.interaction_cost = current_estimated_cost\n\n                                # Also update streaming context if available for live display\n                                if streaming_context:\n                                    # For free models, don't add to the session total\n                                    if current_estimated_cost == 0:\n                                        session_total = getattr(\n                                            COST_TRACKER, \"session_total_cost\", 0.0\n                                        )\n                                    else:\n                                        session_total = (\n                                            getattr(COST_TRACKER, \"session_total_cost\", 0.0)\n                                            + current_estimated_cost\n                                        )\n\n                                    updated_token_stats = {\n                                        \"input_tokens\": estimated_input_tokens,\n                                        \"output_tokens\": estimated_output_tokens,\n                                        \"cost\": current_estimated_cost,\n                                        \"total_cost\": session_total,\n                                    }\n                                    update_agent_streaming_content(\n                                        streaming_context, \"\", updated_token_stats\n                                    )\n\n                            if not state.text_content_index_and_output:\n                                # Initialize a content tracker for streaming text\n                                state.text_content_index_and_output = (\n                                    0 if not state.refusal_content_index_and_output else 1,\n                                    ResponseOutputText(\n                                        text=\"\",\n                                        type=\"output_text\",\n                                        annotations=[],\n                                    ),\n                                )\n                                # Start a new assistant message stream\n                                assistant_item = ResponseOutputMessage(\n                                    id=FAKE_RESPONSES_ID,\n                                    content=[],\n                                    role=\"assistant\",\n                                    type=\"message\",\n                                    status=\"in_progress\",\n                                )\n                                # Notify consumers of the start of a new output message + first content part\n                                yield ResponseOutputItemAddedEvent(\n                                    item=assistant_item,\n                                    output_index=0,\n                                    type=\"response.output_item.added\",\n                                )\n                                yield ResponseContentPartAddedEvent(\n                                    content_index=state.text_content_index_and_output[0],\n                                    item_id=FAKE_RESPONSES_ID,\n                                    output_index=0,\n                                    part=ResponseOutputText(\n                                        text=\"\",\n                                        type=\"output_text\",\n                                        annotations=[],\n                                    ),\n                                    type=\"response.content_part.added\",\n                                )\n                            # Emit the delta for this segment of content\n                            yield ResponseTextDeltaEvent(\n                                content_index=state.text_content_index_and_output[0],\n                                delta=content,\n                                item_id=FAKE_RESPONSES_ID,\n                                output_index=0,\n                                type=\"response.output_text.delta\",\n                            )\n                            # Accumulate the text into the response part\n                            state.text_content_index_and_output[1].text += content\n\n                        # Handle refusals (model declines to answer)\n                        refusal_content = None\n                        if hasattr(delta, \"refusal\") and delta.refusal:\n                            refusal_content = delta.refusal\n                        elif isinstance(delta, dict) and \"refusal\" in delta and delta[\"refusal\"]:\n                            refusal_content = delta[\"refusal\"]\n\n                        if refusal_content:\n                            if not state.refusal_content_index_and_output:\n                                # Initialize a content tracker for streaming refusal text\n                                state.refusal_content_index_and_output = (\n                                    0 if not state.text_content_index_and_output else 1,\n                                    ResponseOutputRefusal(refusal=\"\", type=\"refusal\"),\n                                )\n                                # Start a new assistant message if one doesn't exist yet (in-progress)\n                                assistant_item = ResponseOutputMessage(\n                                    id=FAKE_RESPONSES_ID,\n                                    content=[],\n                                    role=\"assistant\",\n                                    type=\"message\",\n                                    status=\"in_progress\",\n                                )\n                                # Notify downstream that assistant message + first content part are starting\n                                yield ResponseOutputItemAddedEvent(\n                                    item=assistant_item,\n                                    output_index=0,\n                                    type=\"response.output_item.added\",\n                                )\n                                yield ResponseContentPartAddedEvent(\n                                    content_index=state.refusal_content_index_and_output[0],\n                                    item_id=FAKE_RESPONSES_ID,\n                                    output_index=0,\n                                    part=ResponseOutputText(\n                                        text=\"\",\n                                        type=\"output_text\",\n                                        annotations=[],\n                                    ),\n                                    type=\"response.content_part.added\",\n                                )\n                            # Emit the delta for this segment of refusal\n                            yield ResponseRefusalDeltaEvent(\n                                content_index=state.refusal_content_index_and_output[0],\n                                delta=refusal_content,\n                                item_id=FAKE_RESPONSES_ID,\n                                output_index=0,\n                                type=\"response.refusal.delta\",\n                            )\n                            # Accumulate the refusal string in the output part\n                            state.refusal_content_index_and_output[1].refusal += refusal_content\n\n                        # Handle tool calls\n                        # Because we don't know the name of the function until the end of the stream, we'll\n                        # save everything and yield events at the end\n                        tool_calls = self._detect_and_format_function_calls(delta)\n\n                        if tool_calls:\n                            for tc_delta in tool_calls:\n                                tc_index = (\n                                    tc_delta.index\n                                    if hasattr(tc_delta, \"index\")\n                                    else tc_delta.get(\"index\", 0)\n                                )\n                                if tc_index not in state.function_calls:\n                                    state.function_calls[tc_index] = ResponseFunctionToolCall(\n                                        id=FAKE_RESPONSES_ID,\n                                        arguments=\"\",\n                                        name=\"\",\n                                        type=\"function_call\",\n                                        call_id=\"\",\n                                    )\n\n                                tc_function = None\n                                if hasattr(tc_delta, \"function\"):\n                                    tc_function = tc_delta.function\n                                elif isinstance(tc_delta, dict) and \"function\" in tc_delta:\n                                    tc_function = tc_delta[\"function\"]\n\n                                if tc_function:\n                                    # Handle both object and dict formats\n                                    args = \"\"\n                                    if hasattr(tc_function, \"arguments\"):\n                                        args = tc_function.arguments or \"\"\n                                    elif (\n                                        isinstance(tc_function, dict) and \"arguments\" in tc_function\n                                    ):\n                                        args = tc_function.get(\"arguments\", \"\") or \"\"\n\n                                    name = \"\"\n                                    if hasattr(tc_function, \"name\"):\n                                        name = tc_function.name or \"\"\n                                    elif isinstance(tc_function, dict) and \"name\" in tc_function:\n                                        name = tc_function.get(\"name\", \"\") or \"\"\n\n                                    state.function_calls[tc_index].arguments += args\n                                    state.function_calls[tc_index].name += name\n\n                                # Handle call_id in both formats\n                                call_id = \"\"\n                                if hasattr(tc_delta, \"id\"):\n                                    call_id = tc_delta.id or \"\"\n                                elif isinstance(tc_delta, dict) and \"id\" in tc_delta:\n                                    call_id = tc_delta.get(\"id\", \"\") or \"\"\n                                else:\n                                    # For Qwen models, generate a predictable ID if none is provided\n                                    if state.function_calls[tc_index].name:\n                                        # Generate a stable ID from the function name and arguments\n                                        call_id = f\"call_{hashlib.md5(state.function_calls[tc_index].name.encode()).hexdigest()[:8]}\"\n\n                                state.function_calls[tc_index].call_id += call_id\n\n                                # --- Accumulate tool call for message_history ---\n                                # Only add if not already present (avoid duplicates in streaming)\n                                # Handle empty arguments before storing\n                                tool_args = state.function_calls[tc_index].arguments\n                                if tool_args is None or (isinstance(tool_args, str) and tool_args.strip() == \"\"):\n                                    tool_args = \"{}\"\n\n                                tool_call_msg = {\n                                    \"role\": \"assistant\",\n                                    \"content\": None,\n                                    \"tool_calls\": [\n                                        {\n                                            \"id\": state.function_calls[tc_index].call_id,\n                                            \"type\": \"function\",\n                                            \"function\": {\n                                                \"name\": state.function_calls[tc_index].name,\n                                                \"arguments\": tool_args,\n                                            },\n                                        }\n                                    ],\n                                }\n                                # Only add if not already in streamed_tool_calls\n                                if tool_call_msg not in streamed_tool_calls:\n                                    streamed_tool_calls.append(tool_call_msg)\n                                    # Don't add to message history here - wait for tool output\n                                    # to add both tool call and response atomically\n\n                                    # NEW: Display tool call immediately when detected in streaming mode\n                                    # But only if it has complete arguments and name\n                                    if (\n                                        state.function_calls[tc_index].name\n                                        and state.function_calls[tc_index].arguments\n                                        and state.function_calls[tc_index].call_id\n                                    ):\n                                        # First, finish any existing streaming context if it exists\n                                        if streaming_context:\n                                            try:\n                                                finish_agent_streaming(streaming_context, None)\n                                                streaming_context = None\n                                            except Exception:\n                                                pass\n\n                                        # Create a message-like object for displaying the function call\n                                        tool_msg = type(\n                                            \"ToolCallStreamDisplay\",\n                                            (),\n                                            {\n                                                \"content\": None,\n                                                \"tool_calls\": [\n                                                    type(\n                                                        \"ToolCallDetail\",\n                                                        (),\n                                                        {\n                                                            \"function\": type(\n                                                                \"FunctionDetail\",\n                                                                (),\n                                                                {\n                                                                    \"name\": state.function_calls[\n                                                                        tc_index\n                                                                    ].name,\n                                                                    \"arguments\": state.function_calls[\n                                                                        tc_index\n                                                                    ].arguments,\n                                                                },\n                                                            ),\n                                                            \"id\": state.function_calls[\n                                                                tc_index\n                                                            ].call_id,\n                                                            \"type\": \"function\",\n                                                        },\n                                                    )\n                                                ],\n                                            },\n                                        )\n\n                                        # Display the tool call during streaming\n                                        cli_print_agent_messages(\n                                            agent_name=getattr(self, \"agent_name\", \"Agent\"),\n                                            message=tool_msg,\n                                            counter=getattr(self, \"interaction_counter\", 0),\n                                            model=str(self.model),\n                                            debug=False,\n                                            interaction_input_tokens=estimated_input_tokens,\n                                            interaction_output_tokens=estimated_output_tokens,\n                                            interaction_reasoning_tokens=0,  # Not available during streaming yet\n                                            total_input_tokens=getattr(\n                                                self, \"total_input_tokens\", 0\n                                            )\n                                            + estimated_input_tokens,\n                                            total_output_tokens=getattr(\n                                                self, \"total_output_tokens\", 0\n                                            )\n                                            + estimated_output_tokens,\n                                            total_reasoning_tokens=getattr(\n                                                self, \"total_reasoning_tokens\", 0\n                                            ),\n                                            interaction_cost=None,\n                                            total_cost=None,\n                                            tool_output=None,  # Will be shown once tool is executed\n                                            suppress_empty=True,  # Prevent empty panels\n                                        )\n                                        # Set flag to suppress final output to avoid duplication\n                                        self.suppress_final_output = True\n\n                except KeyboardInterrupt:\n                    # Handle interruption during streaming\n                    stream_interrupted = True\n                    print(\"\\n[Streaming interrupted by user]\", file=sys.stderr)\n\n                    # Let the exception propagate after cleanup\n                    raise\n\n                except Exception as e:\n                    # Handle other exceptions during streaming\n                    logger.error(f\"Error during streaming: {e}\")\n                    if \"token\" in str(e).lower() or \"limit\" in str(e).lower():\n                        print(\"\\n\ud83d\udccf Token limit exceeded - Response truncated\")\n                    raise\n\n                # Special handling for Ollama - check if accumulated text contains a valid function call\n                if is_ollama and ollama_full_content and len(state.function_calls) == 0:\n                    # Look for JSON object that might be a function call\n                    try:\n                        # Try to extract a JSON object from the content\n                        json_start = ollama_full_content.find(\"{\")\n                        json_end = ollama_full_content.rfind(\"}\") + 1\n\n                        if json_start &gt;= 0 and json_end &gt; json_start:\n                            json_str = ollama_full_content[json_start:json_end]\n                            # Try to parse the JSON\n                            parsed = json.loads(json_str)\n\n                            # Check if it looks like a function call\n                            if \"name\" in parsed and \"arguments\" in parsed:\n                                logger.debug(\n                                    f\"Found valid function call in Ollama output: {json_str}\"\n                                )\n\n                                # Create a tool call ID\n                                tool_call_id = f\"call_{hashlib.md5((parsed['name'] + str(time.time())).encode()).hexdigest()[:8]}\"\n\n                                # Ensure arguments is a valid JSON string\n                                arguments_str = \"\"\n                                if isinstance(parsed[\"arguments\"], dict):\n                                    # Remove 'ctf' field if it exists\n                                    if \"ctf\" in parsed[\"arguments\"]:\n                                        del parsed[\"arguments\"][\"ctf\"]\n                                    arguments_str = json.dumps(parsed[\"arguments\"])\n                                elif isinstance(parsed[\"arguments\"], str):\n                                    # If it's already a string, check if it's valid JSON\n                                    try:\n                                        # Try parsing to validate and remove 'ctf' if present\n                                        args_dict = json.loads(parsed[\"arguments\"])\n                                        if isinstance(args_dict, dict) and \"ctf\" in args_dict:\n                                            del args_dict[\"ctf\"]\n                                        arguments_str = json.dumps(args_dict)\n                                    except:\n                                        # If not valid JSON, encode it as a JSON string\n                                        arguments_str = json.dumps(parsed[\"arguments\"])\n                                else:\n                                    # For any other type, convert to string and then JSON\n                                    arguments_str = json.dumps(str(parsed[\"arguments\"]))\n                                # Add it to our function_calls state\n                                state.function_calls[0] = ResponseFunctionToolCall(\n                                    id=FAKE_RESPONSES_ID,\n                                    arguments=arguments_str,\n                                    name=parsed[\"name\"],\n                                    type=\"function_call\",\n                                    call_id=tool_call_id[:40],\n                                )\n\n                                # Display the tool call in CLI\n                                try:\n                                    # First, finish any existing streaming context if it exists\n                                    if streaming_context:\n                                        try:\n                                            finish_agent_streaming(streaming_context, None)\n                                            streaming_context = None\n                                        except Exception:\n                                            pass\n\n                                    # Create a message-like object to display the function call\n                                    tool_msg = type(\n                                        \"ToolCallWrapper\",\n                                        (),\n                                        {\n                                            \"content\": None,\n                                            \"tool_calls\": [\n                                                type(\n                                                    \"ToolCallDetail\",\n                                                    (),\n                                                    {\n                                                        \"function\": type(\n                                                            \"FunctionDetail\",\n                                                            (),\n                                                            {\n                                                                \"name\": parsed[\"name\"],\n                                                                \"arguments\": arguments_str,\n                                                            },\n                                                        ),\n                                                        \"id\": tool_call_id[:40],\n                                                        \"type\": \"function\",\n                                                    },\n                                                )\n                                            ],\n                                        },\n                                    )\n\n                                    # Print the tool call using the CLI utility\n                                    cli_print_agent_messages(\n                                        agent_name=getattr(self, \"agent_name\", \"Agent\"),\n                                        message=tool_msg,\n                                        counter=getattr(self, \"interaction_counter\", 0),\n                                        model=str(self.model),\n                                        debug=False,\n                                        interaction_input_tokens=estimated_input_tokens,\n                                        interaction_output_tokens=estimated_output_tokens,\n                                        interaction_reasoning_tokens=0,  # Not available for Ollama\n                                        total_input_tokens=getattr(self, \"total_input_tokens\", 0)\n                                        + estimated_input_tokens,\n                                        total_output_tokens=getattr(self, \"total_output_tokens\", 0)\n                                        + estimated_output_tokens,\n                                        total_reasoning_tokens=getattr(\n                                            self, \"total_reasoning_tokens\", 0\n                                        ),\n                                        interaction_cost=None,\n                                        total_cost=None,\n                                        tool_output=None,  # Will be shown once the tool is executed\n                                        suppress_empty=True,  # Suppress empty panels during streaming\n                                    )\n\n                                    # Set flag to suppress final output to avoid duplication\n                                    self.suppress_final_output = True\n                                except Exception as e:\n                                    # Silently log the error - don't disrupt the flow\n                                    logger.debug(f\"Display error (non-critical): {e}\")\n\n                                # Add to message history\n                                tool_call_msg = {\n                                    \"role\": \"assistant\",\n                                    \"content\": None,\n                                    \"tool_calls\": [\n                                        {\n                                            \"id\": tool_call_id,\n                                            \"type\": \"function\",\n                                            \"function\": {\n                                                \"name\": parsed[\"name\"],\n                                                \"arguments\": arguments_str,\n                                            },\n                                        }\n                                    ],\n                                }\n\n                                streamed_tool_calls.append(tool_call_msg)\n                                # Don't add to message history here - wait for tool output\n                                # to add both tool call and response atomically\n\n                                logger.debug(\n                                    f\"Added function call: {parsed['name']} with args: {arguments_str}\"\n                                )\n                    except Exception:\n                        pass\n\n                function_call_starting_index = 0\n                if state.text_content_index_and_output:\n                    function_call_starting_index += 1\n                    # Send end event for this content part\n                    yield ResponseContentPartDoneEvent(\n                        content_index=state.text_content_index_and_output[0],\n                        item_id=FAKE_RESPONSES_ID,\n                        output_index=0,\n                        part=state.text_content_index_and_output[1],\n                        type=\"response.content_part.done\",\n                    )\n\n                if state.refusal_content_index_and_output:\n                    function_call_starting_index += 1\n                    # Send end event for this content part\n                    yield ResponseContentPartDoneEvent(\n                        content_index=state.refusal_content_index_and_output[0],\n                        item_id=FAKE_RESPONSES_ID,\n                        output_index=0,\n                        part=state.refusal_content_index_and_output[1],\n                        type=\"response.content_part.done\",\n                    )\n\n                # Actually send events for the function calls\n                for function_call in state.function_calls.values():\n                    # First, a ResponseOutputItemAdded for the function call\n                    yield ResponseOutputItemAddedEvent(\n                        item=ResponseFunctionToolCall(\n                            id=FAKE_RESPONSES_ID,\n                            call_id=function_call.call_id[:40],\n                            arguments=function_call.arguments,\n                            name=function_call.name,\n                            type=\"function_call\",\n                        ),\n                        output_index=function_call_starting_index,\n                        type=\"response.output_item.added\",\n                    )\n                    # Then, yield the args\n                    yield ResponseFunctionCallArgumentsDeltaEvent(\n                        delta=function_call.arguments,\n                        item_id=FAKE_RESPONSES_ID,\n                        output_index=function_call_starting_index,\n                        type=\"response.function_call_arguments.delta\",\n                    )\n                    # Finally, the ResponseOutputItemDone\n                    yield ResponseOutputItemDoneEvent(\n                        item=ResponseFunctionToolCall(\n                            id=FAKE_RESPONSES_ID,\n                            call_id=function_call.call_id[:40],\n                            arguments=function_call.arguments,\n                            name=function_call.name,\n                            type=\"function_call\",\n                        ),\n                        output_index=function_call_starting_index,\n                        type=\"response.output_item.done\",\n                    )\n\n                # Finally, send the Response completed event\n                outputs: list[ResponseOutputItem] = []\n                if state.text_content_index_and_output or state.refusal_content_index_and_output:\n                    assistant_msg = ResponseOutputMessage(\n                        id=FAKE_RESPONSES_ID,\n                        content=[],\n                        role=\"assistant\",\n                        type=\"message\",\n                        status=\"completed\",\n                    )\n                    if state.text_content_index_and_output:\n                        assistant_msg.content.append(state.text_content_index_and_output[1])\n                    if state.refusal_content_index_and_output:\n                        assistant_msg.content.append(state.refusal_content_index_and_output[1])\n                    outputs.append(assistant_msg)\n\n                    # send a ResponseOutputItemDone for the assistant message\n                    yield ResponseOutputItemDoneEvent(\n                        item=assistant_msg,\n                        output_index=0,\n                        type=\"response.output_item.done\",\n                    )\n\n                for function_call in state.function_calls.values():\n                    outputs.append(function_call)\n\n                final_response = response.model_copy()\n                final_response.output = outputs\n\n                # Get final token counts using consistent method\n                input_tokens = estimated_input_tokens\n                output_tokens = estimated_output_tokens\n\n                # Use API token counts if available and reasonable\n                if usage and hasattr(usage, \"prompt_tokens\") and usage.prompt_tokens &gt; 0:\n                    input_tokens = usage.prompt_tokens\n                if usage and hasattr(usage, \"completion_tokens\") and usage.completion_tokens &gt; 0:\n                    output_tokens = usage.completion_tokens\n\n                # Create a proper usage object with our token counts\n                final_response.usage = CustomResponseUsage(\n                    input_tokens=input_tokens,\n                    output_tokens=output_tokens,\n                    total_tokens=input_tokens + output_tokens,\n                    output_tokens_details=OutputTokensDetails(\n                        reasoning_tokens=usage.completion_tokens_details.reasoning_tokens\n                        if usage\n                        and hasattr(usage, \"completion_tokens_details\")\n                        and usage.completion_tokens_details\n                        and hasattr(usage.completion_tokens_details, \"reasoning_tokens\")\n                        and usage.completion_tokens_details.reasoning_tokens\n                        else 0\n                    ),\n                    input_tokens_details={\n                        \"prompt_tokens\": input_tokens,\n                        \"cached_tokens\": usage.prompt_tokens_details.cached_tokens\n                        if usage\n                        and hasattr(usage, \"prompt_tokens_details\")\n                        and usage.prompt_tokens_details\n                        and hasattr(usage.prompt_tokens_details, \"cached_tokens\")\n                        and usage.prompt_tokens_details.cached_tokens\n                        else 0,\n                    },\n                )\n\n                yield ResponseCompletedEvent(\n                    response=final_response,\n                    type=\"response.completed\",\n                )\n\n                # Update token totals for CLI display\n                if final_response.usage:\n                    # Always update the total counters with the best available counts\n                    self.total_input_tokens += final_response.usage.input_tokens\n                    self.total_output_tokens += final_response.usage.output_tokens\n                    if final_response.usage.output_tokens_details and hasattr(\n                        final_response.usage.output_tokens_details, \"reasoning_tokens\"\n                    ):\n                        self.total_reasoning_tokens += (\n                            final_response.usage.output_tokens_details.reasoning_tokens\n                        )\n\n                # Prepare final statistics for display\n                interaction_input = final_response.usage.input_tokens if final_response.usage else 0\n                interaction_output = (\n                    final_response.usage.output_tokens if final_response.usage else 0\n                )\n                total_input = getattr(self, \"total_input_tokens\", 0)\n                total_output = getattr(self, \"total_output_tokens\", 0)\n\n                # Calculate costs for this model\n                model_name = str(self.model)\n                interaction_cost = calculate_model_cost(\n                    model_name, interaction_input, interaction_output\n                )\n                # Get the previous total cost and add this interaction's cost\n                # Don't recalculate cost for all tokens - that causes double-counting\n                previous_total = getattr(COST_TRACKER, \"session_total_cost\", 0.0)\n                total_cost = previous_total + interaction_cost\n\n                # If interaction cost is zero, this is a free model\n                if interaction_cost == 0:\n                    # For free models, keep existing total and ensure cost tracking system knows it's free\n                    total_cost = getattr(COST_TRACKER, \"session_total_cost\", 0.0)\n                    if hasattr(COST_TRACKER, \"reset_cost_for_local_model\"):\n                        COST_TRACKER.reset_cost_for_local_model(model_name)\n\n                # Explicit conversion to float with fallback to ensure they're never None or 0\n                interaction_cost = float(interaction_cost if interaction_cost is not None else 0.0)\n                total_cost = float(total_cost if total_cost is not None else 0.0)\n\n                # Process costs through COST_TRACKER only once per interaction\n                if interaction_cost &gt; 0.0:\n                    # Check price limit before processing the new cost\n                    if hasattr(COST_TRACKER, \"check_price_limit\"):\n                        try:\n                            COST_TRACKER.check_price_limit(interaction_cost)\n                        except Exception:\n                            # Ensure streaming context is cleaned up\n                            if streaming_context:\n                                try:\n                                    finish_agent_streaming(streaming_context, None)\n                                except Exception:\n                                    pass\n                            # Stop timers and re-raise the exception\n                            stop_active_timer()\n                            start_idle_timer()\n                            raise\n\n                    # Process the interaction cost (updates internal tracking)\n                    COST_TRACKER.process_interaction_cost(\n                        model_name,\n                        interaction_input,\n                        interaction_output,\n                        final_response.usage.output_tokens_details.reasoning_tokens\n                        if final_response.usage\n                        and final_response.usage.output_tokens_details\n                        and hasattr(final_response.usage.output_tokens_details, \"reasoning_tokens\")\n                        else 0,\n                        interaction_cost\n                    )\n\n                    # Process the total cost (updates session total correctly)\n                    total_cost = COST_TRACKER.process_total_cost(\n                        model_name,\n                        total_input,\n                        total_output,\n                        getattr(self, \"total_reasoning_tokens\", 0),\n                        None  # Let it calculate from tokens\n                    )\n\n                    # Track usage globally\n                    GLOBAL_USAGE_TRACKER.track_usage(\n                        model_name=model_name,\n                        input_tokens=interaction_input,\n                        output_tokens=interaction_output,\n                        cost=interaction_cost,\n                        agent_name=self.agent_name\n                    )\n                else:\n                    # For free models, still track token usage\n                    GLOBAL_USAGE_TRACKER.track_usage(\n                        model_name=model_name,\n                        input_tokens=interaction_input,\n                        output_tokens=interaction_output,\n                        cost=0.0,\n                        agent_name=self.agent_name\n                    )\n\n                # Store the total cost for future recording\n                self.total_cost = total_cost\n\n                # Create final stats with explicit type conversion for all values\n                final_stats = {\n                    \"interaction_input_tokens\": int(interaction_input),\n                    \"interaction_output_tokens\": int(interaction_output),\n                    \"interaction_reasoning_tokens\": int(\n                        final_response.usage.output_tokens_details.reasoning_tokens\n                        if final_response.usage\n                        and final_response.usage.output_tokens_details\n                        and hasattr(final_response.usage.output_tokens_details, \"reasoning_tokens\")\n                        else 0\n                    ),\n                    \"total_input_tokens\": int(total_input),\n                    \"total_output_tokens\": int(total_output),\n                    \"total_reasoning_tokens\": int(getattr(self, \"total_reasoning_tokens\", 0)),\n                    \"interaction_cost\": float(interaction_cost),\n                    \"total_cost\": float(total_cost),\n                }\n\n                # At the end of streaming, finish the streaming context if we were using it\n                if streaming_context:\n                    # Create a direct copy of the costs to ensure they remain as floats\n                    direct_stats = final_stats.copy()\n                    direct_stats[\"interaction_cost\"] = float(interaction_cost)\n                    direct_stats[\"total_cost\"] = float(total_cost)\n                    # Use the direct copy with guaranteed float costs\n                    finish_agent_streaming(streaming_context, direct_stats)\n                    streaming_context = None\n\n                    # Removed extra newline after streaming completes to avoid blank lines\n                    pass\n\n                # Finish Claude thinking display if it was active\n                if thinking_context:\n                    from cai.util import finish_claude_thinking_display\n\n                    finish_claude_thinking_display(thinking_context)\n\n                    # Note: Content is now displayed during streaming, no need to show it again here\n\n                if tracing.include_data():\n                    span_generation.span_data.output = [final_response.model_dump()]\n\n                span_generation.span_data.usage = {\n                    \"input_tokens\": input_tokens,\n                    \"output_tokens\": output_tokens,\n                }\n\n                # --- DEFERRED: Tool calls are no longer added immediately ---\n                # Store pending tool calls but don't add to history yet\n                if not hasattr(self, \"_pending_tool_calls\"):\n                    self._pending_tool_calls = {}\n\n                for tool_call_msg in streamed_tool_calls:\n                    # Extract tool call ID from the message\n                    if tool_call_msg.get(\"tool_calls\"):\n                        for tc in tool_call_msg[\"tool_calls\"]:\n                            self._pending_tool_calls[tc[\"id\"]] = tool_call_msg\n\n                # Log the assistant tool call message if any tool calls were collected\n                if streamed_tool_calls:\n                    tool_calls_list = []\n                    for tool_call_msg in streamed_tool_calls:\n                        for tool_call in tool_call_msg.get(\"tool_calls\", []):\n                            tool_calls_list.append(tool_call)\n                    self.logger.log_assistant_message(None, tool_calls_list)\n\n                # Always log text content if it exists, regardless of suppress_final_output\n                # The suppress_final_output flag is only for preventing duplicate tool call display\n                if (\n                    state.text_content_index_and_output\n                    and state.text_content_index_and_output[1].text\n                ):\n                    asst_msg = {\n                        \"role\": \"assistant\",\n                        \"content\": state.text_content_index_and_output[1].text,\n                    }\n                    self.add_to_message_history(asst_msg)\n                    # Log the assistant message\n                    self.logger.log_assistant_message(state.text_content_index_and_output[1].text)\n\n                # Reset the suppress flag for future requests\n                self.suppress_final_output = False\n\n                # Log the complete response\n                self.logger.rec_training_data(\n                    {\n                        \"model\": str(self.model),\n                        \"messages\": converted_messages,\n                        \"stream\": True,\n                        \"tools\": [t.params_json_schema for t in tools] if tools else [],\n                        \"tool_choice\": model_settings.tool_choice,\n                    },\n                    final_response,\n                    self.total_cost,\n                    self.agent_name,\n                )\n\n                # Stop active timer and start idle timer when streaming is complete\n                stop_active_timer()\n                start_idle_timer()\n\n        except KeyboardInterrupt:\n            # Handle keyboard interruption specifically\n            stream_interrupted = True\n\n            # Ensure message history consistency by adding synthetic tool results\n            # for any tool calls that were added but don't have corresponding results\n            try:\n                # Find all tool calls in recent assistant messages\n                orphaned_tool_calls = []\n                for msg in reversed(self.message_history[-10:]):  # Check recent messages\n                    if msg.get(\"role\") == \"assistant\" and msg.get(\"tool_calls\"):\n                        for tool_call in msg[\"tool_calls\"]:\n                            call_id = tool_call.get(\"id\")\n                            if call_id:\n                                # Check if this tool call has a corresponding tool result\n                                has_result = any(\n                                    m.get(\"role\") == \"tool\" and m.get(\"tool_call_id\") == call_id\n                                    for m in self.message_history\n                                )\n                                if not has_result:\n                                    orphaned_tool_calls.append((call_id, tool_call))\n\n                # Add synthetic tool results for orphaned tool calls\n                for call_id, tool_call in orphaned_tool_calls:\n                    tool_response_msg = {\n                        \"role\": \"tool\",\n                        \"tool_call_id\": call_id,\n                        \"content\": \"Tool execution interrupted\"\n                    }\n                    self.add_to_message_history(tool_response_msg)\n\n            except Exception as cleanup_error:\n                # Don't let cleanup errors mask the original KeyboardInterrupt\n                logger.debug(f\"Error during interrupt cleanup: {cleanup_error}\")\n\n            # Make sure to clean up and re-raise\n            raise\n\n        except Exception as e:\n            # Handle other exceptions\n            logger.error(f\"Error in stream_response: {e}\")\n            raise\n\n        finally:\n            # Always clean up resources\n            # This block executes whether the try block succeeds, fails, or is interrupted\n\n            # Clean up streaming context\n            if streaming_context:\n                try:\n                    # Check if we need to force stop the streaming panel\n                    if streaming_context.get(\"is_started\", False) and streaming_context.get(\"live\"):\n                        streaming_context[\"live\"].stop()\n\n                    # Remove from active streaming contexts\n                    if hasattr(create_agent_streaming_context, \"_active_streaming\"):\n                        for key, value in list(\n                            create_agent_streaming_context._active_streaming.items()\n                        ):\n                            if value is streaming_context:\n                                del create_agent_streaming_context._active_streaming[key]\n                                break\n                except Exception as cleanup_error:\n                    logger.debug(f\"Error cleaning up streaming context: {cleanup_error}\")\n\n            # Clean up thinking context\n            if thinking_context:\n                try:\n                    # Force finish the thinking display\n                    from cai.util import finish_claude_thinking_display\n\n                    finish_claude_thinking_display(thinking_context)\n                except Exception as cleanup_error:\n                    logger.debug(f\"Error cleaning up thinking context: {cleanup_error}\")\n\n            # Clean up any live streaming panels\n            if hasattr(cli_print_tool_output, \"_streaming_sessions\"):\n                # Find any sessions related to this stream\n                for call_id in list(cli_print_tool_output._streaming_sessions.keys()):\n                    if call_id in _LIVE_STREAMING_PANELS:\n                        try:\n                            live = _LIVE_STREAMING_PANELS[call_id]\n                            live.stop()\n                            del _LIVE_STREAMING_PANELS[call_id]\n                        except Exception:\n                            pass\n\n            # Stop active timer and start idle timer\n            try:\n                stop_active_timer()\n                start_idle_timer()\n            except Exception:\n                pass\n\n            # Stream cleanup completed\n\n    @overload\n    async def _fetch_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        span: Span[GenerationSpanData],\n        tracing: ModelTracing,\n        stream: Literal[True],\n    ) -&gt; tuple[Response, AsyncStream[ChatCompletionChunk]]: ...\n\n    @overload\n    async def _fetch_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        span: Span[GenerationSpanData],\n        tracing: ModelTracing,\n        stream: Literal[False],\n    ) -&gt; ChatCompletion: ...\n\n    async def _fetch_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        span: Span[GenerationSpanData],\n        tracing: ModelTracing,\n        stream: bool = False,\n    ) -&gt; ChatCompletion | tuple[Response, AsyncStream[ChatCompletionChunk]]:\n        # start by re-fetching self.is_ollama\n        self.is_ollama = os.getenv(\"OLLAMA\") is not None and os.getenv(\"OLLAMA\").lower() == \"true\"\n\n        # IMPORTANT: Include existing message history for context\n        converted_messages = []\n\n        # First, add all existing messages from history\n        if self.message_history:\n            for msg in self.message_history:\n                msg_copy = msg.copy()  # Use copy to avoid modifying original\n                # Remove any existing cache_control to avoid exceeding the 4-block limit\n                if \"cache_control\" in msg_copy:\n                    del msg_copy[\"cache_control\"]\n                converted_messages.append(msg_copy)\n\n        # Then convert and add the new input\n        new_messages = self._converter.items_to_messages(input, model_instance=self)\n        converted_messages.extend(new_messages)\n\n        if system_instructions:\n            # Check if we already have a system message\n            has_system = any(msg.get(\"role\") == \"system\" for msg in converted_messages)\n            if not has_system:\n                converted_messages.insert(\n                    0,\n                    {\n                        \"content\": system_instructions,\n                        \"role\": \"system\",\n                    },\n                )\n\n        # Add support for prompt caching for claude (not automatically applied)\n        # Gemini supports it too\n        # https://www.anthropic.com/news/token-saving-updates\n        # Maximize cache efficiency by using up to 4 cache_control blocks\n        if (str(self.model).startswith(\"claude\") or \"gemini\" in str(self.model)) and len(\n            converted_messages\n        ) &gt; 0:\n            # Strategy: Cache the most valuable messages for maximum savings\n            # 1. System message (always first priority)\n            # 2. Long user messages (high token count)\n            # 3. Assistant messages with tool calls (complex context)\n            # 4. Recent context (last message)\n\n            cache_candidates = []\n\n            # Always cache system message if present\n            for i, msg in enumerate(converted_messages):\n                if msg.get(\"role\") == \"system\":\n                    cache_candidates.append((i, len(str(msg.get(\"content\", \"\"))), \"system\"))\n                    break\n\n            # Find long user messages and assistant messages with tool calls\n            for i, msg in enumerate(converted_messages):\n                content_len = len(str(msg.get(\"content\", \"\")))\n                role = msg.get(\"role\")\n\n                if role == \"user\" and content_len &gt; 500:  # Long user messages\n                    cache_candidates.append((i, content_len, \"user\"))\n                elif role == \"assistant\" and msg.get(\"tool_calls\"):  # Tool calls\n                    cache_candidates.append(\n                        (i, content_len + 200, \"assistant_tools\")\n                    )  # Bonus for tool calls\n\n            # Always consider the last message for recent context\n            if len(converted_messages) &gt; 1:\n                last_idx = len(converted_messages) - 1\n                last_msg = converted_messages[last_idx]\n                last_content_len = len(str(last_msg.get(\"content\", \"\")))\n                cache_candidates.append((last_idx, last_content_len, \"recent\"))\n\n            # Sort by value (content length) and select top 4 unique indices\n            cache_candidates.sort(key=lambda x: x[1], reverse=True)\n            selected_indices = []\n            for idx, _, msg_type in cache_candidates:\n                if idx not in selected_indices:\n                    selected_indices.append(idx)\n                    if len(selected_indices) &gt;= 4:  # Max 4 cache blocks\n                        break\n\n            # Apply cache_control to selected messages\n            for idx in selected_indices:\n                msg_copy = converted_messages[idx].copy()\n                msg_copy[\"cache_control\"] = {\"type\": \"ephemeral\"}\n                converted_messages[idx] = msg_copy\n        if tracing.include_data():\n            span.span_data.input = converted_messages\n\n        # IMPORTANT: Always sanitize the message list to prevent tool call errors\n        # This is critical to fix common errors with tool/assistant sequences\n        try:\n            from cai.util import fix_message_list\n\n            prev_length = len(converted_messages)\n            converted_messages = fix_message_list(converted_messages)\n            new_length = len(converted_messages)\n\n            # Log if the message list was changed significantly\n            if new_length != prev_length:\n                logger.debug(f\"Message list was fixed: {prev_length} -&gt; {new_length} messages\")\n        except Exception:\n            pass\n\n        parallel_tool_calls = (\n            True if model_settings.parallel_tool_calls and tools and len(tools) &gt; 0 else NOT_GIVEN\n        )\n        tool_choice = self._converter.convert_tool_choice(model_settings.tool_choice)\n        response_format = self._converter.convert_response_format(output_schema)\n        converted_tools = [ToolConverter.to_openai(tool) for tool in tools] if tools else []\n\n        for handoff in handoffs:\n            converted_tools.append(ToolConverter.convert_handoff_tool(handoff))\n\n        if _debug.DONT_LOG_MODEL_DATA:\n            logger.debug(\"Calling LLM\")\n        else:\n            logger.debug(\n                f\"{json.dumps(converted_messages, indent=2)}\\n\"\n                f\"Tools:\\n{json.dumps(converted_tools, indent=2)}\\n\"\n                f\"Stream: {stream}\\n\"\n                f\"Tool choice: {tool_choice}\\n\"\n                f\"Response format: {response_format}\\n\"\n                f\"Using OLLAMA: {self.is_ollama}\\n\"\n            )\n\n        # Use NOT_GIVEN for store if not explicitly set to avoid compatibility issues\n        store = self._non_null_or_not_given(model_settings.store)\n\n        # Check if we should use the agent's model instead of self.model\n        # This prioritizes the model from Agent when available\n        agent_model = None\n        if hasattr(model_settings, \"agent_model\") and model_settings.agent_model:\n            agent_model = model_settings.agent_model\n            logger.debug(f\"Using agent model: {agent_model} instead of {self.model}\")\n\n        # Prepare kwargs for the API call\n        kwargs = {\n            \"model\": agent_model if agent_model else self.model,\n            \"messages\": converted_messages,\n            \"tools\": converted_tools or NOT_GIVEN,\n            \"temperature\": self._non_null_or_not_given(model_settings.temperature),\n            \"top_p\": self._non_null_or_not_given(model_settings.top_p),\n            \"frequency_penalty\": self._non_null_or_not_given(model_settings.frequency_penalty),\n            \"presence_penalty\": self._non_null_or_not_given(model_settings.presence_penalty),\n            \"max_tokens\": self._non_null_or_not_given(model_settings.max_tokens),\n            \"tool_choice\": tool_choice,\n            \"response_format\": response_format,\n            \"parallel_tool_calls\": parallel_tool_calls,\n            \"stream\": stream,\n            \"stream_options\": {\"include_usage\": True} if stream else NOT_GIVEN,\n            \"store\": store,\n            \"extra_headers\": _HEADERS,\n        }\n\n        # Determine provider based on model string\n        model_str = str(kwargs[\"model\"]).lower()\n\n        if \"alias\" in model_str:\n            kwargs[\"api_base\"] = \"https://api.aliasrobotics.com:666/\"\n            kwargs[\"custom_llm_provider\"] = \"openai\"\n            kwargs[\"api_key\"] = os.getenv(\"ALIAS_API_KEY\", \"sk-alias-1234567890\")\n        elif \"/\" in model_str:\n            # Handle provider/model format\n            provider = model_str.split(\"/\")[0]\n\n            # Apply provider-specific configurations\n            if provider == \"deepseek\":\n                litellm.drop_params = True\n                kwargs.pop(\"parallel_tool_calls\", None)\n                kwargs.pop(\"store\", None)  # DeepSeek doesn't support store parameter\n                # Remove tool_choice if no tools are specified\n                if not converted_tools:\n                    kwargs.pop(\"tool_choice\", None)\n\n                # Add reasoning support for DeepSeek\n                # DeepSeek supports reasoning_effort parameter\n                if hasattr(model_settings, \"reasoning_effort\") and model_settings.reasoning_effort:\n                    kwargs[\"reasoning_effort\"] = model_settings.reasoning_effort\n                else:\n                    # Default to \"low\" reasoning effort if model supports it\n                    kwargs[\"reasoning_effort\"] = \"low\"\n            elif provider == \"claude\" or \"claude\" in model_str:\n                litellm.drop_params = True\n                kwargs.pop(\"store\", None)\n                kwargs.pop(\n                    \"parallel_tool_calls\", None\n                )  # Claude doesn't support parallel tool calls\n                # Remove tool_choice if no tools are specified\n                if not converted_tools:\n                    kwargs.pop(\"tool_choice\", None)\n\n                # Add extended reasoning support for Claude models\n                # Supports Claude 3.7, Claude 4, and any model with \"thinking\" in the name\n                has_reasoning_capability = (\n                    \"thinking\" in model_str\n                    or\n                    # Claude 4 models support reasoning\n                    \"-4-\" in model_str\n                    or \"sonnet-4\" in model_str\n                    or \"haiku-4\" in model_str\n                    or \"opus-4\" in model_str\n                    or \"3.7\" in model_str\n                )\n\n                if has_reasoning_capability:\n                    # Clean the model name by removing \"thinking\" before sending to API\n                    clean_model = kwargs[\"model\"]\n                    if isinstance(clean_model, str) and \"thinking\" in clean_model.lower():\n                        # Remove \"thinking\" and clean up any extra spaces/separators\n                        clean_model = re.sub(\n                            r\"[_-]?thinking[_-]?\", \"\", clean_model, flags=re.IGNORECASE\n                        )\n                        clean_model = re.sub(\n                            r\"[-_]{2,}\", \"-\", clean_model\n                        )  # Clean up multiple separators\n                        clean_model = clean_model.strip(\n                            \"-_\"\n                        )  # Clean up leading/trailing separators\n                        kwargs[\"model\"] = clean_model\n\n                    # Check if message history is compatible with reasoning\n                    messages = kwargs.get(\"messages\", [])\n                    is_compatible = _check_reasoning_compatibility(messages)\n\n                    if is_compatible:\n                        kwargs[\"reasoning_effort\"] = (\n                            \"low\"  # Use reasoning_effort instead of thinking\n                        )\n            elif provider == \"gemini\":\n                kwargs.pop(\"parallel_tool_calls\", None)\n                # Add any specific gemini settings if needed\n        else:\n            # Handle models without provider prefix\n            if \"claude\" in model_str or \"anthropic\" in model_str:\n                litellm.drop_params = True\n                # Remove parameters that Anthropic doesn't support\n                kwargs.pop(\"store\", None)\n                kwargs.pop(\"parallel_tool_calls\", None)\n                # Remove tool_choice if no tools are specified\n                if not converted_tools:\n                    kwargs.pop(\"tool_choice\", None)\n\n                # Add extended reasoning support for Claude models\n                # Supports Claude 3.7, Claude 4, and any model with \"thinking\" in the name\n                has_reasoning_capability = \"thinking\" in model_str\n\n                if has_reasoning_capability:\n                    # Clean the model name by removing \"thinking\" before sending to API\n                    clean_model = kwargs[\"model\"]\n                    if isinstance(clean_model, str) and \"thinking\" in clean_model.lower():\n                        # Remove \"thinking\" and clean up any extra spaces/separators\n                        clean_model = re.sub(\n                            r\"[_-]?thinking[_-]?\", \"\", clean_model, flags=re.IGNORECASE\n                        )\n                        clean_model = re.sub(\n                            r\"[-_]{2,}\", \"-\", clean_model\n                        )  # Clean up multiple separators\n                        clean_model = clean_model.strip(\n                            \"-_\"\n                        )  # Clean up leading/trailing separators\n                        kwargs[\"model\"] = clean_model\n\n                    # Check if message history is compatible with reasoning\n                    messages = kwargs.get(\"messages\", [])\n                    is_compatible = _check_reasoning_compatibility(messages)\n\n                    if is_compatible:\n                        kwargs[\"reasoning_effort\"] = (\n                            \"low\"  # Use reasoning_effort instead of thinking\n                        )\n            elif \"gemini\" in model_str:\n                kwargs.pop(\"parallel_tool_calls\", None)\n            elif \"qwen\" in model_str or \":\" in model_str:\n                # Handle Ollama-served models with custom formats (e.g., alias0)\n                # These typically need the Ollama provider\n                litellm.drop_params = True\n                kwargs.pop(\"parallel_tool_calls\", None)\n                kwargs.pop(\"store\", None)  # Ollama doesn't support store parameter\n                # These models may not support certain parameters\n                if not converted_tools:\n                    kwargs.pop(\"tool_choice\", None)\n                # Don't add custom_llm_provider here to avoid duplication with Ollama provider\n                if self.is_ollama:\n                    # Clean kwargs for ollama to avoid parameter conflicts\n                    for param in [\"custom_llm_provider\"]:\n                        kwargs.pop(param, None)\n            elif any(x in model_str for x in [\"o1\", \"o3\", \"o4\"]):\n                # Handle OpenAI reasoning models (o1, o3, o4)\n                kwargs.pop(\"parallel_tool_calls\", None)\n                # Add reasoning effort if provided\n                if hasattr(model_settings, \"reasoning_effort\"):\n                    kwargs[\"reasoning_effort\"] = model_settings.reasoning_effort\n\n        # Filter out NotGiven values to avoid JSON serialization issues\n        filtered_kwargs = {}\n        for key, value in kwargs.items():\n            if value is not NOT_GIVEN:\n                filtered_kwargs[key] = value\n        kwargs = filtered_kwargs\n\n        # Add retry logic for rate limits\n        max_retries = 3\n        retry_count = 0\n\n        while retry_count &lt; max_retries:\n            try:\n                if self.is_ollama:\n                    return await self._fetch_response_litellm_ollama(\n                        kwargs, model_settings, tool_choice, stream, parallel_tool_calls\n                    )\n                else:\n                    return await self._fetch_response_litellm_openai(\n                        kwargs, model_settings, tool_choice, stream, parallel_tool_calls\n                    )\n            except litellm.exceptions.RateLimitError as e:\n                retry_count += 1\n                if retry_count &gt;= max_retries:\n                    print(f\"\\n\u274c Rate limit exceeded after {max_retries} retries\")\n                    raise\n\n                print(f\"\\n\u23f3 Rate limit reached - Too many requests (attempt {retry_count}/{max_retries})\")\n                # Try to extract retry delay from error response or use default\n                retry_delay = 60  # Default delay in seconds\n                try:\n                    # Extract the JSON part from the error message\n                    json_str = str(e.message).split(\"VertexAIException - \")[-1]\n                    error_details = json.loads(json_str)\n\n                    retry_info = next(\n                        (\n                            detail\n                            for detail in error_details.get(\"error\", {}).get(\"details\", [])\n                            if detail.get(\"@type\") == \"type.googleapis.com/google.rpc.RetryInfo\"\n                        ),\n                        None,\n                    )\n                    if retry_info and \"retryDelay\" in retry_info:\n                        retry_delay = int(retry_info[\"retryDelay\"].rstrip(\"s\"))\n                except Exception:\n                    # Try other common formats\n                    import re\n                    error_str = str(e)\n\n                    # Look for \"Retry-After\" header or similar patterns\n                    retry_match = re.search(r'retry[_-]?after[:\\s]+(\\d+)', error_str, re.IGNORECASE)\n                    if retry_match:\n                        retry_delay = int(retry_match.group(1))\n                    # Look for \"wait X seconds\" patterns\n                    elif wait_match := re.search(r'wait\\s+(\\d+)\\s+seconds?', error_str, re.IGNORECASE):\n                        retry_delay = int(wait_match.group(1))\n                    # Look for explicit retry delay mentions\n                    elif delay_match := re.search(r'retry\\s+in\\s+(\\d+)\\s+seconds?', error_str, re.IGNORECASE):\n                        retry_delay = int(delay_match.group(1))\n\n                # Use exponential backoff with jitter if no explicit delay found\n                if retry_count &gt; 1 and retry_delay == 60:\n                    import random\n                    retry_delay = min(300, retry_delay * retry_count) + random.randint(0, 10)\n\n                print(f\"\ud83d\udca4 Waiting {retry_delay}s before retry... (Rate limit protection)\")\n                await asyncio.sleep(retry_delay)  # Use async sleep instead of time.sleep\n                continue  # Retry the request\n\n            except litellm.exceptions.BadRequestError as e:\n                error_msg = str(e)\n\n                # Handle Claude reasoning/thinking compatibility errors\n                if (\n                    \"Expected `thinking` or `redacted_thinking`, but found `text`\" in error_msg\n                    or \"When `thinking` is enabled, a final `assistant` message must start with a thinking block\"\n                    in error_msg\n                ):\n                    # Retry without reasoning_effort\n                    retry_kwargs = kwargs.copy()\n                    retry_kwargs.pop(\"reasoning_effort\", None)\n\n                    try:\n                        if stream:\n                            response = Response(\n                                id=FAKE_RESPONSES_ID,\n                                created_at=time.time(),\n                                model=self.model,\n                                object=\"response\",\n                                output=[],\n                                tool_choice=\"auto\"\n                                if tool_choice is None or tool_choice == NOT_GIVEN\n                                else cast(Literal[\"auto\", \"required\", \"none\"], tool_choice),\n                                top_p=model_settings.top_p,\n                                temperature=model_settings.temperature,\n                                tools=[],\n                                parallel_tool_calls=parallel_tool_calls or False,\n                            )\n                            stream_obj = await litellm.acompletion(**retry_kwargs)\n                            return response, stream_obj\n                        else:\n                            ret = await litellm.acompletion(**retry_kwargs)\n                            return ret\n                    except Exception:\n                        # If retry also fails, raise the original error\n                        raise e\n\n                # print(color(\"BadRequestError encountered: \" + str(e), fg=\"yellow\"))\n                if \"LLM Provider NOT provided\" in str(e):\n                    model_str = str(self.model).lower()\n                    provider = None\n                    is_qwen = \"qwen\" in model_str or \":\" in model_str\n\n                    # Special handling for Qwen models\n                    if is_qwen:\n                        try:\n                            # Use the specialized Qwen approach first\n                            return await self._fetch_response_litellm_ollama(\n                                kwargs, model_settings, tool_choice, stream, parallel_tool_calls\n                            )\n                        except Exception as qwen_e:\n                            print(qwen_e)\n                            # If that fails, try our direct OpenAI approach\n                            qwen_params = kwargs.copy()\n                            qwen_params[\"api_base\"] = get_ollama_api_base()\n                            qwen_params[\"custom_llm_provider\"] = \"openai\"  # Use openai provider\n\n                            # Make sure tools are passed\n                            if \"tools\" in kwargs and kwargs[\"tools\"]:\n                                qwen_params[\"tools\"] = kwargs[\"tools\"]\n                            if \"tool_choice\" in kwargs and kwargs[\"tool_choice\"] is not NOT_GIVEN:\n                                qwen_params[\"tool_choice\"] = kwargs[\"tool_choice\"]\n\n                            try:\n                                if stream:\n                                    # Streaming case\n                                    response = Response(\n                                        id=FAKE_RESPONSES_ID,\n                                        created_at=time.time(),\n                                        model=self.model,\n                                        object=\"response\",\n                                        output=[],\n                                        tool_choice=\"auto\"\n                                        if tool_choice is None or tool_choice == NOT_GIVEN\n                                        else cast(Literal[\"auto\", \"required\", \"none\"], tool_choice),\n                                        top_p=model_settings.top_p,\n                                        temperature=model_settings.temperature,\n                                        tools=[],\n                                        parallel_tool_calls=parallel_tool_calls or False,\n                                    )\n                                    stream_obj = await litellm.acompletion(**qwen_params)\n                                    return response, stream_obj\n                                else:\n                                    # Non-streaming case\n                                    ret = await litellm.acompletion(**qwen_params)\n                                    return ret\n                            except Exception as direct_e:\n                                # All approaches failed, log and raise the original error\n                                print(\n                                    f\"All Qwen approaches failed. Original error: {str(e)}, Direct error: {str(direct_e)}\"\n                                )\n                                raise e\n\n                    # Try to detect provider from model string\n                    if \"/\" in model_str:\n                        provider = model_str.split(\"/\")[0]\n\n                    if provider:\n                        # Add provider-specific settings based on detected provider\n                        provider_kwargs = kwargs.copy()\n                        if provider == \"deepseek\":\n                            provider_kwargs[\"custom_llm_provider\"] = \"deepseek\"\n                            provider_kwargs.pop(\n                                \"store\", None\n                            )  # DeepSeek doesn't support store parameter\n                            provider_kwargs.pop(\n                                \"parallel_tool_calls\", None\n                            )  # DeepSeek doesn't support parallel tool calls\n\n                            # Add reasoning support for DeepSeek\n                            if (\n                                hasattr(model_settings, \"reasoning_effort\")\n                                and model_settings.reasoning_effort\n                            ):\n                                provider_kwargs[\"reasoning_effort\"] = model_settings.reasoning_effort\n                            else:\n                                # Default to \"low\" reasoning effort\n                                provider_kwargs[\"reasoning_effort\"] = \"low\"\n                        elif provider == \"claude\" or \"claude\" in model_str:\n                            provider_kwargs[\"custom_llm_provider\"] = \"anthropic\"\n                            provider_kwargs.pop(\"store\", None)  # Claude doesn't support store parameter\n                            provider_kwargs.pop(\n                                \"parallel_tool_calls\", None\n                            )  # Claude doesn't support parallel tool calls\n\n                            # Add extended reasoning support for Claude models\n                            if \"thinking\" in model_str:\n                                # Clean the model name by removing \"thinking\" before sending to API\n                                clean_model = provider_kwargs[\"model\"]\n                                if isinstance(clean_model, str) and \"thinking\" in clean_model.lower():\n                                    # Remove \"thinking\" and clean up any extra spaces/separators\n                                    clean_model = re.sub(\n                                        r\"[_-]?thinking[_-]?\", \"\", clean_model, flags=re.IGNORECASE\n                                    )\n                                    clean_model = re.sub(\n                                        r\"[-_]{2,}\", \"-\", clean_model\n                                    )  # Clean up multiple separators\n                                    clean_model = clean_model.strip(\n                                        \"-_\"\n                                    )  # Clean up leading/trailing separators\n                                    provider_kwargs[\"model\"] = clean_model\n\n                                # Check if message history is compatible with reasoning\n                                messages = provider_kwargs.get(\"messages\", [])\n                                is_compatible = _check_reasoning_compatibility(messages)\n\n                                if is_compatible:\n                                    provider_kwargs[\"reasoning_effort\"] = (\n                                        \"low\"  # Use reasoning_effort instead of thinking\n                                    )\n                        elif provider == \"gemini\":\n                            provider_kwargs[\"custom_llm_provider\"] = \"gemini\"\n                            provider_kwargs.pop(\"store\", None)  # Gemini doesn't support store parameter\n                            provider_kwargs.pop(\n                                \"parallel_tool_calls\", None\n                            )  # Gemini doesn't support parallel tool calls\n                        else:\n                            # For unknown providers, try ollama as fallback\n                            return await self._fetch_response_litellm_ollama(\n                                kwargs, model_settings, tool_choice, stream, parallel_tool_calls\n                            )\n\n                # Check for message sequence errors\n                if (\n                    \"An assistant message with 'tool_calls'\" in str(e)\n                    or \"`tool_use` blocks must be followed by a user message with `tool_result`\"\n                    in str(e)  # noqa: E501 # pylint: disable=C0301\n                    or \"`tool_use` ids were found without `tool_result` blocks immediately after\"\n                    in str(e)  # noqa: E501 # pylint: disable=C0301\n                    or \"An assistant message with 'tool_calls' must be followed by tool messages\"\n                    in str(e)\n                    or \"messages with role 'tool' must be a response to a preceeding message with 'tool_calls'\"\n                    in str(e)\n                ):\n                    print(\"\u26a0\ufe0f  Message sequence error - Tool calls and results are out of order\")\n\n                    # Use the pretty message history printer instead of the simple loop\n                    try:\n                        from cai.util import print_message_history\n\n                        print(\"\\n\ud83d\udccb Current message sequence:\")\n                        print_message_history(kwargs[\"messages\"], title=\"Message History\")\n                    except ImportError:\n                        # Fall back to simple printing if the function isn't available\n                        print(\"\\n\ud83d\udccb Current message sequence:\")\n                        for i, msg in enumerate(kwargs[\"messages\"]):\n                            role = msg.get(\"role\", \"unknown\")\n                            content_type = (\n                                \"text\"\n                                if isinstance(msg.get(\"content\"), str)\n                                else \"list\"\n                                if isinstance(msg.get(\"content\"), list)\n                                else \"None\"\n                                if msg.get(\"content\") is None\n                                else type(msg.get(\"content\")).__name__\n                            )\n                            tool_calls = \"with tool_calls\" if msg.get(\"tool_calls\") else \"\"\n                            tool_call_id = (\n                                f\", tool_call_id: {msg.get('tool_call_id')}\"\n                                if msg.get(\"tool_call_id\")\n                                else \"\"\n                            )\n\n                            print(\n                                f\"  [{i}] {role}{tool_call_id} (content: {content_type}) {tool_calls}\"\n                            )\n\n                    # NOTE: EDGE CASE: Report Agent CTRL C error\n                    #\n                    # This fix CTRL-C error when message list is incomplete\n                    # When a tool is not finished but the LLM generates a tool call\n                    try:\n                        from cai.util import fix_message_list\n\n                        print(\"\ud83d\udd27 Auto-fixing message sequence...\")\n                        fixed_messages = fix_message_list(kwargs[\"messages\"])\n\n                        # Show the fixed messages if they're different\n                        if fixed_messages != kwargs[\"messages\"]:\n                            try:\n                                from cai.util import print_message_history\n\n                                print_message_history(fixed_messages, title=\"Fixed Message Sequence\")\n                            except ImportError:\n                                print(\"\u2705 Message sequence fixed successfully\")\n\n                        kwargs[\"messages\"] = fixed_messages\n                    except Exception:\n                        pass\n\n                    return await self._fetch_response_litellm_openai(\n                        kwargs, model_settings, tool_choice, stream, parallel_tool_calls\n                    )\n\n                # this captures an error related to the fact\n                # that the messages list contains an empty\n                # content position\n                if \"expected a string, got null\" in str(e):\n                    print(\"\u26a0\ufe0f  Empty content detected - Filling with placeholder\")\n                    # Fix for null content in messages\n                    kwargs[\"messages\"] = [\n                        msg if msg.get(\"content\") is not None else {**msg, \"content\": \"\"}\n                        for msg in kwargs[\"messages\"]\n                    ]\n                    return await self._fetch_response_litellm_openai(\n                        kwargs, model_settings, tool_choice, stream, parallel_tool_calls\n                    )\n\n                # Handle Anthropic error for empty text content blocks\n                if \"text content blocks must be non-empty\" in str(\n                    e\n                ) or \"cache_control cannot be set for empty text blocks\" in str(e):  # noqa\n                    # Print the error message only once\n                    print(\"\u26a0\ufe0f  Empty text blocks detected - Adding placeholder content\") if not self.empty_content_error_shown else None\n                    self.empty_content_error_shown = True\n\n                    # Fix for empty content in messages for Anthropic models\n                    kwargs[\"messages\"] = [\n                        msg\n                        if msg.get(\"content\") not in [None, \"\"]\n                        else {**msg, \"content\": \"Empty content block\"}\n                        for msg in kwargs[\"messages\"]\n                    ]\n                    return await self._fetch_response_litellm_openai(\n                        kwargs, model_settings, tool_choice, stream, parallel_tool_calls\n                    )\n                # Check for Python formatting errors - NOT context errors\n                if \"Cannot specify ',' with 's'\" in str(e):\n                    print(\"\\n\u274c Python formatting error - Not a context error\")\n                    print(\"\u26a0\ufe0f  There's a bug in the code trying to format strings as numbers\")\n                    print(f\"Error: {str(e)}\")\n                    raise\n                # Check for context length errors in BadRequestError\n                if (\n                    \"context_length_exceeded\" in str(e) \n                    or \"prompt is too long\" in str(e).lower()\n                    or \"maximum context length\" in str(e).lower()\n                    or \"max_tokens\" in str(e) and \"exceeded\" in str(e).lower()\n                    or \"too many tokens\" in str(e).lower()\n                    or \"token limit\" in str(e).lower()\n                ):\n                    print(\"\\n\ud83d\udce6 Context window exceeded - Message history too long\")\n\n                    # Try to extract token info from different error formats\n                    import re\n                    error_str = str(e)\n\n                    # Pattern 1: \"X tokens &gt; Y maximum\" (Anthropic)\n                    match1 = re.search(r'(\\d+)\\s*tokens?\\s*&gt;\\s*(\\d+)\\s*maximum', error_str)\n                    # Pattern 2: \"requested X tokens...maximum context length is Y\" (OpenAI)\n                    match2 = re.search(r'requested\\s+(\\d+)\\s+tokens.*maximum.*?(\\d+)', error_str)\n                    # Pattern 3: \"This model's maximum context length is X tokens, however you requested Y\"\n                    match3 = re.search(r'maximum context length is\\s+(\\d+).*requested\\s+(\\d+)', error_str)\n\n                    if match1:\n                        used_tokens = int(match1.group(1))\n                        max_tokens = int(match1.group(2))\n                        print(f\"\ud83c\udfaf Actual: {used_tokens:,} / {max_tokens:,} tokens\")\n                    elif match2:\n                        used_tokens = int(match2.group(1))\n                        max_tokens = int(match2.group(2))\n                        print(f\"\ud83c\udfaf Requested: {used_tokens:,} tokens (max: {max_tokens:,})\")\n                    elif match3:\n                        max_tokens = int(match3.group(1))\n                        used_tokens = int(match3.group(2))\n                        print(f\"\ud83c\udfaf Requested: {used_tokens:,} tokens (max: {max_tokens:,})\")\n                    elif 'estimated_input_tokens' in locals():\n                        print(f\"\ud83d\udcca Estimated tokens: ~{estimated_input_tokens:,}\")\n                        # Get model's max tokens\n                        model_max = self._get_model_max_tokens(str(self.model))\n                        print(f\"\ud83c\udfaf Model limit: {model_max:,} tokens\")\n\n                    print(\"\\n\ud83d\udca1 Quick fixes:\")\n                    print(\"  \u2022 /flush - Clear conversation history\")\n                    print(\"  \u2022 /compact - Manually compact context\")\n                    print(\"  \u2022 /model &lt;larger-model&gt; - Switch to model with more context\")\n\n                    raise\n            else:\n                raise e\n\n    async def _fetch_response_litellm_openai(\n        self,\n        kwargs: dict,\n        model_settings: ModelSettings,\n        tool_choice: ChatCompletionToolChoiceOptionParam | NotGiven,\n        stream: bool,\n        parallel_tool_calls: bool,\n    ) -&gt; ChatCompletion | tuple[Response, AsyncStream[ChatCompletionChunk]]:\n        \"\"\"\n        Handle standard LiteLLM API calls for OpenAI and compatible models.\n        If a ContextWindowExceededError occurs due to a tool_call id being\n        too long, truncate all tool_call ids in the messages to 40 characters\n        and retry once silently.\n        \"\"\"\n        try:\n            if stream:\n                # Standard LiteLLM handling for streaming\n                ret = await litellm.acompletion(**kwargs)\n                stream_obj = await litellm.acompletion(**kwargs)\n\n                response = Response(\n                    id=FAKE_RESPONSES_ID,\n                    created_at=time.time(),\n                    model=self.model,\n                    object=\"response\",\n                    output=[],\n                    tool_choice=\"auto\"\n                    if tool_choice is None or tool_choice == NOT_GIVEN\n                    else cast(Literal[\"auto\", \"required\", \"none\"], tool_choice),\n                    top_p=model_settings.top_p,\n                    temperature=model_settings.temperature,\n                    tools=[],\n                    parallel_tool_calls=parallel_tool_calls or False,\n                )\n                return response, stream_obj\n            else:\n                # Standard OpenAI handling for non-streaming\n                ret = await litellm.acompletion(**kwargs)\n                return ret\n        except Exception as e:\n            error_msg = str(e)\n            # Handle both OpenAI and Anthropic error messages for tool_call_id\n            if (\n                \"string too long\" in error_msg\n                or \"Invalid 'messages\" in error_msg\n                and \"tool_call_id\" in error_msg\n                and \"maximum length\" in error_msg\n            ):\n                # Truncate all tool_call ids in all messages to 40 characters\n                messages = kwargs.get(\"messages\", [])\n                for msg in messages:\n                    # Truncate tool_call_id in the message itself if present\n                    if (\n                        \"tool_call_id\" in msg\n                        and isinstance(msg[\"tool_call_id\"], str)\n                        and len(msg[\"tool_call_id\"]) &gt; 40\n                    ):\n                        msg[\"tool_call_id\"] = msg[\"tool_call_id\"][:40]\n                    # Truncate tool_call ids in tool_calls if present\n                    if \"tool_calls\" in msg and isinstance(msg[\"tool_calls\"], list):\n                        for tool_call in msg[\"tool_calls\"]:\n                            if (\n                                isinstance(tool_call, dict)\n                                and \"id\" in tool_call\n                                and isinstance(tool_call[\"id\"], str)\n                                and len(tool_call[\"id\"]) &gt; 40\n                            ):\n                                tool_call[\"id\"] = tool_call[\"id\"][:40]\n                kwargs[\"messages\"] = messages\n                # Retry once, silently\n                if stream:\n                    ret = await litellm.acompletion(**kwargs)\n                    stream_obj = await litellm.acompletion(**kwargs)\n                    response = Response(\n                        id=FAKE_RESPONSES_ID,\n                        created_at=time.time(),\n                        model=self.model,\n                        object=\"response\",\n                        output=[],\n                        tool_choice=\"auto\"\n                        if tool_choice is None or tool_choice == NOT_GIVEN\n                        else cast(Literal[\"auto\", \"required\", \"none\"], tool_choice),\n                        top_p=model_settings.top_p,\n                        temperature=model_settings.temperature,\n                        tools=[],\n                        parallel_tool_calls=parallel_tool_calls or False,\n                    )\n                    return response, stream_obj\n                else:\n                    ret = await litellm.acompletion(**kwargs)\n                    return ret\n            else:\n                raise\n\n    async def _fetch_response_litellm_ollama(\n        self,\n        kwargs: dict,\n        model_settings: ModelSettings,\n        tool_choice: ChatCompletionToolChoiceOptionParam | NotGiven,\n        stream: bool,\n        parallel_tool_calls: bool,\n    ) -&gt; ChatCompletion | tuple[Response, AsyncStream[ChatCompletionChunk]]:\n        \"\"\"\n        Fetches a response from an Ollama or Qwen model using LiteLLM, ensuring\n        that the 'format' parameter is not set to a JSON string, which can cause\n        issues with the Ollama API.\n\n        Args:\n            kwargs (dict): Parameters for the completion request.\n            model_settings (ModelSettings): Model configuration.\n            tool_choice (ChatCompletionToolChoiceOptionParam | NotGiven): Tool choice.\n            stream (bool): Whether to stream the response.\n            parallel_tool_calls (bool): Whether to allow parallel tool calls.\n\n        Returns:\n            ChatCompletion or tuple[Response, AsyncStream[ChatCompletionChunk]]:\n                The completion response or a tuple for streaming.\n        \"\"\"\n        # Extract only supported parameters for Ollama\n        ollama_supported_params = {\n            \"model\": kwargs.get(\"model\", \"\"),\n            \"messages\": kwargs.get(\"messages\", []),\n            \"stream\": kwargs.get(\"stream\", False),\n        }\n\n        # Add optional parameters if they exist and are not NOT_GIVEN\n        for param in [\"temperature\", \"top_p\", \"max_tokens\"]:\n            if param in kwargs and kwargs[param] is not NOT_GIVEN:\n                ollama_supported_params[param] = kwargs[param]\n\n        # Add extra headers if available\n        if \"extra_headers\" in kwargs:\n            ollama_supported_params[\"extra_headers\"] = kwargs[\"extra_headers\"]\n\n        # Add tools for compatibility with Qwen\n        if \"tools\" in kwargs and kwargs.get(\"tools\") and kwargs.get(\"tools\") is not NOT_GIVEN:\n            ollama_supported_params[\"tools\"] = kwargs.get(\"tools\")\n\n        # Remove None values and filter out unsupported parameters\n        ollama_kwargs = {\n            k: v\n            for k, v in ollama_supported_params.items()\n            if v is not None and k not in [\"response_format\", \"store\"]\n        }\n\n        # Check if this is a Qwen model\n        model_str = str(self.model).lower()\n        is_qwen = \"qwen\" in model_str\n        api_base = get_ollama_api_base()\n\n        if stream:\n            response = Response(\n                id=FAKE_RESPONSES_ID,\n                created_at=time.time(),\n                model=self.model,\n                object=\"response\",\n                output=[],\n                tool_choice=\"auto\"\n                if tool_choice is None or tool_choice == NOT_GIVEN\n                else cast(Literal[\"auto\", \"required\", \"none\"], tool_choice),\n                top_p=model_settings.top_p,\n                temperature=model_settings.temperature,\n                tools=[],\n                parallel_tool_calls=parallel_tool_calls or False,\n            )\n            # Get streaming response\n            stream_obj = await litellm.acompletion(\n                **ollama_kwargs, api_base=api_base, custom_llm_provider=\"openai\"\n            )\n            return response, stream_obj\n        else:\n            # Get completion response\n            return await litellm.acompletion(\n                **ollama_kwargs,\n                api_base=api_base,\n                custom_llm_provider=\"openai\",\n            )\n\n    def _get_model_max_tokens(self, model_name: str) -&gt; int:\n        \"\"\"Get the maximum input tokens for a model from pricing.json or default.\"\"\"\n        try:\n            import pathlib\n            pricing_path = pathlib.Path(\"pricing.json\")\n            if pricing_path.exists():\n                with open(pricing_path, encoding=\"utf-8\") as f:\n                    pricing_data = json.load(f)\n                    model_info = pricing_data.get(model_name, {})\n                    return model_info.get(\"max_input_tokens\", 200000)\n        except Exception:\n            pass\n        # Default to 200k if not found\n        return 200000\n\n    async def _auto_compact_if_needed(self, estimated_tokens: int, input: str | list[TResponseInputItem], system_instructions: str | None) -&gt; tuple[str | list[TResponseInputItem], str | None, bool]:\n        \"\"\"Check if auto-compaction is needed and perform it if necessary.\n\n        Returns:\n            tuple: (potentially modified input, potentially modified system_instructions, whether compaction occurred)\n        \"\"\"\n        # Check if auto-compaction is disabled\n        if os.getenv(\"CAI_AUTO_COMPACT\", \"true\").lower() == \"false\":\n            return input, system_instructions, False\n\n        max_tokens = self._get_model_max_tokens(str(self.model))\n        threshold_percent = float(os.getenv(\"CAI_AUTO_COMPACT_THRESHOLD\", \"0.8\"))\n        threshold = max_tokens * threshold_percent\n\n        if estimated_tokens &lt;= threshold:\n            return input, system_instructions, False\n\n        # Auto-compaction needed\n        from rich.console import Console\n        console = Console()\n\n        # Update context usage in environment for toolbar\n        context_usage = estimated_tokens / max_tokens\n        os.environ['CAI_CONTEXT_USAGE'] = str(context_usage)\n\n        console.print(f\"\\n[yellow]\u26a0\ufe0f  Context usage at {(estimated_tokens/max_tokens)*100:.1f}% ({estimated_tokens:,}/{max_tokens:,} tokens)[/yellow]\")\n        console.print(\"[yellow]Triggering automatic context compaction...[/yellow]\\n\")\n\n        # Import compact command components\n        try:\n            from cai.repl.commands.memory import MEMORY_COMMAND_INSTANCE\n\n            # Generate AI summary of the conversation\n            summary = await MEMORY_COMMAND_INSTANCE._ai_summarize_history(self.agent_name)\n\n            if summary:\n                # Store the summary\n                from cai.repl.commands.memory import COMPACTED_SUMMARIES\n                COMPACTED_SUMMARIES[self.agent_name] = summary\n\n                # Clear the message history and keep only essential messages\n                self.message_history.clear()\n                # Reset context usage after clearing\n                os.environ['CAI_CONTEXT_USAGE'] = '0.0'\n\n                # Reset context usage since we cleared history\n                os.environ['CAI_CONTEXT_USAGE'] = '0.0'\n\n                # Create new input with summary\n                new_system_instructions = system_instructions or \"\"\n                if new_system_instructions:\n                    new_system_instructions += \"\\n\\n\"\n                new_system_instructions += f\"Previous conversation summary:\\n{summary}\"\n\n                # Keep only the current input (user's latest message)\n                if isinstance(input, str):\n                    new_input = input\n                else:\n                    # For list input, keep only user messages\n                    new_input = []\n                    for item in input:\n                        if hasattr(item, 'role') and item.role == 'user':\n                            new_input.append(item)\n                        elif isinstance(item, dict) and item.get('role') == 'user':\n                            new_input.append(item)\n\n                    # If no user messages found, keep the original input\n                    if not new_input:\n                        new_input = input\n\n                # Re-estimate tokens with compacted context\n                test_messages = self._converter.items_to_messages(new_input, model_instance=self)\n                if new_system_instructions:\n                    test_messages.insert(0, {\"role\": \"system\", \"content\": new_system_instructions})\n                new_tokens, _ = count_tokens_with_tiktoken(test_messages)\n\n                console.print(f\"[green]\u2713 Context compacted: {estimated_tokens:,} \u2192 {new_tokens:,} tokens ({(1-new_tokens/estimated_tokens)*100:.1f}% reduction)[/green]\\n\")\n\n                # Update context usage after compaction\n                new_context_usage = new_tokens / max_tokens if max_tokens &gt; 0 else 0.0\n                os.environ['CAI_CONTEXT_USAGE'] = str(new_context_usage)\n\n                return new_input, new_system_instructions, True\n\n        except Exception as e:\n            console.print(f\"[red]Auto-compaction failed: {e}[/red]\")\n            console.print(\"[yellow]Continuing with full context...[/yellow]\\n\")\n\n        return input, system_instructions, False\n\n    def _intermediate_logs(self):\n        \"\"\"Intermediate logging if conditions are met.\"\"\"\n        if (\n            self.logger\n            and self.interaction_counter &gt; 0\n            and self.interaction_counter % self.INTERMEDIATE_LOG_INTERVAL == 0\n        ):\n            process_intermediate_logs(self.logger.filename, self.logger.session_id)\n\n    def _get_client(self) -&gt; AsyncOpenAI:\n        if self._client is None:\n            self._client = AsyncOpenAI()\n        return self._client\n\n    # Helper function to detect and format function calls from various models\n    def _detect_and_format_function_calls(self, delta):\n        \"\"\"\n        Helper to detect function calls in different formats and normalize them.\n        Handles Qwen specifics where function calls may be formatted differently.\n\n        Returns: List of normalized tool calls or None\n        \"\"\"\n        # Standard OpenAI-style tool_calls format\n        if hasattr(delta, \"tool_calls\") and delta.tool_calls:\n            return delta.tool_calls\n        elif isinstance(delta, dict) and \"tool_calls\" in delta and delta[\"tool_calls\"]:\n            return delta[\"tool_calls\"]\n\n        # Qwen/Ollama function_call format\n        if isinstance(delta, dict) and \"function_call\" in delta:\n            function_call = delta[\"function_call\"]\n            return [\n                {\n                    \"index\": 0,\n                    \"id\": f\"call_{time.time_ns()}\",  # Generate a unique ID\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": function_call.get(\"name\", \"\"),\n                        \"arguments\": function_call.get(\"arguments\", \"\"),\n                    },\n                }\n            ]\n\n        if isinstance(delta, dict) and \"content\" in delta:\n            content = delta[\"content\"]\n            # Try to detect if the content is a JSON string with function call format\n            try:\n                if isinstance(content, str) and \"{\" in content and \"}\" in content:\n                    # Try to extract JSON from the content (it might be embedded in text)\n                    json_start = content.find(\"{\")\n                    json_end = content.rfind(\"}\") + 1\n                    if json_start &gt;= 0 and json_end &gt; json_start:\n                        json_str = content[json_start:json_end]\n                        parsed = json.loads(json_str)\n                        if \"name\" in parsed and \"arguments\" in parsed:\n                            # This looks like a function call in JSON format\n                            return [\n                                {\n                                    \"index\": 0,\n                                    \"id\": f\"call_{time.time_ns()}\",  # Generate a unique ID\n                                    \"type\": \"function\",\n                                    \"function\": {\n                                        \"name\": parsed[\"name\"],\n                                        \"arguments\": json.dumps(parsed[\"arguments\"])\n                                        if isinstance(parsed[\"arguments\"], dict)\n                                        else parsed[\"arguments\"],\n                                    },\n                                }\n                            ]\n            except Exception:\n                # If JSON parsing fails, just continue with normal processing\n                pass\n\n        # Anthropic-style tool_use format\n        if hasattr(delta, \"tool_use\") and delta.tool_use:\n            tool_use = delta.tool_use\n            return [\n                {\n                    \"index\": 0,\n                    \"id\": tool_use.get(\"id\", f\"tool_{time.time_ns()}\"),\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": tool_use.get(\"name\", \"\"),\n                        \"arguments\": tool_use.get(\"input\", \"{}\"),\n                    },\n                }\n            ]\n        elif isinstance(delta, dict) and \"tool_use\" in delta and delta[\"tool_use\"]:\n            tool_use = delta[\"tool_use\"]\n            return [\n                {\n                    \"index\": 0,\n                    \"id\": tool_use.get(\"id\", f\"tool_{time.time_ns()}\"),\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": tool_use.get(\"name\", \"\"),\n                        \"arguments\": tool_use.get(\"input\", \"{}\"),\n                    },\n                }\n            ]\n\n        return None\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.OpenAIChatCompletionsModel.get_full_display_name","title":"get_full_display_name","text":"<pre><code>get_full_display_name() -&gt; str\n</code></pre> <p>Get the full display name including ID.</p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>def get_full_display_name(self) -&gt; str:\n    \"\"\"Get the full display name including ID.\"\"\"\n    return f\"{self._display_name} [{self.agent_id}]\"\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.OpenAIChatCompletionsModel.__del__","title":"__del__","text":"<pre><code>__del__()\n</code></pre> <p>Clean up when the model instance is destroyed.</p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>def __del__(self):\n    \"\"\"Clean up when the model instance is destroyed.\"\"\"\n    try:\n        # DEPRECATED: Remove from old registry for backward compatibility\n        if hasattr(self, '_display_name') and hasattr(self, 'agent_id'):\n            key = (self._display_name, self.agent_id)\n            if key in ACTIVE_MODEL_INSTANCES:\n                del ACTIVE_MODEL_INSTANCES[key]\n\n        # SimpleAgentManager handles history persistence\n        # No need to save to PERSISTENT_MESSAGE_HISTORIES\n\n    except Exception:\n        # Ignore any errors during cleanup\n        pass\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.OpenAIChatCompletionsModel.add_to_message_history","title":"add_to_message_history","text":"<pre><code>add_to_message_history(msg)\n</code></pre> <p>Add a message to this instance's history if it's not a duplicate.</p> <p>Now only adds to the instance's local history, no global registry.</p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>def add_to_message_history(self, msg):\n    \"\"\"Add a message to this instance's history if it's not a duplicate.\n\n    Now only adds to the instance's local history, no global registry.\n    \"\"\"\n    is_duplicate = False\n\n    if self.message_history:\n        if msg.get(\"role\") in [\"system\", \"user\"]:\n            is_duplicate = any(\n                existing.get(\"role\") == msg.get(\"role\")\n                and existing.get(\"content\") == msg.get(\"content\")\n                for existing in self.message_history\n            )\n        elif msg.get(\"role\") == \"assistant\" and msg.get(\"tool_calls\"):\n            # For tool calls, remove any existing message with the same tool call ID\n            # This handles the case where streaming might create duplicate entries\n            tool_call_id = msg[\"tool_calls\"][0].get(\"id\")\n            # Remove duplicates in-place to preserve list reference (important for swarm patterns)\n            indices_to_remove = []\n            for i, existing in enumerate(self.message_history):\n                if (existing.get(\"role\") == \"assistant\"\n                    and existing.get(\"tool_calls\")\n                    and existing[\"tool_calls\"][0].get(\"id\") == tool_call_id):\n                    indices_to_remove.append(i)\n            # Remove in reverse order to avoid index shifting\n            for i in reversed(indices_to_remove):\n                self.message_history.pop(i)\n            is_duplicate = False  # Always add after removing duplicates\n        elif msg.get(\"role\") == \"tool\":\n            is_duplicate = any(\n                existing.get(\"role\") == \"tool\"\n                and existing.get(\"tool_call_id\") == msg.get(\"tool_call_id\")\n                for existing in self.message_history\n            )\n\n    if not is_duplicate:\n        self.message_history.append(msg)\n        # Also update SimpleAgentManager ONLY if they're not the same list reference\n        # This avoids double-adding when they share the same list\n        manager_history = AGENT_MANAGER.get_message_history(self.agent_name)\n        if manager_history is not self.message_history:\n            AGENT_MANAGER.add_to_history(self.agent_name, msg)\n        # Update isolated history if in parallel mode\n        if PARALLEL_ISOLATION.is_parallel_mode() and self.agent_id:\n            PARALLEL_ISOLATION.update_isolated_history(self.agent_id, msg)\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.OpenAIChatCompletionsModel.set_agent_name","title":"set_agent_name","text":"<pre><code>set_agent_name(name: str) -&gt; None\n</code></pre> <p>Set the agent name for CLI display purposes.</p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>def set_agent_name(self, name: str) -&gt; None:\n    \"\"\"Set the agent name for CLI display purposes.\"\"\"\n    self.agent_name = name\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.OpenAIChatCompletionsModel.stream_response","title":"stream_response  <code>async</code>","text":"<pre><code>stream_response(\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; AsyncIterator[TResponseStreamEvent]\n</code></pre> <p>Yields a partial message as it is generated, as well as the usage information.</p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>async def stream_response(\n    self,\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; AsyncIterator[TResponseStreamEvent]:\n    \"\"\"\n    Yields a partial message as it is generated, as well as the usage information.\n    \"\"\"\n    # Initialize streaming contexts as None\n    streaming_context = None\n    thinking_context = None\n    stream_interrupted = False\n\n    try:\n        # IMPORTANT: Pre-process input to ensure it's in the correct format\n        # for streaming. This helps prevent errors during stream handling.\n        if not isinstance(input, str):\n            # Convert input items to messages and verify structure\n            try:\n                input_items = list(input)  # Make sure it's a list\n                # Pre-verify the input messages to avoid errors during streaming\n                from cai.util import fix_message_list\n\n                # Apply fix_message_list to the input items that are dictionaries\n                dict_items = [item for item in input_items if isinstance(item, dict)]\n                if dict_items:\n                    fixed_dict_items = fix_message_list(dict_items)\n\n                    # Replace the original dict items with fixed ones while preserving non-dict items\n                    new_input = []\n                    dict_index = 0\n                    for item in input_items:\n                        if isinstance(item, dict):\n                            if dict_index &lt; len(fixed_dict_items):\n                                new_input.append(fixed_dict_items[dict_index])\n                                dict_index += 1\n                        else:\n                            new_input.append(item)\n\n                    # Update input with the fixed version\n                    input = new_input\n            except Exception as e:\n                # Silently continue with original input if pre-processing failed\n                # This is not critical and shouldn't show warnings\n                pass\n\n        # Increment the interaction counter for CLI display\n        self.interaction_counter += 1\n        self._intermediate_logs()\n\n        # Stop idle timer and start active timer to track LLM processing time\n        stop_idle_timer()\n        start_active_timer()\n\n        # --- Check if streaming should be shown in rich panel ---\n        should_show_rich_stream = (\n            os.getenv(\"CAI_STREAM\", \"false\").lower() == \"true\"\n            and not self.disable_rich_streaming\n        )\n\n        # Create streaming context if needed\n        if should_show_rich_stream:\n            try:\n                streaming_context = create_agent_streaming_context(\n                    agent_name=self.agent_name,\n                    counter=self.interaction_counter,\n                    model=str(self.model),\n                )\n            except Exception as e:\n                # Silently fall back to non-streaming display\n                streaming_context = None\n\n        with generation_span(\n            model=str(self.model),\n            model_config=dataclasses.asdict(model_settings)\n            | {\"base_url\": str(self._get_client().base_url)},\n            disabled=tracing.is_disabled(),\n        ) as span_generation:\n            # Prepare messages for consistent token counting\n            converted_messages = self._converter.items_to_messages(input, model_instance=self)\n            if system_instructions:\n                converted_messages.insert(\n                    0,\n                    {\n                        \"content\": system_instructions,\n                        \"role\": \"system\",\n                    },\n                )\n\n            # Add support for prompt caching for claude (not automatically applied)\n            # Gemini supports it too\n            # https://www.anthropic.com/news/token-saving-updates\n            # Maximize cache efficiency by using up to 4 cache_control blocks\n            if (str(self.model).startswith(\"claude\") or \"gemini\" in str(self.model)) and len(\n                converted_messages\n            ) &gt; 0:\n                # Strategy: Cache the most valuable messages for maximum savings\n                # 1. System message (always first priority)\n                # 2. Long user messages (high token count)\n                # 3. Assistant messages with tool calls (complex context)\n                # 4. Recent context (last message)\n\n                cache_candidates = []\n\n                # Always cache system message if present\n                for i, msg in enumerate(converted_messages):\n                    if msg.get(\"role\") == \"system\":\n                        cache_candidates.append((i, len(str(msg.get(\"content\", \"\"))), \"system\"))\n                        break\n\n                # Find long user messages and assistant messages with tool calls\n                for i, msg in enumerate(converted_messages):\n                    content_len = len(str(msg.get(\"content\", \"\")))\n                    role = msg.get(\"role\")\n\n                    if role == \"user\" and content_len &gt; 500:  # Long user messages\n                        cache_candidates.append((i, content_len, \"user\"))\n                    elif role == \"assistant\" and msg.get(\"tool_calls\"):  # Tool calls\n                        cache_candidates.append(\n                            (i, content_len + 200, \"assistant_tools\")\n                        )  # Bonus for tool calls\n\n                # Always consider the last message for recent context\n                if len(converted_messages) &gt; 1:\n                    last_idx = len(converted_messages) - 1\n                    last_msg = converted_messages[last_idx]\n                    last_content_len = len(str(last_msg.get(\"content\", \"\")))\n                    cache_candidates.append((last_idx, last_content_len, \"recent\"))\n\n                # Sort by value (content length) and select top 4 unique indices\n                cache_candidates.sort(key=lambda x: x[1], reverse=True)\n                selected_indices = []\n                for idx, _, msg_type in cache_candidates:\n                    if idx not in selected_indices:\n                        selected_indices.append(idx)\n                        if len(selected_indices) &gt;= 4:  # Max 4 cache blocks\n                            break\n\n                # Apply cache_control to selected messages\n                for idx in selected_indices:\n                    msg_copy = converted_messages[idx].copy()\n                    msg_copy[\"cache_control\"] = {\"type\": \"ephemeral\"}\n                    converted_messages[idx] = msg_copy\n\n            #    # --- Add to message_history: user, system prompts ---\n            #     if system_instructions:\n            #         sys_msg = {\n            #             \"role\": \"system\",\n            #             \"content\": system_instructions\n            #         }\n            #         self.add_to_message_history(sys_msg)\n\n            if isinstance(input, str):\n                user_msg = {\"role\": \"user\", \"content\": input}\n                self.add_to_message_history(user_msg)\n                # Log the user message\n                self.logger.log_user_message(input)\n            elif isinstance(input, list):\n                for item in input:\n                    if isinstance(item, dict):\n                        if item.get(\"role\") == \"user\":\n                            user_msg = {\"role\": \"user\", \"content\": item.get(\"content\", \"\")}\n                            self.add_to_message_history(user_msg)\n                            # Log the user message\n                            if item.get(\"content\"):\n                                self.logger.log_user_message(item.get(\"content\"))\n            # Get token count estimate before API call for consistent counting\n            estimated_input_tokens, _ = count_tokens_with_tiktoken(converted_messages)\n\n            # Check if auto-compaction is needed\n            input, system_instructions, compacted = await self._auto_compact_if_needed(estimated_input_tokens, input, system_instructions)\n\n            # If compaction occurred, recalculate tokens with new input\n            if compacted:\n                converted_messages = self._converter.items_to_messages(input, model_instance=self)\n                if system_instructions:\n                    converted_messages.insert(0, {\"role\": \"system\", \"content\": system_instructions})\n                estimated_input_tokens, _ = count_tokens_with_tiktoken(converted_messages)\n\n            # Pre-check price limit using estimated input tokens and a conservative estimate for output\n            # This prevents starting a stream that would immediately exceed the price limit\n            if hasattr(COST_TRACKER, \"check_price_limit\"):\n                # Use a conservative estimate for output tokens (roughly equal to input)\n                estimated_cost = calculate_model_cost(\n                    str(self.model), estimated_input_tokens, estimated_input_tokens\n                )  # Conservative estimate\n                try:\n                    COST_TRACKER.check_price_limit(estimated_cost)\n                except Exception:\n                    # Ensure streaming context is cleaned up in case of errors\n                    if streaming_context:\n                        try:\n                            finish_agent_streaming(streaming_context, None)\n                        except Exception:\n                            pass\n                    # Stop active timer and start idle timer before re-raising the exception\n                    stop_active_timer()\n                    start_idle_timer()\n                    raise\n\n            response, stream = await self._fetch_response(\n                system_instructions,\n                input,\n                model_settings,\n                tools,\n                output_schema,\n                handoffs,\n                span_generation,\n                tracing,\n                stream=True,\n            )\n\n            usage: CompletionUsage | None = None\n            state = _StreamingState()\n\n            # Manual token counting (when API doesn't provide it)\n            output_text = \"\"\n            estimated_output_tokens = 0\n\n            # Initialize a streaming text accumulator for rich display\n            streaming_text_buffer = \"\"\n            # For tool call streaming, accumulate tool_calls to add to message_history at the end\n            streamed_tool_calls = []\n\n            # Initialize Claude thinking display if applicable\n            if should_show_rich_stream:  # Only show thinking in rich streaming mode\n                thinking_context = start_claude_thinking_if_applicable(\n                    str(self.model), self.agent_name, self.interaction_counter\n                )\n\n            # Ollama specific: accumulate full content to check for function calls at the end\n            # Some Ollama models output the function call as JSON in the text content\n            ollama_full_content = \"\"\n            is_ollama = False\n\n            model_str = str(self.model).lower()\n            is_ollama = (\n                self.is_ollama\n                or \"ollama\" in model_str\n                or \":\" in model_str\n                or \"qwen\" in model_str\n            )\n\n            # Add visual separation before agent output\n            if streaming_context and should_show_rich_stream:\n                # If we're using rich context, we'll add separation through that\n                pass\n            else:\n                # Removed clear visual separator to avoid blank lines during streaming\n                pass\n\n            try:\n                async for chunk in stream:\n                    # Check if we've been interrupted\n                    if stream_interrupted:\n                        break\n\n                    if not state.started:\n                        state.started = True\n                        yield ResponseCreatedEvent(\n                            response=response,\n                            type=\"response.created\",\n                        )\n\n                    # The usage is only available in the last chunk\n                    if hasattr(chunk, \"usage\"):\n                        usage = chunk.usage\n                    # For Ollama/LiteLLM streams that don't have usage attribute\n                    else:\n                        usage = None\n\n                    # Handle different stream chunk formats\n                    if hasattr(chunk, \"choices\") and chunk.choices:\n                        choices = chunk.choices\n                    elif hasattr(chunk, \"delta\") and chunk.delta:\n                        # Some providers might return delta directly\n                        choices = [{\"delta\": chunk.delta}]\n                    elif isinstance(chunk, dict) and \"choices\" in chunk:\n                        choices = chunk[\"choices\"]\n                    # Special handling for Qwen/Ollama chunks\n                    elif isinstance(chunk, dict) and (\n                        \"content\" in chunk or \"function_call\" in chunk\n                    ):\n                        # Qwen direct delta format - convert to standard\n                        choices = [{\"delta\": chunk}]\n                    else:\n                        # Skip chunks that don't contain choice data\n                        continue\n\n                    if not choices or len(choices) == 0:\n                        continue\n\n                    # Get the delta content\n                    delta = None\n                    if hasattr(choices[0], \"delta\"):\n                        delta = choices[0].delta\n                    elif isinstance(choices[0], dict) and \"delta\" in choices[0]:\n                        delta = choices[0][\"delta\"]\n\n                    if not delta:\n                        continue\n\n                    # Handle Claude reasoning content first (before regular content)\n                    reasoning_content = None\n\n                    # Check for Claude reasoning in different possible formats\n                    if (\n                        hasattr(delta, \"reasoning_content\")\n                        and delta.reasoning_content is not None\n                    ):\n                        reasoning_content = delta.reasoning_content\n                    elif (\n                        isinstance(delta, dict)\n                        and \"reasoning_content\" in delta\n                        and delta[\"reasoning_content\"] is not None\n                    ):\n                        reasoning_content = delta[\"reasoning_content\"]\n\n                    # Also check for thinking_blocks structure (Claude 4 format)\n                    thinking_blocks = None\n                    if hasattr(delta, \"thinking_blocks\") and delta.thinking_blocks is not None:\n                        thinking_blocks = delta.thinking_blocks\n                    elif (\n                        isinstance(delta, dict)\n                        and \"thinking_blocks\" in delta\n                        and delta[\"thinking_blocks\"] is not None\n                    ):\n                        thinking_blocks = delta[\"thinking_blocks\"]\n\n                    # Extract reasoning content from thinking blocks if available\n                    if thinking_blocks and not reasoning_content:\n                        for block in thinking_blocks:\n                            if isinstance(block, dict) and block.get(\"type\") == \"thinking\":\n                                reasoning_content = block.get(\"thinking\", \"\")\n                                break\n                            elif (\n                                isinstance(block, dict)\n                                and block.get(\"type\") == \"text\"\n                                and \"thinking\" in str(block)\n                            ):\n                                # Sometimes thinking content comes as text blocks\n                                reasoning_content = block.get(\"text\", \"\")\n                                break\n\n                    # Check for direct thinking field (some Claude models)\n                    if not reasoning_content:\n                        if hasattr(delta, \"thinking\") and delta.thinking is not None:\n                            reasoning_content = delta.thinking\n                        elif (\n                            isinstance(delta, dict)\n                            and \"thinking\" in delta\n                            and delta[\"thinking\"] is not None\n                        ):\n                            reasoning_content = delta[\"thinking\"]\n\n                    # Update thinking display if we have reasoning content\n                    if reasoning_content:\n                        if thinking_context:\n                            # Streaming mode: Update the rich thinking display\n                            from cai.util import update_claude_thinking_content\n\n                            update_claude_thinking_content(thinking_context, reasoning_content)\n                        else:\n                            # Non-streaming mode: Use simple text output\n                            from cai.util import (\n                                detect_claude_thinking_in_stream,\n                                print_claude_reasoning_simple,\n                            )\n\n                            # Check if model supports reasoning (Claude or DeepSeek)\n                            model_str_lower = str(self.model).lower()\n                            if (\n                                detect_claude_thinking_in_stream(str(self.model))\n                                or \"deepseek\" in model_str_lower\n                            ):\n                                print_claude_reasoning_simple(\n                                    reasoning_content, self.agent_name, str(self.model)\n                                )\n\n                    # Handle text\n                    content = None\n                    if hasattr(delta, \"content\") and delta.content is not None:\n                        content = delta.content\n                    elif (\n                        isinstance(delta, dict)\n                        and \"content\" in delta\n                        and delta[\"content\"] is not None\n                    ):\n                        content = delta[\"content\"]\n\n                    if content:\n                        # IMPORTANT: If we have content and thinking_context is active,\n                        # it means thinking is complete and normal content is starting\n                        # Close the thinking display automatically\n                        if thinking_context:\n                            from cai.util import finish_claude_thinking_display\n\n                            finish_claude_thinking_display(thinking_context)\n                            thinking_context = None  # Clear the context\n\n                        # For Ollama, we need to accumulate the full content to check for function calls\n                        if is_ollama:\n                            ollama_full_content += content\n\n                        # Add to the streaming text buffer\n                        streaming_text_buffer += content\n\n                        # Update streaming display if enabled - ALWAYS respect CAI_STREAM setting\n                        # Both thinking and regular content should stream if streaming is enabled\n                        if streaming_context:\n                            # Calculate cost for current interaction\n                            current_cost = calculate_model_cost(\n                                str(self.model), estimated_input_tokens, estimated_output_tokens\n                            )\n\n                            # Check price limit only for paid models\n                            if (\n                                current_cost &gt; 0\n                                and hasattr(COST_TRACKER, \"check_price_limit\")\n                                and estimated_output_tokens % 50 == 0\n                            ):\n                                try:\n                                    COST_TRACKER.check_price_limit(current_cost)\n                                except Exception:\n                                    # Ensure streaming context is cleaned up\n                                    if streaming_context:\n                                        try:\n                                            finish_agent_streaming(streaming_context, None)\n                                        except Exception:\n                                            pass\n                                    # Stop timers and re-raise the exception\n                                    stop_active_timer()\n                                    start_idle_timer()\n                                    raise\n\n                            # Update session total cost for real-time display\n                            # This is a temporary estimate during streaming that will be properly updated at the end\n                            estimated_session_total = getattr(\n                                COST_TRACKER, \"session_total_cost\", 0.0\n                            )\n\n                            # For free models, don't add to the total cost\n                            display_total_cost = estimated_session_total\n                            if current_cost &gt; 0:\n                                display_total_cost += current_cost\n\n                            # Create token stats with both current interaction cost and updated total cost\n                            token_stats = {\n                                \"input_tokens\": estimated_input_tokens,\n                                \"output_tokens\": estimated_output_tokens,\n                                \"cost\": current_cost,\n                                \"total_cost\": display_total_cost,\n                            }\n\n                            update_agent_streaming_content(\n                                streaming_context, content, token_stats\n                            )\n\n                        # More accurate token counting for text content\n                        output_text += content\n                        token_count, _ = count_tokens_with_tiktoken(output_text)\n                        estimated_output_tokens = token_count\n\n                        # Periodically check price limit during streaming\n                        # This allows early termination if price limit is reached mid-stream\n                        if (\n                            estimated_output_tokens &gt; 0 and estimated_output_tokens % 50 == 0\n                        ):  # Check every ~50 tokens\n                            # Calculate current estimated cost\n                            current_estimated_cost = calculate_model_cost(\n                                str(self.model), estimated_input_tokens, estimated_output_tokens\n                            )\n\n                            # Check price limit only for paid models\n                            if current_estimated_cost &gt; 0 and hasattr(\n                                COST_TRACKER, \"check_price_limit\"\n                            ):\n                                try:\n                                    COST_TRACKER.check_price_limit(current_estimated_cost)\n                                except Exception:\n                                    # Ensure streaming context is cleaned up\n                                    if streaming_context:\n                                        try:\n                                            finish_agent_streaming(streaming_context, None)\n                                        except Exception:\n                                            pass\n                                    # Stop timers and re-raise the exception\n                                    stop_active_timer()\n                                    start_idle_timer()\n                                    raise\n\n                            # Update the COST_TRACKER with the running cost for accurate display\n                            if hasattr(COST_TRACKER, \"interaction_cost\"):\n                                COST_TRACKER.interaction_cost = current_estimated_cost\n\n                            # Also update streaming context if available for live display\n                            if streaming_context:\n                                # For free models, don't add to the session total\n                                if current_estimated_cost == 0:\n                                    session_total = getattr(\n                                        COST_TRACKER, \"session_total_cost\", 0.0\n                                    )\n                                else:\n                                    session_total = (\n                                        getattr(COST_TRACKER, \"session_total_cost\", 0.0)\n                                        + current_estimated_cost\n                                    )\n\n                                updated_token_stats = {\n                                    \"input_tokens\": estimated_input_tokens,\n                                    \"output_tokens\": estimated_output_tokens,\n                                    \"cost\": current_estimated_cost,\n                                    \"total_cost\": session_total,\n                                }\n                                update_agent_streaming_content(\n                                    streaming_context, \"\", updated_token_stats\n                                )\n\n                        if not state.text_content_index_and_output:\n                            # Initialize a content tracker for streaming text\n                            state.text_content_index_and_output = (\n                                0 if not state.refusal_content_index_and_output else 1,\n                                ResponseOutputText(\n                                    text=\"\",\n                                    type=\"output_text\",\n                                    annotations=[],\n                                ),\n                            )\n                            # Start a new assistant message stream\n                            assistant_item = ResponseOutputMessage(\n                                id=FAKE_RESPONSES_ID,\n                                content=[],\n                                role=\"assistant\",\n                                type=\"message\",\n                                status=\"in_progress\",\n                            )\n                            # Notify consumers of the start of a new output message + first content part\n                            yield ResponseOutputItemAddedEvent(\n                                item=assistant_item,\n                                output_index=0,\n                                type=\"response.output_item.added\",\n                            )\n                            yield ResponseContentPartAddedEvent(\n                                content_index=state.text_content_index_and_output[0],\n                                item_id=FAKE_RESPONSES_ID,\n                                output_index=0,\n                                part=ResponseOutputText(\n                                    text=\"\",\n                                    type=\"output_text\",\n                                    annotations=[],\n                                ),\n                                type=\"response.content_part.added\",\n                            )\n                        # Emit the delta for this segment of content\n                        yield ResponseTextDeltaEvent(\n                            content_index=state.text_content_index_and_output[0],\n                            delta=content,\n                            item_id=FAKE_RESPONSES_ID,\n                            output_index=0,\n                            type=\"response.output_text.delta\",\n                        )\n                        # Accumulate the text into the response part\n                        state.text_content_index_and_output[1].text += content\n\n                    # Handle refusals (model declines to answer)\n                    refusal_content = None\n                    if hasattr(delta, \"refusal\") and delta.refusal:\n                        refusal_content = delta.refusal\n                    elif isinstance(delta, dict) and \"refusal\" in delta and delta[\"refusal\"]:\n                        refusal_content = delta[\"refusal\"]\n\n                    if refusal_content:\n                        if not state.refusal_content_index_and_output:\n                            # Initialize a content tracker for streaming refusal text\n                            state.refusal_content_index_and_output = (\n                                0 if not state.text_content_index_and_output else 1,\n                                ResponseOutputRefusal(refusal=\"\", type=\"refusal\"),\n                            )\n                            # Start a new assistant message if one doesn't exist yet (in-progress)\n                            assistant_item = ResponseOutputMessage(\n                                id=FAKE_RESPONSES_ID,\n                                content=[],\n                                role=\"assistant\",\n                                type=\"message\",\n                                status=\"in_progress\",\n                            )\n                            # Notify downstream that assistant message + first content part are starting\n                            yield ResponseOutputItemAddedEvent(\n                                item=assistant_item,\n                                output_index=0,\n                                type=\"response.output_item.added\",\n                            )\n                            yield ResponseContentPartAddedEvent(\n                                content_index=state.refusal_content_index_and_output[0],\n                                item_id=FAKE_RESPONSES_ID,\n                                output_index=0,\n                                part=ResponseOutputText(\n                                    text=\"\",\n                                    type=\"output_text\",\n                                    annotations=[],\n                                ),\n                                type=\"response.content_part.added\",\n                            )\n                        # Emit the delta for this segment of refusal\n                        yield ResponseRefusalDeltaEvent(\n                            content_index=state.refusal_content_index_and_output[0],\n                            delta=refusal_content,\n                            item_id=FAKE_RESPONSES_ID,\n                            output_index=0,\n                            type=\"response.refusal.delta\",\n                        )\n                        # Accumulate the refusal string in the output part\n                        state.refusal_content_index_and_output[1].refusal += refusal_content\n\n                    # Handle tool calls\n                    # Because we don't know the name of the function until the end of the stream, we'll\n                    # save everything and yield events at the end\n                    tool_calls = self._detect_and_format_function_calls(delta)\n\n                    if tool_calls:\n                        for tc_delta in tool_calls:\n                            tc_index = (\n                                tc_delta.index\n                                if hasattr(tc_delta, \"index\")\n                                else tc_delta.get(\"index\", 0)\n                            )\n                            if tc_index not in state.function_calls:\n                                state.function_calls[tc_index] = ResponseFunctionToolCall(\n                                    id=FAKE_RESPONSES_ID,\n                                    arguments=\"\",\n                                    name=\"\",\n                                    type=\"function_call\",\n                                    call_id=\"\",\n                                )\n\n                            tc_function = None\n                            if hasattr(tc_delta, \"function\"):\n                                tc_function = tc_delta.function\n                            elif isinstance(tc_delta, dict) and \"function\" in tc_delta:\n                                tc_function = tc_delta[\"function\"]\n\n                            if tc_function:\n                                # Handle both object and dict formats\n                                args = \"\"\n                                if hasattr(tc_function, \"arguments\"):\n                                    args = tc_function.arguments or \"\"\n                                elif (\n                                    isinstance(tc_function, dict) and \"arguments\" in tc_function\n                                ):\n                                    args = tc_function.get(\"arguments\", \"\") or \"\"\n\n                                name = \"\"\n                                if hasattr(tc_function, \"name\"):\n                                    name = tc_function.name or \"\"\n                                elif isinstance(tc_function, dict) and \"name\" in tc_function:\n                                    name = tc_function.get(\"name\", \"\") or \"\"\n\n                                state.function_calls[tc_index].arguments += args\n                                state.function_calls[tc_index].name += name\n\n                            # Handle call_id in both formats\n                            call_id = \"\"\n                            if hasattr(tc_delta, \"id\"):\n                                call_id = tc_delta.id or \"\"\n                            elif isinstance(tc_delta, dict) and \"id\" in tc_delta:\n                                call_id = tc_delta.get(\"id\", \"\") or \"\"\n                            else:\n                                # For Qwen models, generate a predictable ID if none is provided\n                                if state.function_calls[tc_index].name:\n                                    # Generate a stable ID from the function name and arguments\n                                    call_id = f\"call_{hashlib.md5(state.function_calls[tc_index].name.encode()).hexdigest()[:8]}\"\n\n                            state.function_calls[tc_index].call_id += call_id\n\n                            # --- Accumulate tool call for message_history ---\n                            # Only add if not already present (avoid duplicates in streaming)\n                            # Handle empty arguments before storing\n                            tool_args = state.function_calls[tc_index].arguments\n                            if tool_args is None or (isinstance(tool_args, str) and tool_args.strip() == \"\"):\n                                tool_args = \"{}\"\n\n                            tool_call_msg = {\n                                \"role\": \"assistant\",\n                                \"content\": None,\n                                \"tool_calls\": [\n                                    {\n                                        \"id\": state.function_calls[tc_index].call_id,\n                                        \"type\": \"function\",\n                                        \"function\": {\n                                            \"name\": state.function_calls[tc_index].name,\n                                            \"arguments\": tool_args,\n                                        },\n                                    }\n                                ],\n                            }\n                            # Only add if not already in streamed_tool_calls\n                            if tool_call_msg not in streamed_tool_calls:\n                                streamed_tool_calls.append(tool_call_msg)\n                                # Don't add to message history here - wait for tool output\n                                # to add both tool call and response atomically\n\n                                # NEW: Display tool call immediately when detected in streaming mode\n                                # But only if it has complete arguments and name\n                                if (\n                                    state.function_calls[tc_index].name\n                                    and state.function_calls[tc_index].arguments\n                                    and state.function_calls[tc_index].call_id\n                                ):\n                                    # First, finish any existing streaming context if it exists\n                                    if streaming_context:\n                                        try:\n                                            finish_agent_streaming(streaming_context, None)\n                                            streaming_context = None\n                                        except Exception:\n                                            pass\n\n                                    # Create a message-like object for displaying the function call\n                                    tool_msg = type(\n                                        \"ToolCallStreamDisplay\",\n                                        (),\n                                        {\n                                            \"content\": None,\n                                            \"tool_calls\": [\n                                                type(\n                                                    \"ToolCallDetail\",\n                                                    (),\n                                                    {\n                                                        \"function\": type(\n                                                            \"FunctionDetail\",\n                                                            (),\n                                                            {\n                                                                \"name\": state.function_calls[\n                                                                    tc_index\n                                                                ].name,\n                                                                \"arguments\": state.function_calls[\n                                                                    tc_index\n                                                                ].arguments,\n                                                            },\n                                                        ),\n                                                        \"id\": state.function_calls[\n                                                            tc_index\n                                                        ].call_id,\n                                                        \"type\": \"function\",\n                                                    },\n                                                )\n                                            ],\n                                        },\n                                    )\n\n                                    # Display the tool call during streaming\n                                    cli_print_agent_messages(\n                                        agent_name=getattr(self, \"agent_name\", \"Agent\"),\n                                        message=tool_msg,\n                                        counter=getattr(self, \"interaction_counter\", 0),\n                                        model=str(self.model),\n                                        debug=False,\n                                        interaction_input_tokens=estimated_input_tokens,\n                                        interaction_output_tokens=estimated_output_tokens,\n                                        interaction_reasoning_tokens=0,  # Not available during streaming yet\n                                        total_input_tokens=getattr(\n                                            self, \"total_input_tokens\", 0\n                                        )\n                                        + estimated_input_tokens,\n                                        total_output_tokens=getattr(\n                                            self, \"total_output_tokens\", 0\n                                        )\n                                        + estimated_output_tokens,\n                                        total_reasoning_tokens=getattr(\n                                            self, \"total_reasoning_tokens\", 0\n                                        ),\n                                        interaction_cost=None,\n                                        total_cost=None,\n                                        tool_output=None,  # Will be shown once tool is executed\n                                        suppress_empty=True,  # Prevent empty panels\n                                    )\n                                    # Set flag to suppress final output to avoid duplication\n                                    self.suppress_final_output = True\n\n            except KeyboardInterrupt:\n                # Handle interruption during streaming\n                stream_interrupted = True\n                print(\"\\n[Streaming interrupted by user]\", file=sys.stderr)\n\n                # Let the exception propagate after cleanup\n                raise\n\n            except Exception as e:\n                # Handle other exceptions during streaming\n                logger.error(f\"Error during streaming: {e}\")\n                if \"token\" in str(e).lower() or \"limit\" in str(e).lower():\n                    print(\"\\n\ud83d\udccf Token limit exceeded - Response truncated\")\n                raise\n\n            # Special handling for Ollama - check if accumulated text contains a valid function call\n            if is_ollama and ollama_full_content and len(state.function_calls) == 0:\n                # Look for JSON object that might be a function call\n                try:\n                    # Try to extract a JSON object from the content\n                    json_start = ollama_full_content.find(\"{\")\n                    json_end = ollama_full_content.rfind(\"}\") + 1\n\n                    if json_start &gt;= 0 and json_end &gt; json_start:\n                        json_str = ollama_full_content[json_start:json_end]\n                        # Try to parse the JSON\n                        parsed = json.loads(json_str)\n\n                        # Check if it looks like a function call\n                        if \"name\" in parsed and \"arguments\" in parsed:\n                            logger.debug(\n                                f\"Found valid function call in Ollama output: {json_str}\"\n                            )\n\n                            # Create a tool call ID\n                            tool_call_id = f\"call_{hashlib.md5((parsed['name'] + str(time.time())).encode()).hexdigest()[:8]}\"\n\n                            # Ensure arguments is a valid JSON string\n                            arguments_str = \"\"\n                            if isinstance(parsed[\"arguments\"], dict):\n                                # Remove 'ctf' field if it exists\n                                if \"ctf\" in parsed[\"arguments\"]:\n                                    del parsed[\"arguments\"][\"ctf\"]\n                                arguments_str = json.dumps(parsed[\"arguments\"])\n                            elif isinstance(parsed[\"arguments\"], str):\n                                # If it's already a string, check if it's valid JSON\n                                try:\n                                    # Try parsing to validate and remove 'ctf' if present\n                                    args_dict = json.loads(parsed[\"arguments\"])\n                                    if isinstance(args_dict, dict) and \"ctf\" in args_dict:\n                                        del args_dict[\"ctf\"]\n                                    arguments_str = json.dumps(args_dict)\n                                except:\n                                    # If not valid JSON, encode it as a JSON string\n                                    arguments_str = json.dumps(parsed[\"arguments\"])\n                            else:\n                                # For any other type, convert to string and then JSON\n                                arguments_str = json.dumps(str(parsed[\"arguments\"]))\n                            # Add it to our function_calls state\n                            state.function_calls[0] = ResponseFunctionToolCall(\n                                id=FAKE_RESPONSES_ID,\n                                arguments=arguments_str,\n                                name=parsed[\"name\"],\n                                type=\"function_call\",\n                                call_id=tool_call_id[:40],\n                            )\n\n                            # Display the tool call in CLI\n                            try:\n                                # First, finish any existing streaming context if it exists\n                                if streaming_context:\n                                    try:\n                                        finish_agent_streaming(streaming_context, None)\n                                        streaming_context = None\n                                    except Exception:\n                                        pass\n\n                                # Create a message-like object to display the function call\n                                tool_msg = type(\n                                    \"ToolCallWrapper\",\n                                    (),\n                                    {\n                                        \"content\": None,\n                                        \"tool_calls\": [\n                                            type(\n                                                \"ToolCallDetail\",\n                                                (),\n                                                {\n                                                    \"function\": type(\n                                                        \"FunctionDetail\",\n                                                        (),\n                                                        {\n                                                            \"name\": parsed[\"name\"],\n                                                            \"arguments\": arguments_str,\n                                                        },\n                                                    ),\n                                                    \"id\": tool_call_id[:40],\n                                                    \"type\": \"function\",\n                                                },\n                                            )\n                                        ],\n                                    },\n                                )\n\n                                # Print the tool call using the CLI utility\n                                cli_print_agent_messages(\n                                    agent_name=getattr(self, \"agent_name\", \"Agent\"),\n                                    message=tool_msg,\n                                    counter=getattr(self, \"interaction_counter\", 0),\n                                    model=str(self.model),\n                                    debug=False,\n                                    interaction_input_tokens=estimated_input_tokens,\n                                    interaction_output_tokens=estimated_output_tokens,\n                                    interaction_reasoning_tokens=0,  # Not available for Ollama\n                                    total_input_tokens=getattr(self, \"total_input_tokens\", 0)\n                                    + estimated_input_tokens,\n                                    total_output_tokens=getattr(self, \"total_output_tokens\", 0)\n                                    + estimated_output_tokens,\n                                    total_reasoning_tokens=getattr(\n                                        self, \"total_reasoning_tokens\", 0\n                                    ),\n                                    interaction_cost=None,\n                                    total_cost=None,\n                                    tool_output=None,  # Will be shown once the tool is executed\n                                    suppress_empty=True,  # Suppress empty panels during streaming\n                                )\n\n                                # Set flag to suppress final output to avoid duplication\n                                self.suppress_final_output = True\n                            except Exception as e:\n                                # Silently log the error - don't disrupt the flow\n                                logger.debug(f\"Display error (non-critical): {e}\")\n\n                            # Add to message history\n                            tool_call_msg = {\n                                \"role\": \"assistant\",\n                                \"content\": None,\n                                \"tool_calls\": [\n                                    {\n                                        \"id\": tool_call_id,\n                                        \"type\": \"function\",\n                                        \"function\": {\n                                            \"name\": parsed[\"name\"],\n                                            \"arguments\": arguments_str,\n                                        },\n                                    }\n                                ],\n                            }\n\n                            streamed_tool_calls.append(tool_call_msg)\n                            # Don't add to message history here - wait for tool output\n                            # to add both tool call and response atomically\n\n                            logger.debug(\n                                f\"Added function call: {parsed['name']} with args: {arguments_str}\"\n                            )\n                except Exception:\n                    pass\n\n            function_call_starting_index = 0\n            if state.text_content_index_and_output:\n                function_call_starting_index += 1\n                # Send end event for this content part\n                yield ResponseContentPartDoneEvent(\n                    content_index=state.text_content_index_and_output[0],\n                    item_id=FAKE_RESPONSES_ID,\n                    output_index=0,\n                    part=state.text_content_index_and_output[1],\n                    type=\"response.content_part.done\",\n                )\n\n            if state.refusal_content_index_and_output:\n                function_call_starting_index += 1\n                # Send end event for this content part\n                yield ResponseContentPartDoneEvent(\n                    content_index=state.refusal_content_index_and_output[0],\n                    item_id=FAKE_RESPONSES_ID,\n                    output_index=0,\n                    part=state.refusal_content_index_and_output[1],\n                    type=\"response.content_part.done\",\n                )\n\n            # Actually send events for the function calls\n            for function_call in state.function_calls.values():\n                # First, a ResponseOutputItemAdded for the function call\n                yield ResponseOutputItemAddedEvent(\n                    item=ResponseFunctionToolCall(\n                        id=FAKE_RESPONSES_ID,\n                        call_id=function_call.call_id[:40],\n                        arguments=function_call.arguments,\n                        name=function_call.name,\n                        type=\"function_call\",\n                    ),\n                    output_index=function_call_starting_index,\n                    type=\"response.output_item.added\",\n                )\n                # Then, yield the args\n                yield ResponseFunctionCallArgumentsDeltaEvent(\n                    delta=function_call.arguments,\n                    item_id=FAKE_RESPONSES_ID,\n                    output_index=function_call_starting_index,\n                    type=\"response.function_call_arguments.delta\",\n                )\n                # Finally, the ResponseOutputItemDone\n                yield ResponseOutputItemDoneEvent(\n                    item=ResponseFunctionToolCall(\n                        id=FAKE_RESPONSES_ID,\n                        call_id=function_call.call_id[:40],\n                        arguments=function_call.arguments,\n                        name=function_call.name,\n                        type=\"function_call\",\n                    ),\n                    output_index=function_call_starting_index,\n                    type=\"response.output_item.done\",\n                )\n\n            # Finally, send the Response completed event\n            outputs: list[ResponseOutputItem] = []\n            if state.text_content_index_and_output or state.refusal_content_index_and_output:\n                assistant_msg = ResponseOutputMessage(\n                    id=FAKE_RESPONSES_ID,\n                    content=[],\n                    role=\"assistant\",\n                    type=\"message\",\n                    status=\"completed\",\n                )\n                if state.text_content_index_and_output:\n                    assistant_msg.content.append(state.text_content_index_and_output[1])\n                if state.refusal_content_index_and_output:\n                    assistant_msg.content.append(state.refusal_content_index_and_output[1])\n                outputs.append(assistant_msg)\n\n                # send a ResponseOutputItemDone for the assistant message\n                yield ResponseOutputItemDoneEvent(\n                    item=assistant_msg,\n                    output_index=0,\n                    type=\"response.output_item.done\",\n                )\n\n            for function_call in state.function_calls.values():\n                outputs.append(function_call)\n\n            final_response = response.model_copy()\n            final_response.output = outputs\n\n            # Get final token counts using consistent method\n            input_tokens = estimated_input_tokens\n            output_tokens = estimated_output_tokens\n\n            # Use API token counts if available and reasonable\n            if usage and hasattr(usage, \"prompt_tokens\") and usage.prompt_tokens &gt; 0:\n                input_tokens = usage.prompt_tokens\n            if usage and hasattr(usage, \"completion_tokens\") and usage.completion_tokens &gt; 0:\n                output_tokens = usage.completion_tokens\n\n            # Create a proper usage object with our token counts\n            final_response.usage = CustomResponseUsage(\n                input_tokens=input_tokens,\n                output_tokens=output_tokens,\n                total_tokens=input_tokens + output_tokens,\n                output_tokens_details=OutputTokensDetails(\n                    reasoning_tokens=usage.completion_tokens_details.reasoning_tokens\n                    if usage\n                    and hasattr(usage, \"completion_tokens_details\")\n                    and usage.completion_tokens_details\n                    and hasattr(usage.completion_tokens_details, \"reasoning_tokens\")\n                    and usage.completion_tokens_details.reasoning_tokens\n                    else 0\n                ),\n                input_tokens_details={\n                    \"prompt_tokens\": input_tokens,\n                    \"cached_tokens\": usage.prompt_tokens_details.cached_tokens\n                    if usage\n                    and hasattr(usage, \"prompt_tokens_details\")\n                    and usage.prompt_tokens_details\n                    and hasattr(usage.prompt_tokens_details, \"cached_tokens\")\n                    and usage.prompt_tokens_details.cached_tokens\n                    else 0,\n                },\n            )\n\n            yield ResponseCompletedEvent(\n                response=final_response,\n                type=\"response.completed\",\n            )\n\n            # Update token totals for CLI display\n            if final_response.usage:\n                # Always update the total counters with the best available counts\n                self.total_input_tokens += final_response.usage.input_tokens\n                self.total_output_tokens += final_response.usage.output_tokens\n                if final_response.usage.output_tokens_details and hasattr(\n                    final_response.usage.output_tokens_details, \"reasoning_tokens\"\n                ):\n                    self.total_reasoning_tokens += (\n                        final_response.usage.output_tokens_details.reasoning_tokens\n                    )\n\n            # Prepare final statistics for display\n            interaction_input = final_response.usage.input_tokens if final_response.usage else 0\n            interaction_output = (\n                final_response.usage.output_tokens if final_response.usage else 0\n            )\n            total_input = getattr(self, \"total_input_tokens\", 0)\n            total_output = getattr(self, \"total_output_tokens\", 0)\n\n            # Calculate costs for this model\n            model_name = str(self.model)\n            interaction_cost = calculate_model_cost(\n                model_name, interaction_input, interaction_output\n            )\n            # Get the previous total cost and add this interaction's cost\n            # Don't recalculate cost for all tokens - that causes double-counting\n            previous_total = getattr(COST_TRACKER, \"session_total_cost\", 0.0)\n            total_cost = previous_total + interaction_cost\n\n            # If interaction cost is zero, this is a free model\n            if interaction_cost == 0:\n                # For free models, keep existing total and ensure cost tracking system knows it's free\n                total_cost = getattr(COST_TRACKER, \"session_total_cost\", 0.0)\n                if hasattr(COST_TRACKER, \"reset_cost_for_local_model\"):\n                    COST_TRACKER.reset_cost_for_local_model(model_name)\n\n            # Explicit conversion to float with fallback to ensure they're never None or 0\n            interaction_cost = float(interaction_cost if interaction_cost is not None else 0.0)\n            total_cost = float(total_cost if total_cost is not None else 0.0)\n\n            # Process costs through COST_TRACKER only once per interaction\n            if interaction_cost &gt; 0.0:\n                # Check price limit before processing the new cost\n                if hasattr(COST_TRACKER, \"check_price_limit\"):\n                    try:\n                        COST_TRACKER.check_price_limit(interaction_cost)\n                    except Exception:\n                        # Ensure streaming context is cleaned up\n                        if streaming_context:\n                            try:\n                                finish_agent_streaming(streaming_context, None)\n                            except Exception:\n                                pass\n                        # Stop timers and re-raise the exception\n                        stop_active_timer()\n                        start_idle_timer()\n                        raise\n\n                # Process the interaction cost (updates internal tracking)\n                COST_TRACKER.process_interaction_cost(\n                    model_name,\n                    interaction_input,\n                    interaction_output,\n                    final_response.usage.output_tokens_details.reasoning_tokens\n                    if final_response.usage\n                    and final_response.usage.output_tokens_details\n                    and hasattr(final_response.usage.output_tokens_details, \"reasoning_tokens\")\n                    else 0,\n                    interaction_cost\n                )\n\n                # Process the total cost (updates session total correctly)\n                total_cost = COST_TRACKER.process_total_cost(\n                    model_name,\n                    total_input,\n                    total_output,\n                    getattr(self, \"total_reasoning_tokens\", 0),\n                    None  # Let it calculate from tokens\n                )\n\n                # Track usage globally\n                GLOBAL_USAGE_TRACKER.track_usage(\n                    model_name=model_name,\n                    input_tokens=interaction_input,\n                    output_tokens=interaction_output,\n                    cost=interaction_cost,\n                    agent_name=self.agent_name\n                )\n            else:\n                # For free models, still track token usage\n                GLOBAL_USAGE_TRACKER.track_usage(\n                    model_name=model_name,\n                    input_tokens=interaction_input,\n                    output_tokens=interaction_output,\n                    cost=0.0,\n                    agent_name=self.agent_name\n                )\n\n            # Store the total cost for future recording\n            self.total_cost = total_cost\n\n            # Create final stats with explicit type conversion for all values\n            final_stats = {\n                \"interaction_input_tokens\": int(interaction_input),\n                \"interaction_output_tokens\": int(interaction_output),\n                \"interaction_reasoning_tokens\": int(\n                    final_response.usage.output_tokens_details.reasoning_tokens\n                    if final_response.usage\n                    and final_response.usage.output_tokens_details\n                    and hasattr(final_response.usage.output_tokens_details, \"reasoning_tokens\")\n                    else 0\n                ),\n                \"total_input_tokens\": int(total_input),\n                \"total_output_tokens\": int(total_output),\n                \"total_reasoning_tokens\": int(getattr(self, \"total_reasoning_tokens\", 0)),\n                \"interaction_cost\": float(interaction_cost),\n                \"total_cost\": float(total_cost),\n            }\n\n            # At the end of streaming, finish the streaming context if we were using it\n            if streaming_context:\n                # Create a direct copy of the costs to ensure they remain as floats\n                direct_stats = final_stats.copy()\n                direct_stats[\"interaction_cost\"] = float(interaction_cost)\n                direct_stats[\"total_cost\"] = float(total_cost)\n                # Use the direct copy with guaranteed float costs\n                finish_agent_streaming(streaming_context, direct_stats)\n                streaming_context = None\n\n                # Removed extra newline after streaming completes to avoid blank lines\n                pass\n\n            # Finish Claude thinking display if it was active\n            if thinking_context:\n                from cai.util import finish_claude_thinking_display\n\n                finish_claude_thinking_display(thinking_context)\n\n                # Note: Content is now displayed during streaming, no need to show it again here\n\n            if tracing.include_data():\n                span_generation.span_data.output = [final_response.model_dump()]\n\n            span_generation.span_data.usage = {\n                \"input_tokens\": input_tokens,\n                \"output_tokens\": output_tokens,\n            }\n\n            # --- DEFERRED: Tool calls are no longer added immediately ---\n            # Store pending tool calls but don't add to history yet\n            if not hasattr(self, \"_pending_tool_calls\"):\n                self._pending_tool_calls = {}\n\n            for tool_call_msg in streamed_tool_calls:\n                # Extract tool call ID from the message\n                if tool_call_msg.get(\"tool_calls\"):\n                    for tc in tool_call_msg[\"tool_calls\"]:\n                        self._pending_tool_calls[tc[\"id\"]] = tool_call_msg\n\n            # Log the assistant tool call message if any tool calls were collected\n            if streamed_tool_calls:\n                tool_calls_list = []\n                for tool_call_msg in streamed_tool_calls:\n                    for tool_call in tool_call_msg.get(\"tool_calls\", []):\n                        tool_calls_list.append(tool_call)\n                self.logger.log_assistant_message(None, tool_calls_list)\n\n            # Always log text content if it exists, regardless of suppress_final_output\n            # The suppress_final_output flag is only for preventing duplicate tool call display\n            if (\n                state.text_content_index_and_output\n                and state.text_content_index_and_output[1].text\n            ):\n                asst_msg = {\n                    \"role\": \"assistant\",\n                    \"content\": state.text_content_index_and_output[1].text,\n                }\n                self.add_to_message_history(asst_msg)\n                # Log the assistant message\n                self.logger.log_assistant_message(state.text_content_index_and_output[1].text)\n\n            # Reset the suppress flag for future requests\n            self.suppress_final_output = False\n\n            # Log the complete response\n            self.logger.rec_training_data(\n                {\n                    \"model\": str(self.model),\n                    \"messages\": converted_messages,\n                    \"stream\": True,\n                    \"tools\": [t.params_json_schema for t in tools] if tools else [],\n                    \"tool_choice\": model_settings.tool_choice,\n                },\n                final_response,\n                self.total_cost,\n                self.agent_name,\n            )\n\n            # Stop active timer and start idle timer when streaming is complete\n            stop_active_timer()\n            start_idle_timer()\n\n    except KeyboardInterrupt:\n        # Handle keyboard interruption specifically\n        stream_interrupted = True\n\n        # Ensure message history consistency by adding synthetic tool results\n        # for any tool calls that were added but don't have corresponding results\n        try:\n            # Find all tool calls in recent assistant messages\n            orphaned_tool_calls = []\n            for msg in reversed(self.message_history[-10:]):  # Check recent messages\n                if msg.get(\"role\") == \"assistant\" and msg.get(\"tool_calls\"):\n                    for tool_call in msg[\"tool_calls\"]:\n                        call_id = tool_call.get(\"id\")\n                        if call_id:\n                            # Check if this tool call has a corresponding tool result\n                            has_result = any(\n                                m.get(\"role\") == \"tool\" and m.get(\"tool_call_id\") == call_id\n                                for m in self.message_history\n                            )\n                            if not has_result:\n                                orphaned_tool_calls.append((call_id, tool_call))\n\n            # Add synthetic tool results for orphaned tool calls\n            for call_id, tool_call in orphaned_tool_calls:\n                tool_response_msg = {\n                    \"role\": \"tool\",\n                    \"tool_call_id\": call_id,\n                    \"content\": \"Tool execution interrupted\"\n                }\n                self.add_to_message_history(tool_response_msg)\n\n        except Exception as cleanup_error:\n            # Don't let cleanup errors mask the original KeyboardInterrupt\n            logger.debug(f\"Error during interrupt cleanup: {cleanup_error}\")\n\n        # Make sure to clean up and re-raise\n        raise\n\n    except Exception as e:\n        # Handle other exceptions\n        logger.error(f\"Error in stream_response: {e}\")\n        raise\n\n    finally:\n        # Always clean up resources\n        # This block executes whether the try block succeeds, fails, or is interrupted\n\n        # Clean up streaming context\n        if streaming_context:\n            try:\n                # Check if we need to force stop the streaming panel\n                if streaming_context.get(\"is_started\", False) and streaming_context.get(\"live\"):\n                    streaming_context[\"live\"].stop()\n\n                # Remove from active streaming contexts\n                if hasattr(create_agent_streaming_context, \"_active_streaming\"):\n                    for key, value in list(\n                        create_agent_streaming_context._active_streaming.items()\n                    ):\n                        if value is streaming_context:\n                            del create_agent_streaming_context._active_streaming[key]\n                            break\n            except Exception as cleanup_error:\n                logger.debug(f\"Error cleaning up streaming context: {cleanup_error}\")\n\n        # Clean up thinking context\n        if thinking_context:\n            try:\n                # Force finish the thinking display\n                from cai.util import finish_claude_thinking_display\n\n                finish_claude_thinking_display(thinking_context)\n            except Exception as cleanup_error:\n                logger.debug(f\"Error cleaning up thinking context: {cleanup_error}\")\n\n        # Clean up any live streaming panels\n        if hasattr(cli_print_tool_output, \"_streaming_sessions\"):\n            # Find any sessions related to this stream\n            for call_id in list(cli_print_tool_output._streaming_sessions.keys()):\n                if call_id in _LIVE_STREAMING_PANELS:\n                    try:\n                        live = _LIVE_STREAMING_PANELS[call_id]\n                        live.stop()\n                        del _LIVE_STREAMING_PANELS[call_id]\n                    except Exception:\n                        pass\n\n        # Stop active timer and start idle timer\n        try:\n            stop_active_timer()\n            start_idle_timer()\n        except Exception:\n            pass\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.set_current_active_model","title":"set_current_active_model","text":"<pre><code>set_current_active_model(model)\n</code></pre> <p>Set the current active model for tool execution context.</p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>def set_current_active_model(model):\n    \"\"\"Set the current active model for tool execution context.\"\"\"\n    _current_model_context.set(weakref.ref(model) if model else None)\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.get_current_active_model","title":"get_current_active_model","text":"<pre><code>get_current_active_model()\n</code></pre> <p>Get the current active model.</p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>def get_current_active_model():\n    \"\"\"Get the current active model.\"\"\"\n    model_ref = _current_model_context.get()\n    if model_ref:\n        return model_ref()\n    return None\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.get_agent_message_history","title":"get_agent_message_history","text":"<pre><code>get_agent_message_history(agent_name: str) -&gt; list\n</code></pre> <p>Get message history for a specific agent.</p> <p>With SimpleAgentManager, this is much simpler - we only have one active agent.</p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>def get_agent_message_history(agent_name: str) -&gt; list:\n    \"\"\"Get message history for a specific agent.\n\n    With SimpleAgentManager, this is much simpler - we only have one active agent.\n    \"\"\"\n    # Remove any ID suffix if present (e.g., \"[P1]\")\n    if \"[\" in agent_name and agent_name.endswith(\"]\"):\n        base_name = agent_name.rsplit(\"[\", 1)[0].strip()\n    else:\n        base_name = agent_name\n\n    # Get history from SimpleAgentManager\n    return AGENT_MANAGER.get_message_history(base_name)\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.get_all_agent_histories","title":"get_all_agent_histories","text":"<pre><code>get_all_agent_histories() -&gt; dict\n</code></pre> <p>Get all agent message histories.</p> <p>With SimpleAgentManager, we only track the active agent's history.</p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>def get_all_agent_histories() -&gt; dict:\n    \"\"\"Get all agent message histories.\n\n    With SimpleAgentManager, we only track the active agent's history.\n    \"\"\"\n    return AGENT_MANAGER.get_all_histories()\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.clear_agent_history","title":"clear_agent_history","text":"<pre><code>clear_agent_history(agent_name: str)\n</code></pre> <p>Clear history for a specific agent.</p> <p>With SimpleAgentManager, this is much simpler.</p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>def clear_agent_history(agent_name: str):\n    \"\"\"Clear history for a specific agent.\n\n    With SimpleAgentManager, this is much simpler.\n    \"\"\"\n    # Remove any ID suffix if present\n    if \"[\" in agent_name and agent_name.endswith(\"]\"):\n        base_name = agent_name.rsplit(\"[\", 1)[0].strip()\n    else:\n        base_name = agent_name\n\n    # Clear from SimpleAgentManager\n    AGENT_MANAGER.clear_history(base_name)\n\n    # Also clear the current instance if it matches\n    active_agent = AGENT_MANAGER.get_active_agent()\n    if active_agent and hasattr(active_agent, 'message_history'):\n        if hasattr(active_agent, 'agent_name') and active_agent.agent_name == base_name:\n            active_agent.message_history.clear()\n            # Reset context usage for this agent\n            os.environ['CAI_CONTEXT_USAGE'] = '0.0'\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.clear_all_histories","title":"clear_all_histories","text":"<pre><code>clear_all_histories()\n</code></pre> <p>Clear all agent histories.</p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>def clear_all_histories():\n    \"\"\"Clear all agent histories.\"\"\"\n    # Clear from SimpleAgentManager\n    AGENT_MANAGER.clear_all_histories()\n\n    # Clear active agent's history if present\n    active_agent = AGENT_MANAGER.get_active_agent()\n    if active_agent and hasattr(active_agent, 'message_history'):\n        active_agent.message_history.clear()\n\n    # Clear all persistent histories\n    PERSISTENT_MESSAGE_HISTORIES.clear()\n\n    # Reset context usage since all histories are cleared\n    os.environ['CAI_CONTEXT_USAGE'] = '0.0'\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#cai.sdk.agents.models.openai_chatcompletions.count_tokens_with_tiktoken","title":"count_tokens_with_tiktoken","text":"<pre><code>count_tokens_with_tiktoken(text_or_messages)\n</code></pre> <p>Count tokens consistently using tiktoken library. Works with both strings and message lists. Returns a tuple of (input_tokens, reasoning_tokens).</p> Source code in <code>src/cai/sdk/agents/models/openai_chatcompletions.py</code> <pre><code>def count_tokens_with_tiktoken(text_or_messages):\n    \"\"\"\n    Count tokens consistently using tiktoken library.\n    Works with both strings and message lists.\n    Returns a tuple of (input_tokens, reasoning_tokens).\n    \"\"\"\n    if not text_or_messages:\n        return 0, 0\n\n    try:\n        # Try to use cl100k_base encoding (used by GPT-4 and GPT-3.5-turbo)\n        encoding = tiktoken.get_encoding(\"cl100k_base\")\n    except:\n        # Fall back to GPT-2 encoding if cl100k is not available\n        try:\n            encoding = tiktoken.get_encoding(\"gpt2\")\n        except:\n            # If tiktoken fails, fall back to character estimate\n            if isinstance(text_or_messages, str):\n                return len(text_or_messages) // 4, 0\n            elif isinstance(text_or_messages, list):\n                total_len = 0\n                for msg in text_or_messages:\n                    if isinstance(msg, dict) and \"content\" in msg:\n                        if isinstance(msg[\"content\"], str):\n                            total_len += len(msg[\"content\"])\n                return total_len // 4, 0\n            else:\n                return 0, 0\n\n    # Process different input types\n    if isinstance(text_or_messages, str):\n        token_count = len(encoding.encode(text_or_messages))\n        return token_count, 0\n    elif isinstance(text_or_messages, list):\n        total_tokens = 0\n        reasoning_tokens = 0\n\n        # Add tokens for the messages format (ChatML format overhead)\n        # Each message has a base overhead (usually ~4 tokens)\n        total_tokens += len(text_or_messages) * 4\n\n        for msg in text_or_messages:\n            if isinstance(msg, dict):\n                # Add tokens for role\n                if \"role\" in msg:\n                    total_tokens += len(encoding.encode(msg[\"role\"]))\n\n                # Count content tokens\n                if \"content\" in msg and msg[\"content\"]:\n                    if isinstance(msg[\"content\"], str):\n                        content_tokens = len(encoding.encode(msg[\"content\"]))\n                        total_tokens += content_tokens\n\n                        # Count tokens in assistant messages as reasoning tokens\n                        if msg.get(\"role\") == \"assistant\":\n                            reasoning_tokens += content_tokens\n                    elif isinstance(msg[\"content\"], list):\n                        for content_part in msg[\"content\"]:\n                            if isinstance(content_part, dict) and \"text\" in content_part:\n                                part_tokens = len(encoding.encode(content_part[\"text\"]))\n                                total_tokens += part_tokens\n                                if msg.get(\"role\") == \"assistant\":\n                                    reasoning_tokens += part_tokens\n\n        return total_tokens, reasoning_tokens\n    else:\n        return 0, 0\n</code></pre>"},{"location":"ref/models/openai_responses/","title":"<code>OpenAI Responses model</code>","text":""},{"location":"ref/models/openai_responses/#cai.sdk.agents.models.openai_responses.OpenAIResponsesModel","title":"OpenAIResponsesModel","text":"<p>               Bases: <code>Model</code></p> <p>Implementation of <code>Model</code> that uses the OpenAI Responses API.</p> Source code in <code>src/cai/sdk/agents/models/openai_responses.py</code> <pre><code>class OpenAIResponsesModel(Model):\n    \"\"\"\n    Implementation of `Model` that uses the OpenAI Responses API.\n    \"\"\"\n\n    def __init__(\n        self,\n        model: str | ChatModel,\n        openai_client: AsyncOpenAI,\n    ) -&gt; None:\n        print(f\"\\nDEBUG: OpenAIResponsesModel initialized with model: {model}\\n\")\n        self.model = model\n        self._client = openai_client\n\n        # Track interaction counter and token totals for cli display\n        self.interaction_counter = 0\n        self.total_input_tokens = 0\n        self.total_output_tokens = 0\n        self.total_reasoning_tokens = 0\n        self.agent_name = \"Agent\"  # Default name\n\n    def set_agent_name(self, name: str) -&gt; None:\n        \"\"\"Set the agent name for CLI display purposes.\"\"\"\n        self.agent_name = name\n\n    def _non_null_or_not_given(self, value: Any) -&gt; Any:\n        return value if value is not None else NOT_GIVEN\n\n    async def get_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        tracing: ModelTracing,\n    ) -&gt; ModelResponse:\n        # Increment the interaction counter for CLI display\n        self.interaction_counter += 1\n\n        with response_span(disabled=tracing.is_disabled()) as span_response:\n            try:\n                response = await self._fetch_response(\n                    system_instructions,\n                    input,\n                    model_settings,\n                    tools,\n                    output_schema,\n                    handoffs,\n                    stream=False,\n                )\n\n                if _debug.DONT_LOG_MODEL_DATA:\n                    logger.debug(\"LLM responded\")\n                else:\n                    logger.debug(\n                        \"LLM resp:\\n\"\n                        f\"{json.dumps([x.model_dump() for x in response.output], indent=2)}\\n\"\n                    )\n\n                usage = (\n                    Usage(\n                        requests=1,\n                        input_tokens=response.usage.input_tokens,\n                        output_tokens=response.usage.output_tokens,\n                        total_tokens=response.usage.total_tokens,\n                    )\n                    if response.usage\n                    else Usage()\n                )\n\n                if tracing.include_data():\n                    span_response.span_data.response = response\n                    span_response.span_data.input = input\n\n                # Print the agent message for CLI display\n                from cai.util import cli_print_agent_messages\n                try:\n                    # Create a message-like object to display\n                    message_obj = type('ResponseWrapper', (), {\n                        'content': '\\n'.join([\n                            str(item.get('content', '')) if hasattr(item, 'get') \n                            else str(getattr(item, 'text', '')) \n                            for item in response.output \n                            if hasattr(item, 'get') or hasattr(item, 'text')\n                        ]),\n                        'tool_calls': [\n                            type('ToolCallWrapper', (), {\n                                'name': item.name,\n                                'arguments': item.arguments\n                            }) \n                            for item in response.output \n                            if hasattr(item, 'name') and hasattr(item, 'arguments')\n                        ]\n                    })\n\n                    cli_print_agent_messages(\n                        agent_name=getattr(self, 'agent_name', 'Agent'),\n                        message=message_obj,\n                        counter=getattr(self, 'interaction_counter', 0),\n                        model=str(self.model),\n                        debug=False,\n                        interaction_input_tokens=usage.input_tokens,\n                        interaction_output_tokens=usage.output_tokens,\n                        interaction_reasoning_tokens=0,  # Not available in Responses API\n                        total_input_tokens=getattr(self, 'total_input_tokens', 0),\n                        total_output_tokens=getattr(self, 'total_output_tokens', 0),\n                        total_reasoning_tokens=getattr(self, 'total_reasoning_tokens', 0),\n                        interaction_cost=None,\n                        total_cost=None,\n                    )\n\n                    # Update token totals\n                    self.total_input_tokens += usage.input_tokens\n                    self.total_output_tokens += usage.output_tokens\n                except Exception as e:\n                    logger.error(f\"Error printing agent message: {e}\")\n\n            except Exception as e:\n                span_response.set_error(\n                    SpanError(\n                        message=\"Error getting response\",\n                        data={\n                            \"error\": str(e) if tracing.include_data() else e.__class__.__name__,\n                        },\n                    )\n                )\n                request_id = e.request_id if isinstance(e, APIStatusError) else None\n                logger.error(f\"Error getting response: {e}. (request_id: {request_id})\")\n                raise\n\n        return ModelResponse(\n            output=response.output,\n            usage=usage,\n            referenceable_id=response.id,\n        )\n\n    async def stream_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        tracing: ModelTracing,\n    ) -&gt; AsyncIterator[ResponseStreamEvent]:\n        \"\"\"\n        Yields a partial message as it is generated, as well as the usage information.\n        \"\"\"\n        # Increment the interaction counter for CLI display\n        self.interaction_counter += 1\n\n        with response_span(disabled=tracing.is_disabled()) as span_response:\n            try:\n                stream = await self._fetch_response(\n                    system_instructions,\n                    input,\n                    model_settings,\n                    tools,\n                    output_schema,\n                    handoffs,\n                    stream=True,\n                )\n\n                final_response: Response | None = None\n\n                async for chunk in stream:\n                    if isinstance(chunk, ResponseCompletedEvent):\n                        final_response = chunk.response\n                    yield chunk\n\n                if final_response and tracing.include_data():\n                    span_response.span_data.response = final_response\n                    span_response.span_data.input = input\n\n                # Print the agent message for CLI display\n                from cai.util import cli_print_agent_messages\n                try:\n                    # Create a message-like object to display\n                    message_obj = type('ResponseWrapper', (), {\n                        'content': '\\n'.join([\n                            str(item.get('content', '')) if hasattr(item, 'get') \n                            else str(getattr(item, 'text', '')) \n                            for item in final_response.output \n                            if hasattr(item, 'get') or hasattr(item, 'text')\n                        ]),\n                        'tool_calls': [\n                            type('ToolCallWrapper', (), {\n                                'name': item.name,\n                                'arguments': item.arguments\n                            }) \n                            for item in final_response.output \n                            if hasattr(item, 'name') and hasattr(item, 'arguments')\n                        ]\n                    })\n\n                    cli_print_agent_messages(\n                        agent_name=getattr(self, 'agent_name', 'Agent'),\n                        message=message_obj,\n                        counter=getattr(self, 'interaction_counter', 0),\n                        model=str(self.model),\n                        debug=False,\n                        interaction_input_tokens=final_response.usage.input_tokens,\n                        interaction_output_tokens=final_response.usage.output_tokens,\n                        interaction_reasoning_tokens=0,  # Not available in Responses API\n                        total_input_tokens=getattr(self, 'total_input_tokens', 0),\n                        total_output_tokens=getattr(self, 'total_output_tokens', 0),\n                        total_reasoning_tokens=getattr(self, 'total_reasoning_tokens', 0),\n                        interaction_cost=None,\n                        total_cost=None,\n                    )\n\n                    # Update token totals\n                    self.total_input_tokens += final_response.usage.input_tokens\n                    self.total_output_tokens += final_response.usage.output_tokens\n                except Exception as e:\n                    logger.error(f\"Error printing agent message: {e}\")\n\n            except Exception as e:\n                span_response.set_error(\n                    SpanError(\n                        message=\"Error streaming response\",\n                        data={\n                            \"error\": str(e) if tracing.include_data() else e.__class__.__name__,\n                        },\n                    )\n                )\n                logger.error(f\"Error streaming response: {e}\")\n                raise\n\n    @overload\n    async def _fetch_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        stream: Literal[True],\n    ) -&gt; AsyncStream[ResponseStreamEvent]: ...\n\n    @overload\n    async def _fetch_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        stream: Literal[False],\n    ) -&gt; Response: ...\n\n    async def _fetch_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        stream: Literal[True] | Literal[False] = False,\n    ) -&gt; Response | AsyncStream[ResponseStreamEvent]:\n        list_input = ItemHelpers.input_to_new_input_list(input)\n\n        parallel_tool_calls = (\n            True\n            if model_settings.parallel_tool_calls and tools and len(tools) &gt; 0\n            else False\n            if model_settings.parallel_tool_calls is False\n            else NOT_GIVEN\n        )\n\n        tool_choice = Converter.convert_tool_choice(model_settings.tool_choice)\n        converted_tools = Converter.convert_tools(tools, handoffs)\n        response_format = Converter.get_response_format(output_schema)\n\n        if _debug.DONT_LOG_MODEL_DATA:\n            logger.debug(\"Calling LLM\")\n        else:\n            logger.debug(\n                f\"Calling LLM {self.model} with input:\\n\"\n                f\"{json.dumps(list_input, indent=2)}\\n\"\n                f\"Tools:\\n{json.dumps(converted_tools.tools, indent=2)}\\n\"\n                f\"Stream: {stream}\\n\"\n                f\"Tool choice: {tool_choice}\\n\"\n                f\"Response format: {response_format}\\n\"\n            )\n\n        return await self._client.responses.create(\n            instructions=self._non_null_or_not_given(system_instructions),\n            model=self.model,\n            input=list_input,\n            include=converted_tools.includes,\n            tools=converted_tools.tools,\n            temperature=self._non_null_or_not_given(model_settings.temperature),\n            top_p=self._non_null_or_not_given(model_settings.top_p),\n            truncation=self._non_null_or_not_given(model_settings.truncation),\n            max_output_tokens=self._non_null_or_not_given(model_settings.max_tokens),\n            tool_choice=tool_choice,\n            parallel_tool_calls=parallel_tool_calls,\n            stream=stream,\n            extra_headers=_HEADERS,\n            text=response_format,\n            store=self._non_null_or_not_given(model_settings.store),\n        )\n\n    def _get_client(self) -&gt; AsyncOpenAI:\n        if self._client is None:\n            self._client = AsyncOpenAI()\n        return self._client\n</code></pre>"},{"location":"ref/models/openai_responses/#cai.sdk.agents.models.openai_responses.OpenAIResponsesModel.set_agent_name","title":"set_agent_name","text":"<pre><code>set_agent_name(name: str) -&gt; None\n</code></pre> <p>Set the agent name for CLI display purposes.</p> Source code in <code>src/cai/sdk/agents/models/openai_responses.py</code> <pre><code>def set_agent_name(self, name: str) -&gt; None:\n    \"\"\"Set the agent name for CLI display purposes.\"\"\"\n    self.agent_name = name\n</code></pre>"},{"location":"ref/models/openai_responses/#cai.sdk.agents.models.openai_responses.OpenAIResponsesModel.stream_response","title":"stream_response  <code>async</code>","text":"<pre><code>stream_response(\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; AsyncIterator[ResponseStreamEvent]\n</code></pre> <p>Yields a partial message as it is generated, as well as the usage information.</p> Source code in <code>src/cai/sdk/agents/models/openai_responses.py</code> <pre><code>async def stream_response(\n    self,\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; AsyncIterator[ResponseStreamEvent]:\n    \"\"\"\n    Yields a partial message as it is generated, as well as the usage information.\n    \"\"\"\n    # Increment the interaction counter for CLI display\n    self.interaction_counter += 1\n\n    with response_span(disabled=tracing.is_disabled()) as span_response:\n        try:\n            stream = await self._fetch_response(\n                system_instructions,\n                input,\n                model_settings,\n                tools,\n                output_schema,\n                handoffs,\n                stream=True,\n            )\n\n            final_response: Response | None = None\n\n            async for chunk in stream:\n                if isinstance(chunk, ResponseCompletedEvent):\n                    final_response = chunk.response\n                yield chunk\n\n            if final_response and tracing.include_data():\n                span_response.span_data.response = final_response\n                span_response.span_data.input = input\n\n            # Print the agent message for CLI display\n            from cai.util import cli_print_agent_messages\n            try:\n                # Create a message-like object to display\n                message_obj = type('ResponseWrapper', (), {\n                    'content': '\\n'.join([\n                        str(item.get('content', '')) if hasattr(item, 'get') \n                        else str(getattr(item, 'text', '')) \n                        for item in final_response.output \n                        if hasattr(item, 'get') or hasattr(item, 'text')\n                    ]),\n                    'tool_calls': [\n                        type('ToolCallWrapper', (), {\n                            'name': item.name,\n                            'arguments': item.arguments\n                        }) \n                        for item in final_response.output \n                        if hasattr(item, 'name') and hasattr(item, 'arguments')\n                    ]\n                })\n\n                cli_print_agent_messages(\n                    agent_name=getattr(self, 'agent_name', 'Agent'),\n                    message=message_obj,\n                    counter=getattr(self, 'interaction_counter', 0),\n                    model=str(self.model),\n                    debug=False,\n                    interaction_input_tokens=final_response.usage.input_tokens,\n                    interaction_output_tokens=final_response.usage.output_tokens,\n                    interaction_reasoning_tokens=0,  # Not available in Responses API\n                    total_input_tokens=getattr(self, 'total_input_tokens', 0),\n                    total_output_tokens=getattr(self, 'total_output_tokens', 0),\n                    total_reasoning_tokens=getattr(self, 'total_reasoning_tokens', 0),\n                    interaction_cost=None,\n                    total_cost=None,\n                )\n\n                # Update token totals\n                self.total_input_tokens += final_response.usage.input_tokens\n                self.total_output_tokens += final_response.usage.output_tokens\n            except Exception as e:\n                logger.error(f\"Error printing agent message: {e}\")\n\n        except Exception as e:\n            span_response.set_error(\n                SpanError(\n                    message=\"Error streaming response\",\n                    data={\n                        \"error\": str(e) if tracing.include_data() else e.__class__.__name__,\n                    },\n                )\n            )\n            logger.error(f\"Error streaming response: {e}\")\n            raise\n</code></pre>"},{"location":"ref/models/openai_responses/#cai.sdk.agents.models.openai_responses.Converter","title":"Converter","text":"Source code in <code>src/cai/sdk/agents/models/openai_responses.py</code> <pre><code>class Converter:\n    @classmethod\n    def convert_tool_choice(\n        cls, tool_choice: Literal[\"auto\", \"required\", \"none\"] | str | None\n    ) -&gt; response_create_params.ToolChoice | NotGiven:\n        if tool_choice is None:\n            return NOT_GIVEN\n        elif tool_choice == \"required\":\n            return \"required\"\n        elif tool_choice == \"auto\":\n            return \"auto\"\n        elif tool_choice == \"none\":\n            return \"none\"\n        elif tool_choice == \"file_search\":\n            return {\n                \"type\": \"file_search\",\n            }\n        elif tool_choice == \"web_search_preview\":\n            return {\n                \"type\": \"web_search_preview\",\n            }\n        elif tool_choice == \"computer_use_preview\":\n            return {\n                \"type\": \"computer_use_preview\",\n            }\n        else:\n            return {\n                \"type\": \"function\",\n                \"name\": tool_choice,\n            }\n\n    @classmethod\n    def get_response_format(\n        cls, output_schema: AgentOutputSchema | None\n    ) -&gt; ResponseTextConfigParam | NotGiven:\n        if output_schema is None or output_schema.is_plain_text():\n            return NOT_GIVEN\n        else:\n            return {\n                \"format\": {\n                    \"type\": \"json_schema\",\n                    \"name\": \"final_output\",\n                    \"schema\": output_schema.json_schema(),\n                    \"strict\": output_schema.strict_json_schema,\n                }\n            }\n\n    @classmethod\n    def convert_tools(\n        cls,\n        tools: list[Tool],\n        handoffs: list[Handoff[Any]],\n    ) -&gt; ConvertedTools:\n        converted_tools: list[ToolParam] = []\n        includes: list[IncludeLiteral] = []\n\n        computer_tools = [tool for tool in tools if isinstance(tool, ComputerTool)]\n        if len(computer_tools) &gt; 1:\n            raise UserError(f\"You can only provide one computer tool. Got {len(computer_tools)}\")\n\n        for tool in tools:\n            converted_tool, include = cls._convert_tool(tool)\n            converted_tools.append(converted_tool)\n            if include:\n                includes.append(include)\n\n        for handoff in handoffs:\n            converted_tools.append(cls._convert_handoff_tool(handoff))\n\n        return ConvertedTools(tools=converted_tools, includes=includes)\n\n    @classmethod\n    def _convert_tool(cls, tool: Tool) -&gt; tuple[ToolParam, IncludeLiteral | None]:\n        \"\"\"Returns converted tool and includes\"\"\"\n\n        if isinstance(tool, FunctionTool):\n            converted_tool: ToolParam = {\n                \"name\": tool.name,\n                \"parameters\": tool.params_json_schema,\n                \"strict\": tool.strict_json_schema,\n                \"type\": \"function\",\n                \"description\": tool.description,\n            }\n            includes: IncludeLiteral | None = None\n        elif isinstance(tool, WebSearchTool):\n            ws: WebSearchToolParam = {\n                \"type\": \"web_search_preview\",\n                \"user_location\": tool.user_location,\n                \"search_context_size\": tool.search_context_size,\n            }\n            converted_tool = ws\n            includes = None\n        elif isinstance(tool, FileSearchTool):\n            converted_tool = {\n                \"type\": \"file_search\",\n                \"vector_store_ids\": tool.vector_store_ids,\n            }\n            if tool.max_num_results:\n                converted_tool[\"max_num_results\"] = tool.max_num_results\n            if tool.ranking_options:\n                converted_tool[\"ranking_options\"] = tool.ranking_options\n            if tool.filters:\n                converted_tool[\"filters\"] = tool.filters\n\n            includes = \"file_search_call.results\" if tool.include_search_results else None\n        elif isinstance(tool, ComputerTool):\n            converted_tool = {\n                \"type\": \"computer_use_preview\",\n                \"environment\": tool.computer.environment,\n                \"display_width\": tool.computer.dimensions[0],\n                \"display_height\": tool.computer.dimensions[1],\n            }\n            includes = None\n\n        else:\n            raise UserError(f\"Unknown tool type: {type(tool)}, tool\")\n\n        return converted_tool, includes\n\n    @classmethod\n    def _convert_handoff_tool(cls, handoff: Handoff) -&gt; ToolParam:\n        return {\n            \"name\": handoff.tool_name,\n            \"parameters\": handoff.input_json_schema,\n            \"strict\": handoff.strict_json_schema,\n            \"type\": \"function\",\n            \"description\": handoff.tool_description,\n        }\n</code></pre>"},{"location":"ref/tracing/","title":"Tracing module","text":""},{"location":"ref/tracing/#cai.sdk.agents.tracing.TracingProcessor","title":"TracingProcessor","text":"<p>               Bases: <code>ABC</code></p> <p>Interface for processing spans.</p> Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>class TracingProcessor(abc.ABC):\n    \"\"\"Interface for processing spans.\"\"\"\n\n    @abc.abstractmethod\n    def on_trace_start(self, trace: \"Trace\") -&gt; None:\n        \"\"\"Called when a trace is started.\n\n        Args:\n            trace: The trace that started.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def on_trace_end(self, trace: \"Trace\") -&gt; None:\n        \"\"\"Called when a trace is finished.\n\n        Args:\n            trace: The trace that started.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def on_span_start(self, span: \"Span[Any]\") -&gt; None:\n        \"\"\"Called when a span is started.\n\n        Args:\n            span: The span that started.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def on_span_end(self, span: \"Span[Any]\") -&gt; None:\n        \"\"\"Called when a span is finished. Should not block or raise exceptions.\n\n        Args:\n            span: The span that finished.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def shutdown(self) -&gt; None:\n        \"\"\"Called when the application stops.\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def force_flush(self) -&gt; None:\n        \"\"\"Forces an immediate flush of all queued spans/traces.\"\"\"\n        pass\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.TracingProcessor.on_trace_start","title":"on_trace_start  <code>abstractmethod</code>","text":"<pre><code>on_trace_start(trace: Trace) -&gt; None\n</code></pre> <p>Called when a trace is started.</p> <p>Parameters:</p> Name Type Description Default <code>trace</code> <code>Trace</code> <p>The trace that started.</p> required Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_trace_start(self, trace: \"Trace\") -&gt; None:\n    \"\"\"Called when a trace is started.\n\n    Args:\n        trace: The trace that started.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.TracingProcessor.on_trace_end","title":"on_trace_end  <code>abstractmethod</code>","text":"<pre><code>on_trace_end(trace: Trace) -&gt; None\n</code></pre> <p>Called when a trace is finished.</p> <p>Parameters:</p> Name Type Description Default <code>trace</code> <code>Trace</code> <p>The trace that started.</p> required Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_trace_end(self, trace: \"Trace\") -&gt; None:\n    \"\"\"Called when a trace is finished.\n\n    Args:\n        trace: The trace that started.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.TracingProcessor.on_span_start","title":"on_span_start  <code>abstractmethod</code>","text":"<pre><code>on_span_start(span: Span[Any]) -&gt; None\n</code></pre> <p>Called when a span is started.</p> <p>Parameters:</p> Name Type Description Default <code>span</code> <code>Span[Any]</code> <p>The span that started.</p> required Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_span_start(self, span: \"Span[Any]\") -&gt; None:\n    \"\"\"Called when a span is started.\n\n    Args:\n        span: The span that started.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.TracingProcessor.on_span_end","title":"on_span_end  <code>abstractmethod</code>","text":"<pre><code>on_span_end(span: Span[Any]) -&gt; None\n</code></pre> <p>Called when a span is finished. Should not block or raise exceptions.</p> <p>Parameters:</p> Name Type Description Default <code>span</code> <code>Span[Any]</code> <p>The span that finished.</p> required Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_span_end(self, span: \"Span[Any]\") -&gt; None:\n    \"\"\"Called when a span is finished. Should not block or raise exceptions.\n\n    Args:\n        span: The span that finished.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.TracingProcessor.shutdown","title":"shutdown  <code>abstractmethod</code>","text":"<pre><code>shutdown() -&gt; None\n</code></pre> <p>Called when the application stops.</p> Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef shutdown(self) -&gt; None:\n    \"\"\"Called when the application stops.\"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.TracingProcessor.force_flush","title":"force_flush  <code>abstractmethod</code>","text":"<pre><code>force_flush() -&gt; None\n</code></pre> <p>Forces an immediate flush of all queued spans/traces.</p> Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef force_flush(self) -&gt; None:\n    \"\"\"Forces an immediate flush of all queued spans/traces.\"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.Span","title":"Span","text":"<p>               Bases: <code>ABC</code>, <code>Generic[TSpanData]</code></p> Source code in <code>src/cai/sdk/agents/tracing/spans.py</code> <pre><code>class Span(abc.ABC, Generic[TSpanData]):\n    @property\n    @abc.abstractmethod\n    def trace_id(self) -&gt; str:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def span_id(self) -&gt; str:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def span_data(self) -&gt; TSpanData:\n        pass\n\n    @abc.abstractmethod\n    def start(self, mark_as_current: bool = False):\n        \"\"\"\n        Start the span.\n\n        Args:\n            mark_as_current: If true, the span will be marked as the current span.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def finish(self, reset_current: bool = False) -&gt; None:\n        \"\"\"\n        Finish the span.\n\n        Args:\n            reset_current: If true, the span will be reset as the current span.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def __enter__(self) -&gt; Span[TSpanData]:\n        pass\n\n    @abc.abstractmethod\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        pass\n\n    @property\n    @abc.abstractmethod\n    def parent_id(self) -&gt; str | None:\n        pass\n\n    @abc.abstractmethod\n    def set_error(self, error: SpanError) -&gt; None:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def error(self) -&gt; SpanError | None:\n        pass\n\n    @abc.abstractmethod\n    def export(self) -&gt; dict[str, Any] | None:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def started_at(self) -&gt; str | None:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def ended_at(self) -&gt; str | None:\n        pass\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.Span.start","title":"start  <code>abstractmethod</code>","text":"<pre><code>start(mark_as_current: bool = False)\n</code></pre> <p>Start the span.</p> <p>Parameters:</p> Name Type Description Default <code>mark_as_current</code> <code>bool</code> <p>If true, the span will be marked as the current span.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/spans.py</code> <pre><code>@abc.abstractmethod\ndef start(self, mark_as_current: bool = False):\n    \"\"\"\n    Start the span.\n\n    Args:\n        mark_as_current: If true, the span will be marked as the current span.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.Span.finish","title":"finish  <code>abstractmethod</code>","text":"<pre><code>finish(reset_current: bool = False) -&gt; None\n</code></pre> <p>Finish the span.</p> <p>Parameters:</p> Name Type Description Default <code>reset_current</code> <code>bool</code> <p>If true, the span will be reset as the current span.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/spans.py</code> <pre><code>@abc.abstractmethod\ndef finish(self, reset_current: bool = False) -&gt; None:\n    \"\"\"\n    Finish the span.\n\n    Args:\n        reset_current: If true, the span will be reset as the current span.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.Trace","title":"Trace","text":"<p>A trace is the root level object that tracing creates. It represents a logical \"workflow\".</p> Source code in <code>src/cai/sdk/agents/tracing/traces.py</code> <pre><code>class Trace:\n    \"\"\"\n    A trace is the root level object that tracing creates. It represents a logical \"workflow\".\n    \"\"\"\n\n    @abc.abstractmethod\n    def __enter__(self) -&gt; Trace:\n        pass\n\n    @abc.abstractmethod\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        pass\n\n    @abc.abstractmethod\n    def start(self, mark_as_current: bool = False):\n        \"\"\"\n        Start the trace.\n\n        Args:\n            mark_as_current: If true, the trace will be marked as the current trace.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def finish(self, reset_current: bool = False):\n        \"\"\"\n        Finish the trace.\n\n        Args:\n            reset_current: If true, the trace will be reset as the current trace.\n        \"\"\"\n        pass\n\n    @property\n    @abc.abstractmethod\n    def trace_id(self) -&gt; str:\n        \"\"\"\n        The trace ID.\n        \"\"\"\n        pass\n\n    @property\n    @abc.abstractmethod\n    def name(self) -&gt; str:\n        \"\"\"\n        The name of the workflow being traced.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def export(self) -&gt; dict[str, Any] | None:\n        \"\"\"\n        Export the trace as a dictionary.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.Trace.trace_id","title":"trace_id  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>trace_id: str\n</code></pre> <p>The trace ID.</p>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.Trace.name","title":"name  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the workflow being traced.</p>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.Trace.start","title":"start  <code>abstractmethod</code>","text":"<pre><code>start(mark_as_current: bool = False)\n</code></pre> <p>Start the trace.</p> <p>Parameters:</p> Name Type Description Default <code>mark_as_current</code> <code>bool</code> <p>If true, the trace will be marked as the current trace.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/traces.py</code> <pre><code>@abc.abstractmethod\ndef start(self, mark_as_current: bool = False):\n    \"\"\"\n    Start the trace.\n\n    Args:\n        mark_as_current: If true, the trace will be marked as the current trace.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.Trace.finish","title":"finish  <code>abstractmethod</code>","text":"<pre><code>finish(reset_current: bool = False)\n</code></pre> <p>Finish the trace.</p> <p>Parameters:</p> Name Type Description Default <code>reset_current</code> <code>bool</code> <p>If true, the trace will be reset as the current trace.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/traces.py</code> <pre><code>@abc.abstractmethod\ndef finish(self, reset_current: bool = False):\n    \"\"\"\n    Finish the trace.\n\n    Args:\n        reset_current: If true, the trace will be reset as the current trace.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.Trace.export","title":"export  <code>abstractmethod</code>","text":"<pre><code>export() -&gt; dict[str, Any] | None\n</code></pre> <p>Export the trace as a dictionary.</p> Source code in <code>src/cai/sdk/agents/tracing/traces.py</code> <pre><code>@abc.abstractmethod\ndef export(self) -&gt; dict[str, Any] | None:\n    \"\"\"\n    Export the trace as a dictionary.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.agent_span","title":"agent_span","text":"<pre><code>agent_span(\n    name: str,\n    handoffs: list[str] | None = None,\n    tools: list[str] | None = None,\n    output_type: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[AgentSpanData]\n</code></pre> <p>Create a new agent span. The span will not be started automatically, you should either do <code>with agent_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the agent.</p> required <code>handoffs</code> <code>list[str] | None</code> <p>Optional list of agent names to which this agent could hand off control.</p> <code>None</code> <code>tools</code> <code>list[str] | None</code> <p>Optional list of tool names available to this agent.</p> <code>None</code> <code>output_type</code> <code>str | None</code> <p>Optional name of the output type produced by the agent.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[AgentSpanData]</code> <p>The newly created agent span.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def agent_span(\n    name: str,\n    handoffs: list[str] | None = None,\n    tools: list[str] | None = None,\n    output_type: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[AgentSpanData]:\n    \"\"\"Create a new agent span. The span will not be started automatically, you should either do\n    `with agent_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the agent.\n        handoffs: Optional list of agent names to which this agent could hand off control.\n        tools: Optional list of tool names available to this agent.\n        output_type: Optional name of the output type produced by the agent.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created agent span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=AgentSpanData(name=name, handoffs=handoffs, tools=tools, output_type=output_type),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.custom_span","title":"custom_span","text":"<pre><code>custom_span(\n    name: str,\n    data: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[CustomSpanData]\n</code></pre> <p>Create a new custom span, to which you can add your own metadata. The span will not be started automatically, you should either do <code>with custom_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the custom span.</p> required <code>data</code> <code>dict[str, Any] | None</code> <p>Arbitrary structured data to associate with the span.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[CustomSpanData]</code> <p>The newly created custom span.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def custom_span(\n    name: str,\n    data: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[CustomSpanData]:\n    \"\"\"Create a new custom span, to which you can add your own metadata. The span will not be\n    started automatically, you should either do `with custom_span() ...` or call\n    `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the custom span.\n        data: Arbitrary structured data to associate with the span.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created custom span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=CustomSpanData(name=name, data=data or {}),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.function_span","title":"function_span","text":"<pre><code>function_span(\n    name: str,\n    input: str | None = None,\n    output: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[FunctionSpanData]\n</code></pre> <p>Create a new function span. The span will not be started automatically, you should either do <code>with function_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the function.</p> required <code>input</code> <code>str | None</code> <p>The input to the function.</p> <code>None</code> <code>output</code> <code>str | None</code> <p>The output of the function.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[FunctionSpanData]</code> <p>The newly created function span.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def function_span(\n    name: str,\n    input: str | None = None,\n    output: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[FunctionSpanData]:\n    \"\"\"Create a new function span. The span will not be started automatically, you should either do\n    `with function_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the function.\n        input: The input to the function.\n        output: The output of the function.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created function span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=FunctionSpanData(name=name, input=input, output=output),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.generation_span","title":"generation_span","text":"<pre><code>generation_span(\n    input: Sequence[Mapping[str, Any]] | None = None,\n    output: Sequence[Mapping[str, Any]] | None = None,\n    model: str | None = None,\n    model_config: Mapping[str, Any] | None = None,\n    usage: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GenerationSpanData]\n</code></pre> <p>Create a new generation span. The span will not be started automatically, you should either do <code>with generation_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>This span captures the details of a model generation, including the input message sequence, any generated outputs, the model name and configuration, and usage data. If you only need to capture a model response identifier, use <code>response_span()</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>Sequence[Mapping[str, Any]] | None</code> <p>The sequence of input messages sent to the model.</p> <code>None</code> <code>output</code> <code>Sequence[Mapping[str, Any]] | None</code> <p>The sequence of output messages received from the model.</p> <code>None</code> <code>model</code> <code>str | None</code> <p>The model identifier used for the generation.</p> <code>None</code> <code>model_config</code> <code>Mapping[str, Any] | None</code> <p>The model configuration (hyperparameters) used.</p> <code>None</code> <code>usage</code> <code>dict[str, Any] | None</code> <p>A dictionary of usage information (input tokens, output tokens, etc.).</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[GenerationSpanData]</code> <p>The newly created generation span.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def generation_span(\n    input: Sequence[Mapping[str, Any]] | None = None,\n    output: Sequence[Mapping[str, Any]] | None = None,\n    model: str | None = None,\n    model_config: Mapping[str, Any] | None = None,\n    usage: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GenerationSpanData]:\n    \"\"\"Create a new generation span. The span will not be started automatically, you should either\n    do `with generation_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    This span captures the details of a model generation, including the\n    input message sequence, any generated outputs, the model name and\n    configuration, and usage data. If you only need to capture a model\n    response identifier, use `response_span()` instead.\n\n    Args:\n        input: The sequence of input messages sent to the model.\n        output: The sequence of output messages received from the model.\n        model: The model identifier used for the generation.\n        model_config: The model configuration (hyperparameters) used.\n        usage: A dictionary of usage information (input tokens, output tokens, etc.).\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created generation span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=GenerationSpanData(\n            input=input,\n            output=output,\n            model=model,\n            model_config=model_config,\n            usage=usage,\n        ),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.get_current_span","title":"get_current_span","text":"<pre><code>get_current_span() -&gt; Span[Any] | None\n</code></pre> <p>Returns the currently active span, if present.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def get_current_span() -&gt; Span[Any] | None:\n    \"\"\"Returns the currently active span, if present.\"\"\"\n    return GLOBAL_TRACE_PROVIDER.get_current_span()\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.get_current_trace","title":"get_current_trace","text":"<pre><code>get_current_trace() -&gt; Trace | None\n</code></pre> <p>Returns the currently active trace, if present.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def get_current_trace() -&gt; Trace | None:\n    \"\"\"Returns the currently active trace, if present.\"\"\"\n    return GLOBAL_TRACE_PROVIDER.get_current_trace()\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.guardrail_span","title":"guardrail_span","text":"<pre><code>guardrail_span(\n    name: str,\n    triggered: bool = False,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GuardrailSpanData]\n</code></pre> <p>Create a new guardrail span. The span will not be started automatically, you should either do <code>with guardrail_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the guardrail.</p> required <code>triggered</code> <code>bool</code> <p>Whether the guardrail was triggered.</p> <code>False</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def guardrail_span(\n    name: str,\n    triggered: bool = False,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GuardrailSpanData]:\n    \"\"\"Create a new guardrail span. The span will not be started automatically, you should either\n    do `with guardrail_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the guardrail.\n        triggered: Whether the guardrail was triggered.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=GuardrailSpanData(name=name, triggered=triggered),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.handoff_span","title":"handoff_span","text":"<pre><code>handoff_span(\n    from_agent: str | None = None,\n    to_agent: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[HandoffSpanData]\n</code></pre> <p>Create a new handoff span. The span will not be started automatically, you should either do <code>with handoff_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>from_agent</code> <code>str | None</code> <p>The name of the agent that is handing off.</p> <code>None</code> <code>to_agent</code> <code>str | None</code> <p>The name of the agent that is receiving the handoff.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[HandoffSpanData]</code> <p>The newly created handoff span.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def handoff_span(\n    from_agent: str | None = None,\n    to_agent: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[HandoffSpanData]:\n    \"\"\"Create a new handoff span. The span will not be started automatically, you should either do\n    `with handoff_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        from_agent: The name of the agent that is handing off.\n        to_agent: The name of the agent that is receiving the handoff.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created handoff span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=HandoffSpanData(from_agent=from_agent, to_agent=to_agent),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.mcp_tools_span","title":"mcp_tools_span","text":"<pre><code>mcp_tools_span(\n    server: str | None = None,\n    result: list[str] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[MCPListToolsSpanData]\n</code></pre> <p>Create a new MCP list tools span. The span will not be started automatically, you should either do <code>with mcp_tools_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>server</code> <code>str | None</code> <p>The name of the MCP server.</p> <code>None</code> <code>result</code> <code>list[str] | None</code> <p>The result of the MCP list tools call.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def mcp_tools_span(\n    server: str | None = None,\n    result: list[str] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[MCPListToolsSpanData]:\n    \"\"\"Create a new MCP list tools span. The span will not be started automatically, you should\n    either do `with mcp_tools_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        server: The name of the MCP server.\n        result: The result of the MCP list tools call.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=MCPListToolsSpanData(server=server, result=result),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.response_span","title":"response_span","text":"<pre><code>response_span(\n    response: Response | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[ResponseSpanData]\n</code></pre> <p>Create a new response span. The span will not be started automatically, you should either do <code>with response_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response | None</code> <p>The OpenAI Response object.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def response_span(\n    response: Response | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[ResponseSpanData]:\n    \"\"\"Create a new response span. The span will not be started automatically, you should either do\n    `with response_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        response: The OpenAI Response object.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=ResponseSpanData(response=response),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.speech_group_span","title":"speech_group_span","text":"<pre><code>speech_group_span(\n    input: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[SpeechGroupSpanData]\n</code></pre> <p>Create a new speech group span. The span will not be started automatically, you should either do <code>with speech_group_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>str | None</code> <p>The input text used for the speech request.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def speech_group_span(\n    input: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[SpeechGroupSpanData]:\n    \"\"\"Create a new speech group span. The span will not be started automatically, you should\n    either do `with speech_group_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        input: The input text used for the speech request.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=SpeechGroupSpanData(input=input),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.speech_span","title":"speech_span","text":"<pre><code>speech_span(\n    model: str | None = None,\n    input: str | None = None,\n    output: str | None = None,\n    output_format: str | None = \"pcm\",\n    model_config: Mapping[str, Any] | None = None,\n    first_content_at: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[SpeechSpanData]\n</code></pre> <p>Create a new speech span. The span will not be started automatically, you should either do <code>with speech_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str | None</code> <p>The name of the model used for the text-to-speech.</p> <code>None</code> <code>input</code> <code>str | None</code> <p>The text input of the text-to-speech.</p> <code>None</code> <code>output</code> <code>str | None</code> <p>The audio output of the text-to-speech as base64 encoded string of PCM audio bytes.</p> <code>None</code> <code>output_format</code> <code>str | None</code> <p>The format of the audio output (defaults to \"pcm\").</p> <code>'pcm'</code> <code>model_config</code> <code>Mapping[str, Any] | None</code> <p>The model configuration (hyperparameters) used.</p> <code>None</code> <code>first_content_at</code> <code>str | None</code> <p>The time of the first byte of the audio output.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def speech_span(\n    model: str | None = None,\n    input: str | None = None,\n    output: str | None = None,\n    output_format: str | None = \"pcm\",\n    model_config: Mapping[str, Any] | None = None,\n    first_content_at: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[SpeechSpanData]:\n    \"\"\"Create a new speech span. The span will not be started automatically, you should either do\n    `with speech_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        model: The name of the model used for the text-to-speech.\n        input: The text input of the text-to-speech.\n        output: The audio output of the text-to-speech as base64 encoded string of PCM audio bytes.\n        output_format: The format of the audio output (defaults to \"pcm\").\n        model_config: The model configuration (hyperparameters) used.\n        first_content_at: The time of the first byte of the audio output.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=SpeechSpanData(\n            model=model,\n            input=input,\n            output=output,\n            output_format=output_format,\n            model_config=model_config,\n            first_content_at=first_content_at,\n        ),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.trace","title":"trace","text":"<pre><code>trace(\n    workflow_name: str,\n    trace_id: str | None = None,\n    group_id: str | None = None,\n    metadata: dict[str, Any] | None = None,\n    disabled: bool = False,\n) -&gt; Trace\n</code></pre> <p>Create a new trace. The trace will not be started automatically; you should either use it as a context manager (<code>with trace(...):</code>) or call <code>trace.start()</code> + <code>trace.finish()</code> manually.</p> <p>In addition to the workflow name and optional grouping identifier, you can provide an arbitrary metadata dictionary to attach additional user-defined information to the trace.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_name</code> <code>str</code> <p>The name of the logical app or workflow. For example, you might provide \"code_bot\" for a coding agent, or \"customer_support_agent\" for a customer support agent.</p> required <code>trace_id</code> <code>str | None</code> <p>The ID of the trace. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_trace_id()</code> to generate a trace ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>group_id</code> <code>str | None</code> <p>Optional grouping identifier to link multiple traces from the same conversation or process. For instance, you might use a chat thread ID.</p> <code>None</code> <code>metadata</code> <code>dict[str, Any] | None</code> <p>Optional dictionary of additional metadata to attach to the trace.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Trace but the Trace will not be recorded. This will not be checked if there's an existing trace and <code>even_if_trace_running</code> is True.</p> <code>False</code> <p>Returns:</p> Type Description <code>Trace</code> <p>The newly created trace object.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def trace(\n    workflow_name: str,\n    trace_id: str | None = None,\n    group_id: str | None = None,\n    metadata: dict[str, Any] | None = None,\n    disabled: bool = False,\n) -&gt; Trace:\n    \"\"\"\n    Create a new trace. The trace will not be started automatically; you should either use\n    it as a context manager (`with trace(...):`) or call `trace.start()` + `trace.finish()`\n    manually.\n\n    In addition to the workflow name and optional grouping identifier, you can provide\n    an arbitrary metadata dictionary to attach additional user-defined information to\n    the trace.\n\n    Args:\n        workflow_name: The name of the logical app or workflow. For example, you might provide\n            \"code_bot\" for a coding agent, or \"customer_support_agent\" for a customer support agent.\n        trace_id: The ID of the trace. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_trace_id()` to generate a trace ID, to guarantee that IDs are\n            correctly formatted.\n        group_id: Optional grouping identifier to link multiple traces from the same conversation\n            or process. For instance, you might use a chat thread ID.\n        metadata: Optional dictionary of additional metadata to attach to the trace.\n        disabled: If True, we will return a Trace but the Trace will not be recorded. This will\n            not be checked if there's an existing trace and `even_if_trace_running` is True.\n\n    Returns:\n        The newly created trace object.\n    \"\"\"\n    current_trace = GLOBAL_TRACE_PROVIDER.get_current_trace()\n    if current_trace:\n        logger.warning(\n            \"Trace already exists. Creating a new trace, but this is probably a mistake.\"\n        )\n\n    return GLOBAL_TRACE_PROVIDER.create_trace(\n        name=workflow_name,\n        trace_id=trace_id,\n        group_id=group_id,\n        metadata=metadata,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.transcription_span","title":"transcription_span","text":"<pre><code>transcription_span(\n    model: str | None = None,\n    input: str | None = None,\n    input_format: str | None = \"pcm\",\n    output: str | None = None,\n    model_config: Mapping[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[TranscriptionSpanData]\n</code></pre> <p>Create a new transcription span. The span will not be started automatically, you should either do <code>with transcription_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str | None</code> <p>The name of the model used for the speech-to-text.</p> <code>None</code> <code>input</code> <code>str | None</code> <p>The audio input of the speech-to-text transcription, as a base64 encoded string of audio bytes.</p> <code>None</code> <code>input_format</code> <code>str | None</code> <p>The format of the audio input (defaults to \"pcm\").</p> <code>'pcm'</code> <code>output</code> <code>str | None</code> <p>The output of the speech-to-text transcription.</p> <code>None</code> <code>model_config</code> <code>Mapping[str, Any] | None</code> <p>The model configuration (hyperparameters) used.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[TranscriptionSpanData]</code> <p>The newly created speech-to-text span.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def transcription_span(\n    model: str | None = None,\n    input: str | None = None,\n    input_format: str | None = \"pcm\",\n    output: str | None = None,\n    model_config: Mapping[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[TranscriptionSpanData]:\n    \"\"\"Create a new transcription span. The span will not be started automatically, you should\n    either do `with transcription_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        model: The name of the model used for the speech-to-text.\n        input: The audio input of the speech-to-text transcription, as a base64 encoded string of\n            audio bytes.\n        input_format: The format of the audio input (defaults to \"pcm\").\n        output: The output of the speech-to-text transcription.\n        model_config: The model configuration (hyperparameters) used.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created speech-to-text span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=TranscriptionSpanData(\n            input=input,\n            input_format=input_format,\n            output=output,\n            model=model,\n            model_config=model_config,\n        ),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.gen_span_id","title":"gen_span_id","text":"<pre><code>gen_span_id() -&gt; str\n</code></pre> <p>Generates a new span ID.</p> Source code in <code>src/cai/sdk/agents/tracing/util.py</code> <pre><code>def gen_span_id() -&gt; str:\n    \"\"\"Generates a new span ID.\"\"\"\n    return f\"span_{uuid.uuid4().hex[:24]}\"\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.gen_trace_id","title":"gen_trace_id","text":"<pre><code>gen_trace_id() -&gt; str\n</code></pre> <p>Generates a new trace ID.</p> Source code in <code>src/cai/sdk/agents/tracing/util.py</code> <pre><code>def gen_trace_id() -&gt; str:\n    \"\"\"Generates a new trace ID.\"\"\"\n    return f\"trace_{uuid.uuid4().hex}\"\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.add_trace_processor","title":"add_trace_processor","text":"<pre><code>add_trace_processor(\n    span_processor: TracingProcessor,\n) -&gt; None\n</code></pre> <p>Adds a new trace processor. This processor will receive all traces/spans.</p> Source code in <code>src/cai/sdk/agents/tracing/__init__.py</code> <pre><code>def add_trace_processor(span_processor: TracingProcessor) -&gt; None:\n    \"\"\"\n    Adds a new trace processor. This processor will receive all traces/spans.\n    \"\"\"\n    GLOBAL_TRACE_PROVIDER.register_processor(span_processor)\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.set_trace_processors","title":"set_trace_processors","text":"<pre><code>set_trace_processors(\n    processors: list[TracingProcessor],\n) -&gt; None\n</code></pre> <p>Set the list of trace processors. This will replace the current list of processors.</p> Source code in <code>src/cai/sdk/agents/tracing/__init__.py</code> <pre><code>def set_trace_processors(processors: list[TracingProcessor]) -&gt; None:\n    \"\"\"\n    Set the list of trace processors. This will replace the current list of processors.\n    \"\"\"\n    GLOBAL_TRACE_PROVIDER.set_processors(processors)\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.set_tracing_disabled","title":"set_tracing_disabled","text":"<pre><code>set_tracing_disabled(disabled: bool) -&gt; None\n</code></pre> <p>Set whether tracing is globally disabled.</p> Source code in <code>src/cai/sdk/agents/tracing/__init__.py</code> <pre><code>def set_tracing_disabled(disabled: bool) -&gt; None:\n    \"\"\"\n    Set whether tracing is globally disabled.\n    \"\"\"\n    GLOBAL_TRACE_PROVIDER.set_disabled(disabled)\n</code></pre>"},{"location":"ref/tracing/#cai.sdk.agents.tracing.set_tracing_export_api_key","title":"set_tracing_export_api_key","text":"<pre><code>set_tracing_export_api_key(api_key: str) -&gt; None\n</code></pre> <p>Set the OpenAI API key for the backend exporter.</p> Source code in <code>src/cai/sdk/agents/tracing/__init__.py</code> <pre><code>def set_tracing_export_api_key(api_key: str) -&gt; None:\n    \"\"\"\n    Set the OpenAI API key for the backend exporter.\n    \"\"\"\n    default_exporter().set_api_key(api_key)\n</code></pre>"},{"location":"ref/tracing/create/","title":"<code>Creating traces/spans</code>","text":""},{"location":"ref/tracing/create/#cai.sdk.agents.tracing.create.trace","title":"trace","text":"<pre><code>trace(\n    workflow_name: str,\n    trace_id: str | None = None,\n    group_id: str | None = None,\n    metadata: dict[str, Any] | None = None,\n    disabled: bool = False,\n) -&gt; Trace\n</code></pre> <p>Create a new trace. The trace will not be started automatically; you should either use it as a context manager (<code>with trace(...):</code>) or call <code>trace.start()</code> + <code>trace.finish()</code> manually.</p> <p>In addition to the workflow name and optional grouping identifier, you can provide an arbitrary metadata dictionary to attach additional user-defined information to the trace.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_name</code> <code>str</code> <p>The name of the logical app or workflow. For example, you might provide \"code_bot\" for a coding agent, or \"customer_support_agent\" for a customer support agent.</p> required <code>trace_id</code> <code>str | None</code> <p>The ID of the trace. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_trace_id()</code> to generate a trace ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>group_id</code> <code>str | None</code> <p>Optional grouping identifier to link multiple traces from the same conversation or process. For instance, you might use a chat thread ID.</p> <code>None</code> <code>metadata</code> <code>dict[str, Any] | None</code> <p>Optional dictionary of additional metadata to attach to the trace.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Trace but the Trace will not be recorded. This will not be checked if there's an existing trace and <code>even_if_trace_running</code> is True.</p> <code>False</code> <p>Returns:</p> Type Description <code>Trace</code> <p>The newly created trace object.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def trace(\n    workflow_name: str,\n    trace_id: str | None = None,\n    group_id: str | None = None,\n    metadata: dict[str, Any] | None = None,\n    disabled: bool = False,\n) -&gt; Trace:\n    \"\"\"\n    Create a new trace. The trace will not be started automatically; you should either use\n    it as a context manager (`with trace(...):`) or call `trace.start()` + `trace.finish()`\n    manually.\n\n    In addition to the workflow name and optional grouping identifier, you can provide\n    an arbitrary metadata dictionary to attach additional user-defined information to\n    the trace.\n\n    Args:\n        workflow_name: The name of the logical app or workflow. For example, you might provide\n            \"code_bot\" for a coding agent, or \"customer_support_agent\" for a customer support agent.\n        trace_id: The ID of the trace. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_trace_id()` to generate a trace ID, to guarantee that IDs are\n            correctly formatted.\n        group_id: Optional grouping identifier to link multiple traces from the same conversation\n            or process. For instance, you might use a chat thread ID.\n        metadata: Optional dictionary of additional metadata to attach to the trace.\n        disabled: If True, we will return a Trace but the Trace will not be recorded. This will\n            not be checked if there's an existing trace and `even_if_trace_running` is True.\n\n    Returns:\n        The newly created trace object.\n    \"\"\"\n    current_trace = GLOBAL_TRACE_PROVIDER.get_current_trace()\n    if current_trace:\n        logger.warning(\n            \"Trace already exists. Creating a new trace, but this is probably a mistake.\"\n        )\n\n    return GLOBAL_TRACE_PROVIDER.create_trace(\n        name=workflow_name,\n        trace_id=trace_id,\n        group_id=group_id,\n        metadata=metadata,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#cai.sdk.agents.tracing.create.get_current_trace","title":"get_current_trace","text":"<pre><code>get_current_trace() -&gt; Trace | None\n</code></pre> <p>Returns the currently active trace, if present.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def get_current_trace() -&gt; Trace | None:\n    \"\"\"Returns the currently active trace, if present.\"\"\"\n    return GLOBAL_TRACE_PROVIDER.get_current_trace()\n</code></pre>"},{"location":"ref/tracing/create/#cai.sdk.agents.tracing.create.get_current_span","title":"get_current_span","text":"<pre><code>get_current_span() -&gt; Span[Any] | None\n</code></pre> <p>Returns the currently active span, if present.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def get_current_span() -&gt; Span[Any] | None:\n    \"\"\"Returns the currently active span, if present.\"\"\"\n    return GLOBAL_TRACE_PROVIDER.get_current_span()\n</code></pre>"},{"location":"ref/tracing/create/#cai.sdk.agents.tracing.create.agent_span","title":"agent_span","text":"<pre><code>agent_span(\n    name: str,\n    handoffs: list[str] | None = None,\n    tools: list[str] | None = None,\n    output_type: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[AgentSpanData]\n</code></pre> <p>Create a new agent span. The span will not be started automatically, you should either do <code>with agent_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the agent.</p> required <code>handoffs</code> <code>list[str] | None</code> <p>Optional list of agent names to which this agent could hand off control.</p> <code>None</code> <code>tools</code> <code>list[str] | None</code> <p>Optional list of tool names available to this agent.</p> <code>None</code> <code>output_type</code> <code>str | None</code> <p>Optional name of the output type produced by the agent.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[AgentSpanData]</code> <p>The newly created agent span.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def agent_span(\n    name: str,\n    handoffs: list[str] | None = None,\n    tools: list[str] | None = None,\n    output_type: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[AgentSpanData]:\n    \"\"\"Create a new agent span. The span will not be started automatically, you should either do\n    `with agent_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the agent.\n        handoffs: Optional list of agent names to which this agent could hand off control.\n        tools: Optional list of tool names available to this agent.\n        output_type: Optional name of the output type produced by the agent.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created agent span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=AgentSpanData(name=name, handoffs=handoffs, tools=tools, output_type=output_type),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#cai.sdk.agents.tracing.create.function_span","title":"function_span","text":"<pre><code>function_span(\n    name: str,\n    input: str | None = None,\n    output: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[FunctionSpanData]\n</code></pre> <p>Create a new function span. The span will not be started automatically, you should either do <code>with function_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the function.</p> required <code>input</code> <code>str | None</code> <p>The input to the function.</p> <code>None</code> <code>output</code> <code>str | None</code> <p>The output of the function.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[FunctionSpanData]</code> <p>The newly created function span.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def function_span(\n    name: str,\n    input: str | None = None,\n    output: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[FunctionSpanData]:\n    \"\"\"Create a new function span. The span will not be started automatically, you should either do\n    `with function_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the function.\n        input: The input to the function.\n        output: The output of the function.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created function span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=FunctionSpanData(name=name, input=input, output=output),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#cai.sdk.agents.tracing.create.generation_span","title":"generation_span","text":"<pre><code>generation_span(\n    input: Sequence[Mapping[str, Any]] | None = None,\n    output: Sequence[Mapping[str, Any]] | None = None,\n    model: str | None = None,\n    model_config: Mapping[str, Any] | None = None,\n    usage: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GenerationSpanData]\n</code></pre> <p>Create a new generation span. The span will not be started automatically, you should either do <code>with generation_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>This span captures the details of a model generation, including the input message sequence, any generated outputs, the model name and configuration, and usage data. If you only need to capture a model response identifier, use <code>response_span()</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>Sequence[Mapping[str, Any]] | None</code> <p>The sequence of input messages sent to the model.</p> <code>None</code> <code>output</code> <code>Sequence[Mapping[str, Any]] | None</code> <p>The sequence of output messages received from the model.</p> <code>None</code> <code>model</code> <code>str | None</code> <p>The model identifier used for the generation.</p> <code>None</code> <code>model_config</code> <code>Mapping[str, Any] | None</code> <p>The model configuration (hyperparameters) used.</p> <code>None</code> <code>usage</code> <code>dict[str, Any] | None</code> <p>A dictionary of usage information (input tokens, output tokens, etc.).</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[GenerationSpanData]</code> <p>The newly created generation span.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def generation_span(\n    input: Sequence[Mapping[str, Any]] | None = None,\n    output: Sequence[Mapping[str, Any]] | None = None,\n    model: str | None = None,\n    model_config: Mapping[str, Any] | None = None,\n    usage: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GenerationSpanData]:\n    \"\"\"Create a new generation span. The span will not be started automatically, you should either\n    do `with generation_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    This span captures the details of a model generation, including the\n    input message sequence, any generated outputs, the model name and\n    configuration, and usage data. If you only need to capture a model\n    response identifier, use `response_span()` instead.\n\n    Args:\n        input: The sequence of input messages sent to the model.\n        output: The sequence of output messages received from the model.\n        model: The model identifier used for the generation.\n        model_config: The model configuration (hyperparameters) used.\n        usage: A dictionary of usage information (input tokens, output tokens, etc.).\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created generation span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=GenerationSpanData(\n            input=input,\n            output=output,\n            model=model,\n            model_config=model_config,\n            usage=usage,\n        ),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#cai.sdk.agents.tracing.create.response_span","title":"response_span","text":"<pre><code>response_span(\n    response: Response | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[ResponseSpanData]\n</code></pre> <p>Create a new response span. The span will not be started automatically, you should either do <code>with response_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response | None</code> <p>The OpenAI Response object.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def response_span(\n    response: Response | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[ResponseSpanData]:\n    \"\"\"Create a new response span. The span will not be started automatically, you should either do\n    `with response_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        response: The OpenAI Response object.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=ResponseSpanData(response=response),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#cai.sdk.agents.tracing.create.handoff_span","title":"handoff_span","text":"<pre><code>handoff_span(\n    from_agent: str | None = None,\n    to_agent: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[HandoffSpanData]\n</code></pre> <p>Create a new handoff span. The span will not be started automatically, you should either do <code>with handoff_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>from_agent</code> <code>str | None</code> <p>The name of the agent that is handing off.</p> <code>None</code> <code>to_agent</code> <code>str | None</code> <p>The name of the agent that is receiving the handoff.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[HandoffSpanData]</code> <p>The newly created handoff span.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def handoff_span(\n    from_agent: str | None = None,\n    to_agent: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[HandoffSpanData]:\n    \"\"\"Create a new handoff span. The span will not be started automatically, you should either do\n    `with handoff_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        from_agent: The name of the agent that is handing off.\n        to_agent: The name of the agent that is receiving the handoff.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created handoff span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=HandoffSpanData(from_agent=from_agent, to_agent=to_agent),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#cai.sdk.agents.tracing.create.custom_span","title":"custom_span","text":"<pre><code>custom_span(\n    name: str,\n    data: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[CustomSpanData]\n</code></pre> <p>Create a new custom span, to which you can add your own metadata. The span will not be started automatically, you should either do <code>with custom_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the custom span.</p> required <code>data</code> <code>dict[str, Any] | None</code> <p>Arbitrary structured data to associate with the span.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[CustomSpanData]</code> <p>The newly created custom span.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def custom_span(\n    name: str,\n    data: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[CustomSpanData]:\n    \"\"\"Create a new custom span, to which you can add your own metadata. The span will not be\n    started automatically, you should either do `with custom_span() ...` or call\n    `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the custom span.\n        data: Arbitrary structured data to associate with the span.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created custom span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=CustomSpanData(name=name, data=data or {}),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#cai.sdk.agents.tracing.create.guardrail_span","title":"guardrail_span","text":"<pre><code>guardrail_span(\n    name: str,\n    triggered: bool = False,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GuardrailSpanData]\n</code></pre> <p>Create a new guardrail span. The span will not be started automatically, you should either do <code>with guardrail_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the guardrail.</p> required <code>triggered</code> <code>bool</code> <p>Whether the guardrail was triggered.</p> <code>False</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def guardrail_span(\n    name: str,\n    triggered: bool = False,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GuardrailSpanData]:\n    \"\"\"Create a new guardrail span. The span will not be started automatically, you should either\n    do `with guardrail_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the guardrail.\n        triggered: Whether the guardrail was triggered.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=GuardrailSpanData(name=name, triggered=triggered),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#cai.sdk.agents.tracing.create.transcription_span","title":"transcription_span","text":"<pre><code>transcription_span(\n    model: str | None = None,\n    input: str | None = None,\n    input_format: str | None = \"pcm\",\n    output: str | None = None,\n    model_config: Mapping[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[TranscriptionSpanData]\n</code></pre> <p>Create a new transcription span. The span will not be started automatically, you should either do <code>with transcription_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str | None</code> <p>The name of the model used for the speech-to-text.</p> <code>None</code> <code>input</code> <code>str | None</code> <p>The audio input of the speech-to-text transcription, as a base64 encoded string of audio bytes.</p> <code>None</code> <code>input_format</code> <code>str | None</code> <p>The format of the audio input (defaults to \"pcm\").</p> <code>'pcm'</code> <code>output</code> <code>str | None</code> <p>The output of the speech-to-text transcription.</p> <code>None</code> <code>model_config</code> <code>Mapping[str, Any] | None</code> <p>The model configuration (hyperparameters) used.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[TranscriptionSpanData]</code> <p>The newly created speech-to-text span.</p> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def transcription_span(\n    model: str | None = None,\n    input: str | None = None,\n    input_format: str | None = \"pcm\",\n    output: str | None = None,\n    model_config: Mapping[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[TranscriptionSpanData]:\n    \"\"\"Create a new transcription span. The span will not be started automatically, you should\n    either do `with transcription_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        model: The name of the model used for the speech-to-text.\n        input: The audio input of the speech-to-text transcription, as a base64 encoded string of\n            audio bytes.\n        input_format: The format of the audio input (defaults to \"pcm\").\n        output: The output of the speech-to-text transcription.\n        model_config: The model configuration (hyperparameters) used.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created speech-to-text span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=TranscriptionSpanData(\n            input=input,\n            input_format=input_format,\n            output=output,\n            model=model,\n            model_config=model_config,\n        ),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#cai.sdk.agents.tracing.create.speech_span","title":"speech_span","text":"<pre><code>speech_span(\n    model: str | None = None,\n    input: str | None = None,\n    output: str | None = None,\n    output_format: str | None = \"pcm\",\n    model_config: Mapping[str, Any] | None = None,\n    first_content_at: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[SpeechSpanData]\n</code></pre> <p>Create a new speech span. The span will not be started automatically, you should either do <code>with speech_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str | None</code> <p>The name of the model used for the text-to-speech.</p> <code>None</code> <code>input</code> <code>str | None</code> <p>The text input of the text-to-speech.</p> <code>None</code> <code>output</code> <code>str | None</code> <p>The audio output of the text-to-speech as base64 encoded string of PCM audio bytes.</p> <code>None</code> <code>output_format</code> <code>str | None</code> <p>The format of the audio output (defaults to \"pcm\").</p> <code>'pcm'</code> <code>model_config</code> <code>Mapping[str, Any] | None</code> <p>The model configuration (hyperparameters) used.</p> <code>None</code> <code>first_content_at</code> <code>str | None</code> <p>The time of the first byte of the audio output.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def speech_span(\n    model: str | None = None,\n    input: str | None = None,\n    output: str | None = None,\n    output_format: str | None = \"pcm\",\n    model_config: Mapping[str, Any] | None = None,\n    first_content_at: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[SpeechSpanData]:\n    \"\"\"Create a new speech span. The span will not be started automatically, you should either do\n    `with speech_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        model: The name of the model used for the text-to-speech.\n        input: The text input of the text-to-speech.\n        output: The audio output of the text-to-speech as base64 encoded string of PCM audio bytes.\n        output_format: The format of the audio output (defaults to \"pcm\").\n        model_config: The model configuration (hyperparameters) used.\n        first_content_at: The time of the first byte of the audio output.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=SpeechSpanData(\n            model=model,\n            input=input,\n            output=output,\n            output_format=output_format,\n            model_config=model_config,\n            first_content_at=first_content_at,\n        ),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#cai.sdk.agents.tracing.create.speech_group_span","title":"speech_group_span","text":"<pre><code>speech_group_span(\n    input: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[SpeechGroupSpanData]\n</code></pre> <p>Create a new speech group span. The span will not be started automatically, you should either do <code>with speech_group_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>str | None</code> <p>The input text used for the speech request.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def speech_group_span(\n    input: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[SpeechGroupSpanData]:\n    \"\"\"Create a new speech group span. The span will not be started automatically, you should\n    either do `with speech_group_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        input: The input text used for the speech request.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=SpeechGroupSpanData(input=input),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#cai.sdk.agents.tracing.create.mcp_tools_span","title":"mcp_tools_span","text":"<pre><code>mcp_tools_span(\n    server: str | None = None,\n    result: list[str] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[MCPListToolsSpanData]\n</code></pre> <p>Create a new MCP list tools span. The span will not be started automatically, you should either do <code>with mcp_tools_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>server</code> <code>str | None</code> <p>The name of the MCP server.</p> <code>None</code> <code>result</code> <code>list[str] | None</code> <p>The result of the MCP list tools call.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/create.py</code> <pre><code>def mcp_tools_span(\n    server: str | None = None,\n    result: list[str] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[MCPListToolsSpanData]:\n    \"\"\"Create a new MCP list tools span. The span will not be started automatically, you should\n    either do `with mcp_tools_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        server: The name of the MCP server.\n        result: The result of the MCP list tools call.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=MCPListToolsSpanData(server=server, result=result),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/processor_interface/","title":"<code>Processor interface</code>","text":""},{"location":"ref/tracing/processor_interface/#cai.sdk.agents.tracing.processor_interface.TracingProcessor","title":"TracingProcessor","text":"<p>               Bases: <code>ABC</code></p> <p>Interface for processing spans.</p> Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>class TracingProcessor(abc.ABC):\n    \"\"\"Interface for processing spans.\"\"\"\n\n    @abc.abstractmethod\n    def on_trace_start(self, trace: \"Trace\") -&gt; None:\n        \"\"\"Called when a trace is started.\n\n        Args:\n            trace: The trace that started.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def on_trace_end(self, trace: \"Trace\") -&gt; None:\n        \"\"\"Called when a trace is finished.\n\n        Args:\n            trace: The trace that started.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def on_span_start(self, span: \"Span[Any]\") -&gt; None:\n        \"\"\"Called when a span is started.\n\n        Args:\n            span: The span that started.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def on_span_end(self, span: \"Span[Any]\") -&gt; None:\n        \"\"\"Called when a span is finished. Should not block or raise exceptions.\n\n        Args:\n            span: The span that finished.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def shutdown(self) -&gt; None:\n        \"\"\"Called when the application stops.\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def force_flush(self) -&gt; None:\n        \"\"\"Forces an immediate flush of all queued spans/traces.\"\"\"\n        pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#cai.sdk.agents.tracing.processor_interface.TracingProcessor.on_trace_start","title":"on_trace_start  <code>abstractmethod</code>","text":"<pre><code>on_trace_start(trace: Trace) -&gt; None\n</code></pre> <p>Called when a trace is started.</p> <p>Parameters:</p> Name Type Description Default <code>trace</code> <code>Trace</code> <p>The trace that started.</p> required Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_trace_start(self, trace: \"Trace\") -&gt; None:\n    \"\"\"Called when a trace is started.\n\n    Args:\n        trace: The trace that started.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#cai.sdk.agents.tracing.processor_interface.TracingProcessor.on_trace_end","title":"on_trace_end  <code>abstractmethod</code>","text":"<pre><code>on_trace_end(trace: Trace) -&gt; None\n</code></pre> <p>Called when a trace is finished.</p> <p>Parameters:</p> Name Type Description Default <code>trace</code> <code>Trace</code> <p>The trace that started.</p> required Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_trace_end(self, trace: \"Trace\") -&gt; None:\n    \"\"\"Called when a trace is finished.\n\n    Args:\n        trace: The trace that started.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#cai.sdk.agents.tracing.processor_interface.TracingProcessor.on_span_start","title":"on_span_start  <code>abstractmethod</code>","text":"<pre><code>on_span_start(span: Span[Any]) -&gt; None\n</code></pre> <p>Called when a span is started.</p> <p>Parameters:</p> Name Type Description Default <code>span</code> <code>Span[Any]</code> <p>The span that started.</p> required Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_span_start(self, span: \"Span[Any]\") -&gt; None:\n    \"\"\"Called when a span is started.\n\n    Args:\n        span: The span that started.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#cai.sdk.agents.tracing.processor_interface.TracingProcessor.on_span_end","title":"on_span_end  <code>abstractmethod</code>","text":"<pre><code>on_span_end(span: Span[Any]) -&gt; None\n</code></pre> <p>Called when a span is finished. Should not block or raise exceptions.</p> <p>Parameters:</p> Name Type Description Default <code>span</code> <code>Span[Any]</code> <p>The span that finished.</p> required Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_span_end(self, span: \"Span[Any]\") -&gt; None:\n    \"\"\"Called when a span is finished. Should not block or raise exceptions.\n\n    Args:\n        span: The span that finished.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#cai.sdk.agents.tracing.processor_interface.TracingProcessor.shutdown","title":"shutdown  <code>abstractmethod</code>","text":"<pre><code>shutdown() -&gt; None\n</code></pre> <p>Called when the application stops.</p> Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef shutdown(self) -&gt; None:\n    \"\"\"Called when the application stops.\"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#cai.sdk.agents.tracing.processor_interface.TracingProcessor.force_flush","title":"force_flush  <code>abstractmethod</code>","text":"<pre><code>force_flush() -&gt; None\n</code></pre> <p>Forces an immediate flush of all queued spans/traces.</p> Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef force_flush(self) -&gt; None:\n    \"\"\"Forces an immediate flush of all queued spans/traces.\"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#cai.sdk.agents.tracing.processor_interface.TracingExporter","title":"TracingExporter","text":"<p>               Bases: <code>ABC</code></p> <p>Exports traces and spans. For example, could log them or send them to a backend.</p> Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>class TracingExporter(abc.ABC):\n    \"\"\"Exports traces and spans. For example, could log them or send them to a backend.\"\"\"\n\n    @abc.abstractmethod\n    def export(self, items: list[\"Trace | Span[Any]\"]) -&gt; None:\n        \"\"\"Exports a list of traces and spans.\n\n        Args:\n            items: The items to export.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#cai.sdk.agents.tracing.processor_interface.TracingExporter.export","title":"export  <code>abstractmethod</code>","text":"<pre><code>export(items: list[Trace | Span[Any]]) -&gt; None\n</code></pre> <p>Exports a list of traces and spans.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list[Trace | Span[Any]]</code> <p>The items to export.</p> required Source code in <code>src/cai/sdk/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef export(self, items: list[\"Trace | Span[Any]\"]) -&gt; None:\n    \"\"\"Exports a list of traces and spans.\n\n    Args:\n        items: The items to export.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/processors/","title":"<code>Processors</code>","text":""},{"location":"ref/tracing/processors/#cai.sdk.agents.tracing.processors.ConsoleSpanExporter","title":"ConsoleSpanExporter","text":"<p>               Bases: <code>TracingExporter</code></p> <p>Prints the traces and spans to the console.</p> Source code in <code>src/cai/sdk/agents/tracing/processors.py</code> <pre><code>class ConsoleSpanExporter(TracingExporter):\n    \"\"\"Prints the traces and spans to the console.\"\"\"\n\n    def export(self, items: list[Trace | Span[Any]]) -&gt; None:\n        for item in items:\n            if isinstance(item, Trace):\n                print(f\"[Exporter] Export trace_id={item.trace_id}, name={item.name}, \")\n            else:\n                print(f\"[Exporter] Export span: {item.export()}\")\n</code></pre>"},{"location":"ref/tracing/processors/#cai.sdk.agents.tracing.processors.BackendSpanExporter","title":"BackendSpanExporter","text":"<p>               Bases: <code>TracingExporter</code></p> Source code in <code>src/cai/sdk/agents/tracing/processors.py</code> <pre><code>class BackendSpanExporter(TracingExporter):\n    def __init__(\n        self,\n        api_key: str | None = None,\n        organization: str | None = None,\n        project: str | None = None,\n        endpoint: str = \"https://api.openai.com/v1/traces/ingest\",\n        max_retries: int = 3,\n        base_delay: float = 1.0,\n        max_delay: float = 30.0,\n    ):\n        \"\"\"\n        Args:\n            api_key: The API key for the \"Authorization\" header. Defaults to\n                `os.environ[\"OPENAI_API_KEY\"]` if not provided.\n            organization: The OpenAI organization to use. Defaults to\n                `os.environ[\"OPENAI_ORG_ID\"]` if not provided.\n            project: The OpenAI project to use. Defaults to\n                `os.environ[\"OPENAI_PROJECT_ID\"]` if not provided.\n            endpoint: The HTTP endpoint to which traces/spans are posted.\n            max_retries: Maximum number of retries upon failures.\n            base_delay: Base delay (in seconds) for the first backoff.\n            max_delay: Maximum delay (in seconds) for backoff growth.\n        \"\"\"\n        self._api_key = api_key\n        self._organization = organization\n        self._project = project\n        self.endpoint = endpoint\n        self.max_retries = max_retries\n        self.base_delay = base_delay\n        self.max_delay = max_delay\n\n        # Keep a client open for connection pooling across multiple export calls\n        self._client = httpx.Client(timeout=httpx.Timeout(timeout=60, connect=5.0))\n\n    def set_api_key(self, api_key: str):\n        \"\"\"Set the OpenAI API key for the exporter.\n\n        Args:\n            api_key: The OpenAI API key to use. This is the same key used by the OpenAI Python\n                client.\n        \"\"\"\n        # We're specifically setting the underlying cached property as well\n        self._api_key = api_key\n        self.api_key = api_key\n\n    @cached_property\n    def api_key(self):\n        return self._api_key or os.environ.get(\"OPENAI_API_KEY\")\n\n    @cached_property\n    def organization(self):\n        return self._organization or os.environ.get(\"OPENAI_ORG_ID\")\n\n    @cached_property\n    def project(self):\n        return self._project or os.environ.get(\"OPENAI_PROJECT_ID\")\n\n    def export(self, items: list[Trace | Span[Any]]) -&gt; None:\n        if not items:\n            return\n\n        if not self.api_key:\n            logger.warning(\"OPENAI_API_KEY is not set, skipping trace export\")\n            return\n\n        data = [item.export() for item in items if item.export()]\n        payload = {\"data\": data}\n\n        headers = {\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"traces=v1\",\n        }\n\n        # Exponential backoff loop\n        attempt = 0\n        delay = self.base_delay\n        while True:\n            attempt += 1\n            try:\n                response = self._client.post(url=self.endpoint, headers=headers, json=payload)\n\n                # If the response is successful, break out of the loop\n                if response.status_code &lt; 300:\n                    logger.debug(f\"Exported {len(items)} items\")\n                    return\n\n                # If the response is a client error (4xx), we wont retry\n                if 400 &lt;= response.status_code &lt; 500:\n                    logger.error(\n                        f\"[non-fatal] Tracing client error {response.status_code}: {response.text}\"\n                    )\n                    return\n\n                # For 5xx or other unexpected codes, treat it as transient and retry\n                logger.warning(\n                    f\"[non-fatal] Tracing: server error {response.status_code}, retrying.\"\n                )\n            except httpx.RequestError as exc:\n                # Network or other I/O error, we'll retry\n                logger.warning(f\"[non-fatal] Tracing: request failed: {exc}\")\n\n            # If we reach here, we need to retry or give up\n            if attempt &gt;= self.max_retries:\n                logger.error(\"[non-fatal] Tracing: max retries reached, giving up on this batch.\")\n                return\n\n            # Exponential backoff + jitter\n            sleep_time = delay + random.uniform(0, 0.1 * delay)  # 10% jitter\n            time.sleep(sleep_time)\n            delay = min(delay * 2, self.max_delay)\n\n    def close(self):\n        \"\"\"Close the underlying HTTP client.\"\"\"\n        self._client.close()\n</code></pre>"},{"location":"ref/tracing/processors/#cai.sdk.agents.tracing.processors.BackendSpanExporter.__init__","title":"__init__","text":"<pre><code>__init__(\n    api_key: str | None = None,\n    organization: str | None = None,\n    project: str | None = None,\n    endpoint: str = \"https://api.openai.com/v1/traces/ingest\",\n    max_retries: int = 3,\n    base_delay: float = 1.0,\n    max_delay: float = 30.0,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str | None</code> <p>The API key for the \"Authorization\" header. Defaults to <code>os.environ[\"OPENAI_API_KEY\"]</code> if not provided.</p> <code>None</code> <code>organization</code> <code>str | None</code> <p>The OpenAI organization to use. Defaults to <code>os.environ[\"OPENAI_ORG_ID\"]</code> if not provided.</p> <code>None</code> <code>project</code> <code>str | None</code> <p>The OpenAI project to use. Defaults to <code>os.environ[\"OPENAI_PROJECT_ID\"]</code> if not provided.</p> <code>None</code> <code>endpoint</code> <code>str</code> <p>The HTTP endpoint to which traces/spans are posted.</p> <code>'https://api.openai.com/v1/traces/ingest'</code> <code>max_retries</code> <code>int</code> <p>Maximum number of retries upon failures.</p> <code>3</code> <code>base_delay</code> <code>float</code> <p>Base delay (in seconds) for the first backoff.</p> <code>1.0</code> <code>max_delay</code> <code>float</code> <p>Maximum delay (in seconds) for backoff growth.</p> <code>30.0</code> Source code in <code>src/cai/sdk/agents/tracing/processors.py</code> <pre><code>def __init__(\n    self,\n    api_key: str | None = None,\n    organization: str | None = None,\n    project: str | None = None,\n    endpoint: str = \"https://api.openai.com/v1/traces/ingest\",\n    max_retries: int = 3,\n    base_delay: float = 1.0,\n    max_delay: float = 30.0,\n):\n    \"\"\"\n    Args:\n        api_key: The API key for the \"Authorization\" header. Defaults to\n            `os.environ[\"OPENAI_API_KEY\"]` if not provided.\n        organization: The OpenAI organization to use. Defaults to\n            `os.environ[\"OPENAI_ORG_ID\"]` if not provided.\n        project: The OpenAI project to use. Defaults to\n            `os.environ[\"OPENAI_PROJECT_ID\"]` if not provided.\n        endpoint: The HTTP endpoint to which traces/spans are posted.\n        max_retries: Maximum number of retries upon failures.\n        base_delay: Base delay (in seconds) for the first backoff.\n        max_delay: Maximum delay (in seconds) for backoff growth.\n    \"\"\"\n    self._api_key = api_key\n    self._organization = organization\n    self._project = project\n    self.endpoint = endpoint\n    self.max_retries = max_retries\n    self.base_delay = base_delay\n    self.max_delay = max_delay\n\n    # Keep a client open for connection pooling across multiple export calls\n    self._client = httpx.Client(timeout=httpx.Timeout(timeout=60, connect=5.0))\n</code></pre>"},{"location":"ref/tracing/processors/#cai.sdk.agents.tracing.processors.BackendSpanExporter.set_api_key","title":"set_api_key","text":"<pre><code>set_api_key(api_key: str)\n</code></pre> <p>Set the OpenAI API key for the exporter.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The OpenAI API key to use. This is the same key used by the OpenAI Python client.</p> required Source code in <code>src/cai/sdk/agents/tracing/processors.py</code> <pre><code>def set_api_key(self, api_key: str):\n    \"\"\"Set the OpenAI API key for the exporter.\n\n    Args:\n        api_key: The OpenAI API key to use. This is the same key used by the OpenAI Python\n            client.\n    \"\"\"\n    # We're specifically setting the underlying cached property as well\n    self._api_key = api_key\n    self.api_key = api_key\n</code></pre>"},{"location":"ref/tracing/processors/#cai.sdk.agents.tracing.processors.BackendSpanExporter.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the underlying HTTP client.</p> Source code in <code>src/cai/sdk/agents/tracing/processors.py</code> <pre><code>def close(self):\n    \"\"\"Close the underlying HTTP client.\"\"\"\n    self._client.close()\n</code></pre>"},{"location":"ref/tracing/processors/#cai.sdk.agents.tracing.processors.BatchTraceProcessor","title":"BatchTraceProcessor","text":"<p>               Bases: <code>TracingProcessor</code></p> <p>Some implementation notes: 1. Using Queue, which is thread-safe. 2. Using a background thread to export spans, to minimize any performance issues. 3. Spans are stored in memory until they are exported.</p> Source code in <code>src/cai/sdk/agents/tracing/processors.py</code> <pre><code>class BatchTraceProcessor(TracingProcessor):\n    \"\"\"Some implementation notes:\n    1. Using Queue, which is thread-safe.\n    2. Using a background thread to export spans, to minimize any performance issues.\n    3. Spans are stored in memory until they are exported.\n    \"\"\"\n\n    def __init__(\n        self,\n        exporter: TracingExporter,\n        max_queue_size: int = 8192,\n        max_batch_size: int = 128,\n        schedule_delay: float = 5.0,\n        export_trigger_ratio: float = 0.7,\n    ):\n        \"\"\"\n        Args:\n            exporter: The exporter to use.\n            max_queue_size: The maximum number of spans to store in the queue. After this, we will\n                start dropping spans.\n            max_batch_size: The maximum number of spans to export in a single batch.\n            schedule_delay: The delay between checks for new spans to export.\n            export_trigger_ratio: The ratio of the queue size at which we will trigger an export.\n        \"\"\"\n        self._exporter = exporter\n        self._queue: queue.Queue[Trace | Span[Any]] = queue.Queue(maxsize=max_queue_size)\n        self._max_queue_size = max_queue_size\n        self._max_batch_size = max_batch_size\n        self._schedule_delay = schedule_delay\n        self._shutdown_event = threading.Event()\n\n        # The queue size threshold at which we export immediately.\n        self._export_trigger_size = int(max_queue_size * export_trigger_ratio)\n\n        # Track when we next *must* perform a scheduled export\n        self._next_export_time = time.time() + self._schedule_delay\n\n        self._shutdown_event = threading.Event()\n        self._worker_thread = threading.Thread(target=self._run, daemon=True)\n        self._worker_thread.start()\n\n    def on_trace_start(self, trace: Trace) -&gt; None:\n        try:\n            self._queue.put_nowait(trace)\n        except queue.Full:\n            logger.warning(\"Queue is full, dropping trace.\")\n\n    def on_trace_end(self, trace: Trace) -&gt; None:\n        # We send traces via on_trace_start, so we don't need to do anything here.\n        pass\n\n    def on_span_start(self, span: Span[Any]) -&gt; None:\n        # We send spans via on_span_end, so we don't need to do anything here.\n        pass\n\n    def on_span_end(self, span: Span[Any]) -&gt; None:\n        try:\n            self._queue.put_nowait(span)\n        except queue.Full:\n            logger.warning(\"Queue is full, dropping span.\")\n\n    def shutdown(self, timeout: float | None = None):\n        \"\"\"\n        Called when the application stops. We signal our thread to stop, then join it.\n        \"\"\"\n        self._shutdown_event.set()\n        self._worker_thread.join(timeout=timeout)\n\n    def force_flush(self):\n        \"\"\"\n        Forces an immediate flush of all queued spans.\n        \"\"\"\n        self._export_batches(force=True)\n\n    def _run(self):\n        while not self._shutdown_event.is_set():\n            current_time = time.time()\n            queue_size = self._queue.qsize()\n\n            # If it's time for a scheduled flush or queue is above the trigger threshold\n            if current_time &gt;= self._next_export_time or queue_size &gt;= self._export_trigger_size:\n                self._export_batches(force=False)\n                # Reset the next scheduled flush time\n                self._next_export_time = time.time() + self._schedule_delay\n            else:\n                # Sleep a short interval so we don't busy-wait.\n                time.sleep(0.2)\n\n        # Final drain after shutdown\n        self._export_batches(force=True)\n\n    def _export_batches(self, force: bool = False):\n        \"\"\"Drains the queue and exports in batches. If force=True, export everything.\n        Otherwise, export up to `max_batch_size` repeatedly until the queue is empty or below a\n        certain threshold.\n        \"\"\"\n        while True:\n            items_to_export: list[Span[Any] | Trace] = []\n\n            # Gather a batch of spans up to max_batch_size\n            while not self._queue.empty() and (\n                force or len(items_to_export) &lt; self._max_batch_size\n            ):\n                try:\n                    items_to_export.append(self._queue.get_nowait())\n                except queue.Empty:\n                    # Another thread might have emptied the queue between checks\n                    break\n\n            # If we collected nothing, we're done\n            if not items_to_export:\n                break\n\n            # Export the batch\n            self._exporter.export(items_to_export)\n</code></pre>"},{"location":"ref/tracing/processors/#cai.sdk.agents.tracing.processors.BatchTraceProcessor.__init__","title":"__init__","text":"<pre><code>__init__(\n    exporter: TracingExporter,\n    max_queue_size: int = 8192,\n    max_batch_size: int = 128,\n    schedule_delay: float = 5.0,\n    export_trigger_ratio: float = 0.7,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>exporter</code> <code>TracingExporter</code> <p>The exporter to use.</p> required <code>max_queue_size</code> <code>int</code> <p>The maximum number of spans to store in the queue. After this, we will start dropping spans.</p> <code>8192</code> <code>max_batch_size</code> <code>int</code> <p>The maximum number of spans to export in a single batch.</p> <code>128</code> <code>schedule_delay</code> <code>float</code> <p>The delay between checks for new spans to export.</p> <code>5.0</code> <code>export_trigger_ratio</code> <code>float</code> <p>The ratio of the queue size at which we will trigger an export.</p> <code>0.7</code> Source code in <code>src/cai/sdk/agents/tracing/processors.py</code> <pre><code>def __init__(\n    self,\n    exporter: TracingExporter,\n    max_queue_size: int = 8192,\n    max_batch_size: int = 128,\n    schedule_delay: float = 5.0,\n    export_trigger_ratio: float = 0.7,\n):\n    \"\"\"\n    Args:\n        exporter: The exporter to use.\n        max_queue_size: The maximum number of spans to store in the queue. After this, we will\n            start dropping spans.\n        max_batch_size: The maximum number of spans to export in a single batch.\n        schedule_delay: The delay between checks for new spans to export.\n        export_trigger_ratio: The ratio of the queue size at which we will trigger an export.\n    \"\"\"\n    self._exporter = exporter\n    self._queue: queue.Queue[Trace | Span[Any]] = queue.Queue(maxsize=max_queue_size)\n    self._max_queue_size = max_queue_size\n    self._max_batch_size = max_batch_size\n    self._schedule_delay = schedule_delay\n    self._shutdown_event = threading.Event()\n\n    # The queue size threshold at which we export immediately.\n    self._export_trigger_size = int(max_queue_size * export_trigger_ratio)\n\n    # Track when we next *must* perform a scheduled export\n    self._next_export_time = time.time() + self._schedule_delay\n\n    self._shutdown_event = threading.Event()\n    self._worker_thread = threading.Thread(target=self._run, daemon=True)\n    self._worker_thread.start()\n</code></pre>"},{"location":"ref/tracing/processors/#cai.sdk.agents.tracing.processors.BatchTraceProcessor.shutdown","title":"shutdown","text":"<pre><code>shutdown(timeout: float | None = None)\n</code></pre> <p>Called when the application stops. We signal our thread to stop, then join it.</p> Source code in <code>src/cai/sdk/agents/tracing/processors.py</code> <pre><code>def shutdown(self, timeout: float | None = None):\n    \"\"\"\n    Called when the application stops. We signal our thread to stop, then join it.\n    \"\"\"\n    self._shutdown_event.set()\n    self._worker_thread.join(timeout=timeout)\n</code></pre>"},{"location":"ref/tracing/processors/#cai.sdk.agents.tracing.processors.BatchTraceProcessor.force_flush","title":"force_flush","text":"<pre><code>force_flush()\n</code></pre> <p>Forces an immediate flush of all queued spans.</p> Source code in <code>src/cai/sdk/agents/tracing/processors.py</code> <pre><code>def force_flush(self):\n    \"\"\"\n    Forces an immediate flush of all queued spans.\n    \"\"\"\n    self._export_batches(force=True)\n</code></pre>"},{"location":"ref/tracing/processors/#cai.sdk.agents.tracing.processors.default_exporter","title":"default_exporter","text":"<pre><code>default_exporter() -&gt; BackendSpanExporter\n</code></pre> <p>The default exporter, which exports traces and spans to the backend in batches.</p> Source code in <code>src/cai/sdk/agents/tracing/processors.py</code> <pre><code>def default_exporter() -&gt; BackendSpanExporter:\n    \"\"\"The default exporter, which exports traces and spans to the backend in batches.\"\"\"\n    return _global_exporter\n</code></pre>"},{"location":"ref/tracing/processors/#cai.sdk.agents.tracing.processors.default_processor","title":"default_processor","text":"<pre><code>default_processor() -&gt; BatchTraceProcessor\n</code></pre> <p>The default processor, which exports traces and spans to the backend in batches.</p> Source code in <code>src/cai/sdk/agents/tracing/processors.py</code> <pre><code>def default_processor() -&gt; BatchTraceProcessor:\n    \"\"\"The default processor, which exports traces and spans to the backend in batches.\"\"\"\n    return _global_processor\n</code></pre>"},{"location":"ref/tracing/scope/","title":"<code>Scope</code>","text":""},{"location":"ref/tracing/setup/","title":"<code>Setup</code>","text":""},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.SynchronousMultiTracingProcessor","title":"SynchronousMultiTracingProcessor","text":"<p>               Bases: <code>TracingProcessor</code></p> <p>Forwards all calls to a list of TracingProcessors, in order of registration.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>class SynchronousMultiTracingProcessor(TracingProcessor):\n    \"\"\"\n    Forwards all calls to a list of TracingProcessors, in order of registration.\n    \"\"\"\n\n    def __init__(self):\n        # Using a tuple to avoid race conditions when iterating over processors\n        self._processors: tuple[TracingProcessor, ...] = ()\n        self._lock = threading.Lock()\n\n    def add_tracing_processor(self, tracing_processor: TracingProcessor):\n        \"\"\"\n        Add a processor to the list of processors. Each processor will receive all traces/spans.\n        \"\"\"\n        with self._lock:\n            self._processors += (tracing_processor,)\n\n    def set_processors(self, processors: list[TracingProcessor]):\n        \"\"\"\n        Set the list of processors. This will replace the current list of processors.\n        \"\"\"\n        with self._lock:\n            self._processors = tuple(processors)\n\n    def on_trace_start(self, trace: Trace) -&gt; None:\n        \"\"\"\n        Called when a trace is started.\n        \"\"\"\n        for processor in self._processors:\n            processor.on_trace_start(trace)\n\n    def on_trace_end(self, trace: Trace) -&gt; None:\n        \"\"\"\n        Called when a trace is finished.\n        \"\"\"\n        for processor in self._processors:\n            processor.on_trace_end(trace)\n\n    def on_span_start(self, span: Span[Any]) -&gt; None:\n        \"\"\"\n        Called when a span is started.\n        \"\"\"\n        for processor in self._processors:\n            processor.on_span_start(span)\n\n    def on_span_end(self, span: Span[Any]) -&gt; None:\n        \"\"\"\n        Called when a span is finished.\n        \"\"\"\n        for processor in self._processors:\n            processor.on_span_end(span)\n\n    def shutdown(self) -&gt; None:\n        \"\"\"\n        Called when the application stops.\n        \"\"\"\n        for processor in self._processors:\n            logger.debug(f\"Shutting down trace processor {processor}\")\n            processor.shutdown()\n\n    def force_flush(self):\n        \"\"\"\n        Force the processors to flush their buffers.\n        \"\"\"\n        for processor in self._processors:\n            processor.force_flush()\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.SynchronousMultiTracingProcessor.add_tracing_processor","title":"add_tracing_processor","text":"<pre><code>add_tracing_processor(tracing_processor: TracingProcessor)\n</code></pre> <p>Add a processor to the list of processors. Each processor will receive all traces/spans.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def add_tracing_processor(self, tracing_processor: TracingProcessor):\n    \"\"\"\n    Add a processor to the list of processors. Each processor will receive all traces/spans.\n    \"\"\"\n    with self._lock:\n        self._processors += (tracing_processor,)\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.SynchronousMultiTracingProcessor.set_processors","title":"set_processors","text":"<pre><code>set_processors(processors: list[TracingProcessor])\n</code></pre> <p>Set the list of processors. This will replace the current list of processors.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def set_processors(self, processors: list[TracingProcessor]):\n    \"\"\"\n    Set the list of processors. This will replace the current list of processors.\n    \"\"\"\n    with self._lock:\n        self._processors = tuple(processors)\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.SynchronousMultiTracingProcessor.on_trace_start","title":"on_trace_start","text":"<pre><code>on_trace_start(trace: Trace) -&gt; None\n</code></pre> <p>Called when a trace is started.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def on_trace_start(self, trace: Trace) -&gt; None:\n    \"\"\"\n    Called when a trace is started.\n    \"\"\"\n    for processor in self._processors:\n        processor.on_trace_start(trace)\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.SynchronousMultiTracingProcessor.on_trace_end","title":"on_trace_end","text":"<pre><code>on_trace_end(trace: Trace) -&gt; None\n</code></pre> <p>Called when a trace is finished.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def on_trace_end(self, trace: Trace) -&gt; None:\n    \"\"\"\n    Called when a trace is finished.\n    \"\"\"\n    for processor in self._processors:\n        processor.on_trace_end(trace)\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.SynchronousMultiTracingProcessor.on_span_start","title":"on_span_start","text":"<pre><code>on_span_start(span: Span[Any]) -&gt; None\n</code></pre> <p>Called when a span is started.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def on_span_start(self, span: Span[Any]) -&gt; None:\n    \"\"\"\n    Called when a span is started.\n    \"\"\"\n    for processor in self._processors:\n        processor.on_span_start(span)\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.SynchronousMultiTracingProcessor.on_span_end","title":"on_span_end","text":"<pre><code>on_span_end(span: Span[Any]) -&gt; None\n</code></pre> <p>Called when a span is finished.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def on_span_end(self, span: Span[Any]) -&gt; None:\n    \"\"\"\n    Called when a span is finished.\n    \"\"\"\n    for processor in self._processors:\n        processor.on_span_end(span)\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.SynchronousMultiTracingProcessor.shutdown","title":"shutdown","text":"<pre><code>shutdown() -&gt; None\n</code></pre> <p>Called when the application stops.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def shutdown(self) -&gt; None:\n    \"\"\"\n    Called when the application stops.\n    \"\"\"\n    for processor in self._processors:\n        logger.debug(f\"Shutting down trace processor {processor}\")\n        processor.shutdown()\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.SynchronousMultiTracingProcessor.force_flush","title":"force_flush","text":"<pre><code>force_flush()\n</code></pre> <p>Force the processors to flush their buffers.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def force_flush(self):\n    \"\"\"\n    Force the processors to flush their buffers.\n    \"\"\"\n    for processor in self._processors:\n        processor.force_flush()\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.TraceProvider","title":"TraceProvider","text":"Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>class TraceProvider:\n    def __init__(self):\n        self._multi_processor = SynchronousMultiTracingProcessor()\n        self._disabled = os.environ.get(\"OPENAI_AGENTS_DISABLE_TRACING\", \"false\").lower() in (\n            \"true\",\n            \"1\",\n        )\n\n    def register_processor(self, processor: TracingProcessor):\n        \"\"\"\n        Add a processor to the list of processors. Each processor will receive all traces/spans.\n        \"\"\"\n        self._multi_processor.add_tracing_processor(processor)\n\n    def set_processors(self, processors: list[TracingProcessor]):\n        \"\"\"\n        Set the list of processors. This will replace the current list of processors.\n        \"\"\"\n        self._multi_processor.set_processors(processors)\n\n    def get_current_trace(self) -&gt; Trace | None:\n        \"\"\"\n        Returns the currently active trace, if any.\n        \"\"\"\n        return Scope.get_current_trace()\n\n    def get_current_span(self) -&gt; Span[Any] | None:\n        \"\"\"\n        Returns the currently active span, if any.\n        \"\"\"\n        return Scope.get_current_span()\n\n    def set_disabled(self, disabled: bool) -&gt; None:\n        \"\"\"\n        Set whether tracing is disabled.\n        \"\"\"\n        self._disabled = disabled\n\n    def create_trace(\n        self,\n        name: str,\n        trace_id: str | None = None,\n        group_id: str | None = None,\n        metadata: dict[str, Any] | None = None,\n        disabled: bool = False,\n    ) -&gt; Trace:\n        \"\"\"\n        Create a new trace.\n        \"\"\"\n        if self._disabled or disabled:\n            logger.debug(f\"Tracing is disabled. Not creating trace {name}\")\n            return NoOpTrace()\n\n        trace_id = trace_id or util.gen_trace_id()\n\n        logger.debug(f\"Creating trace {name} with id {trace_id}\")\n\n        return TraceImpl(\n            name=name,\n            trace_id=trace_id,\n            group_id=group_id,\n            metadata=metadata,\n            processor=self._multi_processor,\n        )\n\n    def create_span(\n        self,\n        span_data: TSpanData,\n        span_id: str | None = None,\n        parent: Trace | Span[Any] | None = None,\n        disabled: bool = False,\n    ) -&gt; Span[TSpanData]:\n        \"\"\"\n        Create a new span.\n        \"\"\"\n        if self._disabled or disabled:\n            logger.debug(f\"Tracing is disabled. Not creating span {span_data}\")\n            return NoOpSpan(span_data)\n\n        if not parent:\n            current_span = Scope.get_current_span()\n            current_trace = Scope.get_current_trace()\n            if current_trace is None:\n                logger.error(\n                    \"No active trace. Make sure to start a trace with `trace()` first\"\n                    \"Returning NoOpSpan.\"\n                )\n                return NoOpSpan(span_data)\n            elif isinstance(current_trace, NoOpTrace) or isinstance(current_span, NoOpSpan):\n                logger.debug(\n                    f\"Parent {current_span} or {current_trace} is no-op, returning NoOpSpan\"\n                )\n                return NoOpSpan(span_data)\n\n            parent_id = current_span.span_id if current_span else None\n            trace_id = current_trace.trace_id\n\n        elif isinstance(parent, Trace):\n            if isinstance(parent, NoOpTrace):\n                logger.debug(f\"Parent {parent} is no-op, returning NoOpSpan\")\n                return NoOpSpan(span_data)\n            trace_id = parent.trace_id\n            parent_id = None\n        elif isinstance(parent, Span):\n            if isinstance(parent, NoOpSpan):\n                logger.debug(f\"Parent {parent} is no-op, returning NoOpSpan\")\n                return NoOpSpan(span_data)\n            parent_id = parent.span_id\n            trace_id = parent.trace_id\n\n        logger.debug(f\"Creating span {span_data} with id {span_id}\")\n\n        return SpanImpl(\n            trace_id=trace_id,\n            span_id=span_id,\n            parent_id=parent_id,\n            processor=self._multi_processor,\n            span_data=span_data,\n        )\n\n    def shutdown(self) -&gt; None:\n        try:\n            logger.debug(\"Shutting down trace provider\")\n            self._multi_processor.shutdown()\n        except Exception as e:\n            logger.error(f\"Error shutting down trace provider: {e}\")\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.TraceProvider.register_processor","title":"register_processor","text":"<pre><code>register_processor(processor: TracingProcessor)\n</code></pre> <p>Add a processor to the list of processors. Each processor will receive all traces/spans.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def register_processor(self, processor: TracingProcessor):\n    \"\"\"\n    Add a processor to the list of processors. Each processor will receive all traces/spans.\n    \"\"\"\n    self._multi_processor.add_tracing_processor(processor)\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.TraceProvider.set_processors","title":"set_processors","text":"<pre><code>set_processors(processors: list[TracingProcessor])\n</code></pre> <p>Set the list of processors. This will replace the current list of processors.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def set_processors(self, processors: list[TracingProcessor]):\n    \"\"\"\n    Set the list of processors. This will replace the current list of processors.\n    \"\"\"\n    self._multi_processor.set_processors(processors)\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.TraceProvider.get_current_trace","title":"get_current_trace","text":"<pre><code>get_current_trace() -&gt; Trace | None\n</code></pre> <p>Returns the currently active trace, if any.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def get_current_trace(self) -&gt; Trace | None:\n    \"\"\"\n    Returns the currently active trace, if any.\n    \"\"\"\n    return Scope.get_current_trace()\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.TraceProvider.get_current_span","title":"get_current_span","text":"<pre><code>get_current_span() -&gt; Span[Any] | None\n</code></pre> <p>Returns the currently active span, if any.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def get_current_span(self) -&gt; Span[Any] | None:\n    \"\"\"\n    Returns the currently active span, if any.\n    \"\"\"\n    return Scope.get_current_span()\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.TraceProvider.set_disabled","title":"set_disabled","text":"<pre><code>set_disabled(disabled: bool) -&gt; None\n</code></pre> <p>Set whether tracing is disabled.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def set_disabled(self, disabled: bool) -&gt; None:\n    \"\"\"\n    Set whether tracing is disabled.\n    \"\"\"\n    self._disabled = disabled\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.TraceProvider.create_trace","title":"create_trace","text":"<pre><code>create_trace(\n    name: str,\n    trace_id: str | None = None,\n    group_id: str | None = None,\n    metadata: dict[str, Any] | None = None,\n    disabled: bool = False,\n) -&gt; Trace\n</code></pre> <p>Create a new trace.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def create_trace(\n    self,\n    name: str,\n    trace_id: str | None = None,\n    group_id: str | None = None,\n    metadata: dict[str, Any] | None = None,\n    disabled: bool = False,\n) -&gt; Trace:\n    \"\"\"\n    Create a new trace.\n    \"\"\"\n    if self._disabled or disabled:\n        logger.debug(f\"Tracing is disabled. Not creating trace {name}\")\n        return NoOpTrace()\n\n    trace_id = trace_id or util.gen_trace_id()\n\n    logger.debug(f\"Creating trace {name} with id {trace_id}\")\n\n    return TraceImpl(\n        name=name,\n        trace_id=trace_id,\n        group_id=group_id,\n        metadata=metadata,\n        processor=self._multi_processor,\n    )\n</code></pre>"},{"location":"ref/tracing/setup/#cai.sdk.agents.tracing.setup.TraceProvider.create_span","title":"create_span","text":"<pre><code>create_span(\n    span_data: TSpanData,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[TSpanData]\n</code></pre> <p>Create a new span.</p> Source code in <code>src/cai/sdk/agents/tracing/setup.py</code> <pre><code>def create_span(\n    self,\n    span_data: TSpanData,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[TSpanData]:\n    \"\"\"\n    Create a new span.\n    \"\"\"\n    if self._disabled or disabled:\n        logger.debug(f\"Tracing is disabled. Not creating span {span_data}\")\n        return NoOpSpan(span_data)\n\n    if not parent:\n        current_span = Scope.get_current_span()\n        current_trace = Scope.get_current_trace()\n        if current_trace is None:\n            logger.error(\n                \"No active trace. Make sure to start a trace with `trace()` first\"\n                \"Returning NoOpSpan.\"\n            )\n            return NoOpSpan(span_data)\n        elif isinstance(current_trace, NoOpTrace) or isinstance(current_span, NoOpSpan):\n            logger.debug(\n                f\"Parent {current_span} or {current_trace} is no-op, returning NoOpSpan\"\n            )\n            return NoOpSpan(span_data)\n\n        parent_id = current_span.span_id if current_span else None\n        trace_id = current_trace.trace_id\n\n    elif isinstance(parent, Trace):\n        if isinstance(parent, NoOpTrace):\n            logger.debug(f\"Parent {parent} is no-op, returning NoOpSpan\")\n            return NoOpSpan(span_data)\n        trace_id = parent.trace_id\n        parent_id = None\n    elif isinstance(parent, Span):\n        if isinstance(parent, NoOpSpan):\n            logger.debug(f\"Parent {parent} is no-op, returning NoOpSpan\")\n            return NoOpSpan(span_data)\n        parent_id = parent.span_id\n        trace_id = parent.trace_id\n\n    logger.debug(f\"Creating span {span_data} with id {span_id}\")\n\n    return SpanImpl(\n        trace_id=trace_id,\n        span_id=span_id,\n        parent_id=parent_id,\n        processor=self._multi_processor,\n        span_data=span_data,\n    )\n</code></pre>"},{"location":"ref/tracing/span_data/","title":"<code>Span data</code>","text":""},{"location":"ref/tracing/spans/","title":"<code>Spans</code>","text":""},{"location":"ref/tracing/spans/#cai.sdk.agents.tracing.spans.Span","title":"Span","text":"<p>               Bases: <code>ABC</code>, <code>Generic[TSpanData]</code></p> Source code in <code>src/cai/sdk/agents/tracing/spans.py</code> <pre><code>class Span(abc.ABC, Generic[TSpanData]):\n    @property\n    @abc.abstractmethod\n    def trace_id(self) -&gt; str:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def span_id(self) -&gt; str:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def span_data(self) -&gt; TSpanData:\n        pass\n\n    @abc.abstractmethod\n    def start(self, mark_as_current: bool = False):\n        \"\"\"\n        Start the span.\n\n        Args:\n            mark_as_current: If true, the span will be marked as the current span.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def finish(self, reset_current: bool = False) -&gt; None:\n        \"\"\"\n        Finish the span.\n\n        Args:\n            reset_current: If true, the span will be reset as the current span.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def __enter__(self) -&gt; Span[TSpanData]:\n        pass\n\n    @abc.abstractmethod\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        pass\n\n    @property\n    @abc.abstractmethod\n    def parent_id(self) -&gt; str | None:\n        pass\n\n    @abc.abstractmethod\n    def set_error(self, error: SpanError) -&gt; None:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def error(self) -&gt; SpanError | None:\n        pass\n\n    @abc.abstractmethod\n    def export(self) -&gt; dict[str, Any] | None:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def started_at(self) -&gt; str | None:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def ended_at(self) -&gt; str | None:\n        pass\n</code></pre>"},{"location":"ref/tracing/spans/#cai.sdk.agents.tracing.spans.Span.start","title":"start  <code>abstractmethod</code>","text":"<pre><code>start(mark_as_current: bool = False)\n</code></pre> <p>Start the span.</p> <p>Parameters:</p> Name Type Description Default <code>mark_as_current</code> <code>bool</code> <p>If true, the span will be marked as the current span.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/spans.py</code> <pre><code>@abc.abstractmethod\ndef start(self, mark_as_current: bool = False):\n    \"\"\"\n    Start the span.\n\n    Args:\n        mark_as_current: If true, the span will be marked as the current span.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/spans/#cai.sdk.agents.tracing.spans.Span.finish","title":"finish  <code>abstractmethod</code>","text":"<pre><code>finish(reset_current: bool = False) -&gt; None\n</code></pre> <p>Finish the span.</p> <p>Parameters:</p> Name Type Description Default <code>reset_current</code> <code>bool</code> <p>If true, the span will be reset as the current span.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/spans.py</code> <pre><code>@abc.abstractmethod\ndef finish(self, reset_current: bool = False) -&gt; None:\n    \"\"\"\n    Finish the span.\n\n    Args:\n        reset_current: If true, the span will be reset as the current span.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/spans/#cai.sdk.agents.tracing.spans.NoOpSpan","title":"NoOpSpan","text":"<p>               Bases: <code>Span[TSpanData]</code></p> Source code in <code>src/cai/sdk/agents/tracing/spans.py</code> <pre><code>class NoOpSpan(Span[TSpanData]):\n    __slots__ = (\"_span_data\", \"_prev_span_token\")\n\n    def __init__(self, span_data: TSpanData):\n        self._span_data = span_data\n        self._prev_span_token: contextvars.Token[Span[TSpanData] | None] | None = None\n\n    @property\n    def trace_id(self) -&gt; str:\n        return \"no-op\"\n\n    @property\n    def span_id(self) -&gt; str:\n        return \"no-op\"\n\n    @property\n    def span_data(self) -&gt; TSpanData:\n        return self._span_data\n\n    @property\n    def parent_id(self) -&gt; str | None:\n        return None\n\n    def start(self, mark_as_current: bool = False):\n        if mark_as_current:\n            self._prev_span_token = Scope.set_current_span(self)\n\n    def finish(self, reset_current: bool = False) -&gt; None:\n        if reset_current and self._prev_span_token is not None:\n            Scope.reset_current_span(self._prev_span_token)\n            self._prev_span_token = None\n\n    def __enter__(self) -&gt; Span[TSpanData]:\n        self.start(mark_as_current=True)\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        reset_current = True\n        if exc_type is GeneratorExit:\n            logger.debug(\"GeneratorExit, skipping span reset\")\n            reset_current = False\n\n        self.finish(reset_current=reset_current)\n\n    def set_error(self, error: SpanError) -&gt; None:\n        pass\n\n    @property\n    def error(self) -&gt; SpanError | None:\n        return None\n\n    def export(self) -&gt; dict[str, Any] | None:\n        return None\n\n    @property\n    def started_at(self) -&gt; str | None:\n        return None\n\n    @property\n    def ended_at(self) -&gt; str | None:\n        return None\n</code></pre>"},{"location":"ref/tracing/spans/#cai.sdk.agents.tracing.spans.SpanImpl","title":"SpanImpl","text":"<p>               Bases: <code>Span[TSpanData]</code></p> Source code in <code>src/cai/sdk/agents/tracing/spans.py</code> <pre><code>class SpanImpl(Span[TSpanData]):\n    __slots__ = (\n        \"_trace_id\",\n        \"_span_id\",\n        \"_parent_id\",\n        \"_started_at\",\n        \"_ended_at\",\n        \"_error\",\n        \"_prev_span_token\",\n        \"_processor\",\n        \"_span_data\",\n    )\n\n    def __init__(\n        self,\n        trace_id: str,\n        span_id: str | None,\n        parent_id: str | None,\n        processor: TracingProcessor,\n        span_data: TSpanData,\n    ):\n        self._trace_id = trace_id\n        self._span_id = span_id or util.gen_span_id()\n        self._parent_id = parent_id\n        self._started_at: str | None = None\n        self._ended_at: str | None = None\n        self._processor = processor\n        self._error: SpanError | None = None\n        self._prev_span_token: contextvars.Token[Span[TSpanData] | None] | None = None\n        self._span_data = span_data\n\n    @property\n    def trace_id(self) -&gt; str:\n        return self._trace_id\n\n    @property\n    def span_id(self) -&gt; str:\n        return self._span_id\n\n    @property\n    def span_data(self) -&gt; TSpanData:\n        return self._span_data\n\n    @property\n    def parent_id(self) -&gt; str | None:\n        return self._parent_id\n\n    def start(self, mark_as_current: bool = False):\n        if self.started_at is not None:\n            logger.warning(\"Span already started\")\n            return\n\n        self._started_at = util.time_iso()\n        self._processor.on_span_start(self)\n        if mark_as_current:\n            self._prev_span_token = Scope.set_current_span(self)\n\n    def finish(self, reset_current: bool = False) -&gt; None:\n        if self.ended_at is not None:\n            logger.warning(\"Span already finished\")\n            return\n\n        self._ended_at = util.time_iso()\n        self._processor.on_span_end(self)\n        if reset_current and self._prev_span_token is not None:\n            Scope.reset_current_span(self._prev_span_token)\n            self._prev_span_token = None\n\n    def __enter__(self) -&gt; Span[TSpanData]:\n        self.start(mark_as_current=True)\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        reset_current = True\n        if exc_type is GeneratorExit:\n            logger.debug(\"GeneratorExit, skipping span reset\")\n            reset_current = False\n\n        self.finish(reset_current=reset_current)\n\n    def set_error(self, error: SpanError) -&gt; None:\n        self._error = error\n\n    @property\n    def error(self) -&gt; SpanError | None:\n        return self._error\n\n    @property\n    def started_at(self) -&gt; str | None:\n        return self._started_at\n\n    @property\n    def ended_at(self) -&gt; str | None:\n        return self._ended_at\n\n    def export(self) -&gt; dict[str, Any] | None:\n        return {\n            \"object\": \"trace.span\",\n            \"id\": self.span_id,\n            \"trace_id\": self.trace_id,\n            \"parent_id\": self._parent_id,\n            \"started_at\": self._started_at,\n            \"ended_at\": self._ended_at,\n            \"span_data\": self.span_data.export(),\n            \"error\": self._error,\n        }\n</code></pre>"},{"location":"ref/tracing/traces/","title":"<code>Traces</code>","text":""},{"location":"ref/tracing/traces/#cai.sdk.agents.tracing.traces.Trace","title":"Trace","text":"<p>A trace is the root level object that tracing creates. It represents a logical \"workflow\".</p> Source code in <code>src/cai/sdk/agents/tracing/traces.py</code> <pre><code>class Trace:\n    \"\"\"\n    A trace is the root level object that tracing creates. It represents a logical \"workflow\".\n    \"\"\"\n\n    @abc.abstractmethod\n    def __enter__(self) -&gt; Trace:\n        pass\n\n    @abc.abstractmethod\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        pass\n\n    @abc.abstractmethod\n    def start(self, mark_as_current: bool = False):\n        \"\"\"\n        Start the trace.\n\n        Args:\n            mark_as_current: If true, the trace will be marked as the current trace.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def finish(self, reset_current: bool = False):\n        \"\"\"\n        Finish the trace.\n\n        Args:\n            reset_current: If true, the trace will be reset as the current trace.\n        \"\"\"\n        pass\n\n    @property\n    @abc.abstractmethod\n    def trace_id(self) -&gt; str:\n        \"\"\"\n        The trace ID.\n        \"\"\"\n        pass\n\n    @property\n    @abc.abstractmethod\n    def name(self) -&gt; str:\n        \"\"\"\n        The name of the workflow being traced.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def export(self) -&gt; dict[str, Any] | None:\n        \"\"\"\n        Export the trace as a dictionary.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"ref/tracing/traces/#cai.sdk.agents.tracing.traces.Trace.trace_id","title":"trace_id  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>trace_id: str\n</code></pre> <p>The trace ID.</p>"},{"location":"ref/tracing/traces/#cai.sdk.agents.tracing.traces.Trace.name","title":"name  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the workflow being traced.</p>"},{"location":"ref/tracing/traces/#cai.sdk.agents.tracing.traces.Trace.start","title":"start  <code>abstractmethod</code>","text":"<pre><code>start(mark_as_current: bool = False)\n</code></pre> <p>Start the trace.</p> <p>Parameters:</p> Name Type Description Default <code>mark_as_current</code> <code>bool</code> <p>If true, the trace will be marked as the current trace.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/traces.py</code> <pre><code>@abc.abstractmethod\ndef start(self, mark_as_current: bool = False):\n    \"\"\"\n    Start the trace.\n\n    Args:\n        mark_as_current: If true, the trace will be marked as the current trace.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/traces/#cai.sdk.agents.tracing.traces.Trace.finish","title":"finish  <code>abstractmethod</code>","text":"<pre><code>finish(reset_current: bool = False)\n</code></pre> <p>Finish the trace.</p> <p>Parameters:</p> Name Type Description Default <code>reset_current</code> <code>bool</code> <p>If true, the trace will be reset as the current trace.</p> <code>False</code> Source code in <code>src/cai/sdk/agents/tracing/traces.py</code> <pre><code>@abc.abstractmethod\ndef finish(self, reset_current: bool = False):\n    \"\"\"\n    Finish the trace.\n\n    Args:\n        reset_current: If true, the trace will be reset as the current trace.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/traces/#cai.sdk.agents.tracing.traces.Trace.export","title":"export  <code>abstractmethod</code>","text":"<pre><code>export() -&gt; dict[str, Any] | None\n</code></pre> <p>Export the trace as a dictionary.</p> Source code in <code>src/cai/sdk/agents/tracing/traces.py</code> <pre><code>@abc.abstractmethod\ndef export(self) -&gt; dict[str, Any] | None:\n    \"\"\"\n    Export the trace as a dictionary.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/traces/#cai.sdk.agents.tracing.traces.NoOpTrace","title":"NoOpTrace","text":"<p>               Bases: <code>Trace</code></p> <p>A no-op trace that will not be recorded.</p> Source code in <code>src/cai/sdk/agents/tracing/traces.py</code> <pre><code>class NoOpTrace(Trace):\n    \"\"\"\n    A no-op trace that will not be recorded.\n    \"\"\"\n\n    def __init__(self):\n        self._started = False\n        self._prev_context_token: contextvars.Token[Trace | None] | None = None\n\n    def __enter__(self) -&gt; Trace:\n        if self._started:\n            if not self._prev_context_token:\n                logger.error(\"Trace already started but no context token set\")\n            return self\n\n        self._started = True\n        self.start(mark_as_current=True)\n\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.finish(reset_current=True)\n\n    def start(self, mark_as_current: bool = False):\n        if mark_as_current:\n            self._prev_context_token = Scope.set_current_trace(self)\n\n    def finish(self, reset_current: bool = False):\n        if reset_current and self._prev_context_token is not None:\n            Scope.reset_current_trace(self._prev_context_token)\n            self._prev_context_token = None\n\n    @property\n    def trace_id(self) -&gt; str:\n        return \"no-op\"\n\n    @property\n    def name(self) -&gt; str:\n        return \"no-op\"\n\n    def export(self) -&gt; dict[str, Any] | None:\n        return None\n</code></pre>"},{"location":"ref/tracing/traces/#cai.sdk.agents.tracing.traces.TraceImpl","title":"TraceImpl","text":"<p>               Bases: <code>Trace</code></p> <p>A trace that will be recorded by the tracing library.</p> Source code in <code>src/cai/sdk/agents/tracing/traces.py</code> <pre><code>class TraceImpl(Trace):\n    \"\"\"\n    A trace that will be recorded by the tracing library.\n    \"\"\"\n\n    __slots__ = (\n        \"_name\",\n        \"_trace_id\",\n        \"group_id\",\n        \"metadata\",\n        \"_prev_context_token\",\n        \"_processor\",\n        \"_started\",\n    )\n\n    def __init__(\n        self,\n        name: str,\n        trace_id: str | None,\n        group_id: str | None,\n        metadata: dict[str, Any] | None,\n        processor: TracingProcessor,\n    ):\n        self._name = name\n        self._trace_id = trace_id or util.gen_trace_id()\n        self.group_id = group_id\n        self.metadata = metadata\n        self._prev_context_token: contextvars.Token[Trace | None] | None = None\n        self._processor = processor\n        self._started = False\n\n    @property\n    def trace_id(self) -&gt; str:\n        return self._trace_id\n\n    @property\n    def name(self) -&gt; str:\n        return self._name\n\n    def start(self, mark_as_current: bool = False):\n        if self._started:\n            return\n\n        self._started = True\n        self._processor.on_trace_start(self)\n\n        if mark_as_current:\n            self._prev_context_token = Scope.set_current_trace(self)\n\n    def finish(self, reset_current: bool = False):\n        if not self._started:\n            return\n\n        self._processor.on_trace_end(self)\n\n        if reset_current and self._prev_context_token is not None:\n            Scope.reset_current_trace(self._prev_context_token)\n            self._prev_context_token = None\n\n    def __enter__(self) -&gt; Trace:\n        if self._started:\n            if not self._prev_context_token:\n                logger.error(\"Trace already started but no context token set\")\n            return self\n\n        self.start(mark_as_current=True)\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.finish(reset_current=exc_type is not GeneratorExit)\n\n    def export(self) -&gt; dict[str, Any] | None:\n        return {\n            \"object\": \"trace\",\n            \"id\": self.trace_id,\n            \"workflow_name\": self.name,\n            \"group_id\": self.group_id,\n            \"metadata\": self.metadata,\n        }\n</code></pre>"},{"location":"ref/tracing/util/","title":"<code>Util</code>","text":""},{"location":"ref/tracing/util/#cai.sdk.agents.tracing.util.time_iso","title":"time_iso","text":"<pre><code>time_iso() -&gt; str\n</code></pre> <p>Returns the current time in ISO 8601 format.</p> Source code in <code>src/cai/sdk/agents/tracing/util.py</code> <pre><code>def time_iso() -&gt; str:\n    \"\"\"Returns the current time in ISO 8601 format.\"\"\"\n    return datetime.now(timezone.utc).isoformat()\n</code></pre>"},{"location":"ref/tracing/util/#cai.sdk.agents.tracing.util.gen_trace_id","title":"gen_trace_id","text":"<pre><code>gen_trace_id() -&gt; str\n</code></pre> <p>Generates a new trace ID.</p> Source code in <code>src/cai/sdk/agents/tracing/util.py</code> <pre><code>def gen_trace_id() -&gt; str:\n    \"\"\"Generates a new trace ID.\"\"\"\n    return f\"trace_{uuid.uuid4().hex}\"\n</code></pre>"},{"location":"ref/tracing/util/#cai.sdk.agents.tracing.util.gen_span_id","title":"gen_span_id","text":"<pre><code>gen_span_id() -&gt; str\n</code></pre> <p>Generates a new span ID.</p> Source code in <code>src/cai/sdk/agents/tracing/util.py</code> <pre><code>def gen_span_id() -&gt; str:\n    \"\"\"Generates a new span ID.\"\"\"\n    return f\"span_{uuid.uuid4().hex[:24]}\"\n</code></pre>"},{"location":"ref/tracing/util/#cai.sdk.agents.tracing.util.gen_group_id","title":"gen_group_id","text":"<pre><code>gen_group_id() -&gt; str\n</code></pre> <p>Generates a new group ID.</p> Source code in <code>src/cai/sdk/agents/tracing/util.py</code> <pre><code>def gen_group_id() -&gt; str:\n    \"\"\"Generates a new group ID.\"\"\"\n    return f\"group_{uuid.uuid4().hex[:24]}\"\n</code></pre>"},{"location":"ref/voice/events/","title":"<code>Events</code>","text":""},{"location":"ref/voice/events/#cai.sdk.agents.voice.events.VoiceStreamEvent","title":"VoiceStreamEvent  <code>module-attribute</code>","text":"<pre><code>VoiceStreamEvent: TypeAlias = Union[\n    VoiceStreamEventAudio,\n    VoiceStreamEventLifecycle,\n    VoiceStreamEventError,\n]\n</code></pre> <p>An event from the <code>VoicePipeline</code>, streamed via <code>StreamedAudioResult.stream()</code>.</p>"},{"location":"ref/voice/events/#cai.sdk.agents.voice.events.VoiceStreamEventAudio","title":"VoiceStreamEventAudio  <code>dataclass</code>","text":"<p>Streaming event from the VoicePipeline</p> Source code in <code>src/cai/sdk/agents/voice/events.py</code> <pre><code>@dataclass\nclass VoiceStreamEventAudio:\n    \"\"\"Streaming event from the VoicePipeline\"\"\"\n\n    data: npt.NDArray[np.int16 | np.float32] | None\n    \"\"\"The audio data.\"\"\"\n\n    type: Literal[\"voice_stream_event_audio\"] = \"voice_stream_event_audio\"\n    \"\"\"The type of event.\"\"\"\n</code></pre>"},{"location":"ref/voice/events/#cai.sdk.agents.voice.events.VoiceStreamEventAudio.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: NDArray[int16 | float32] | None\n</code></pre> <p>The audio data.</p>"},{"location":"ref/voice/events/#cai.sdk.agents.voice.events.VoiceStreamEventAudio.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Literal[\"voice_stream_event_audio\"] = (\n    \"voice_stream_event_audio\"\n)\n</code></pre> <p>The type of event.</p>"},{"location":"ref/voice/events/#cai.sdk.agents.voice.events.VoiceStreamEventLifecycle","title":"VoiceStreamEventLifecycle  <code>dataclass</code>","text":"<p>Streaming event from the VoicePipeline</p> Source code in <code>src/cai/sdk/agents/voice/events.py</code> <pre><code>@dataclass\nclass VoiceStreamEventLifecycle:\n    \"\"\"Streaming event from the VoicePipeline\"\"\"\n\n    event: Literal[\"turn_started\", \"turn_ended\", \"session_ended\"]\n    \"\"\"The event that occurred.\"\"\"\n\n    type: Literal[\"voice_stream_event_lifecycle\"] = \"voice_stream_event_lifecycle\"\n    \"\"\"The type of event.\"\"\"\n</code></pre>"},{"location":"ref/voice/events/#cai.sdk.agents.voice.events.VoiceStreamEventLifecycle.event","title":"event  <code>instance-attribute</code>","text":"<pre><code>event: Literal[\n    \"turn_started\", \"turn_ended\", \"session_ended\"\n]\n</code></pre> <p>The event that occurred.</p>"},{"location":"ref/voice/events/#cai.sdk.agents.voice.events.VoiceStreamEventLifecycle.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Literal[\"voice_stream_event_lifecycle\"] = (\n    \"voice_stream_event_lifecycle\"\n)\n</code></pre> <p>The type of event.</p>"},{"location":"ref/voice/events/#cai.sdk.agents.voice.events.VoiceStreamEventError","title":"VoiceStreamEventError  <code>dataclass</code>","text":"<p>Streaming event from the VoicePipeline</p> Source code in <code>src/cai/sdk/agents/voice/events.py</code> <pre><code>@dataclass\nclass VoiceStreamEventError:\n    \"\"\"Streaming event from the VoicePipeline\"\"\"\n\n    error: Exception\n    \"\"\"The error that occurred.\"\"\"\n\n    type: Literal[\"voice_stream_event_error\"] = \"voice_stream_event_error\"\n    \"\"\"The type of event.\"\"\"\n</code></pre>"},{"location":"ref/voice/events/#cai.sdk.agents.voice.events.VoiceStreamEventError.error","title":"error  <code>instance-attribute</code>","text":"<pre><code>error: Exception\n</code></pre> <p>The error that occurred.</p>"},{"location":"ref/voice/events/#cai.sdk.agents.voice.events.VoiceStreamEventError.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Literal[\"voice_stream_event_error\"] = (\n    \"voice_stream_event_error\"\n)\n</code></pre> <p>The type of event.</p>"},{"location":"ref/voice/exceptions/","title":"<code>Exceptions</code>","text":""},{"location":"ref/voice/exceptions/#cai.sdk.agents.voice.exceptions.STTWebsocketConnectionError","title":"STTWebsocketConnectionError","text":"<p>               Bases: <code>AgentsException</code></p> <p>Exception raised when the STT websocket connection fails.</p> Source code in <code>src/cai/sdk/agents/voice/exceptions.py</code> <pre><code>class STTWebsocketConnectionError(AgentsException):\n    \"\"\"Exception raised when the STT websocket connection fails.\"\"\"\n\n    def __init__(self, message: str):\n        self.message = message\n</code></pre>"},{"location":"ref/voice/input/","title":"<code>Input</code>","text":""},{"location":"ref/voice/input/#cai.sdk.agents.voice.input.AudioInput","title":"AudioInput  <code>dataclass</code>","text":"<p>Static audio to be used as input for the VoicePipeline.</p> Source code in <code>src/cai/sdk/agents/voice/input.py</code> <pre><code>@dataclass\nclass AudioInput:\n    \"\"\"Static audio to be used as input for the VoicePipeline.\"\"\"\n\n    buffer: npt.NDArray[np.int16 | np.float32]\n    \"\"\"\n    A buffer containing the audio data for the agent. Must be a numpy array of int16 or float32.\n    \"\"\"\n\n    frame_rate: int = DEFAULT_SAMPLE_RATE\n    \"\"\"The sample rate of the audio data. Defaults to 24000.\"\"\"\n\n    sample_width: int = 2\n    \"\"\"The sample width of the audio data. Defaults to 2.\"\"\"\n\n    channels: int = 1\n    \"\"\"The number of channels in the audio data. Defaults to 1.\"\"\"\n\n    def to_audio_file(self) -&gt; tuple[str, io.BytesIO, str]:\n        \"\"\"Returns a tuple of (filename, bytes, content_type)\"\"\"\n        return _buffer_to_audio_file(self.buffer, self.frame_rate, self.sample_width, self.channels)\n\n    def to_base64(self) -&gt; str:\n        \"\"\"Returns the audio data as a base64 encoded string.\"\"\"\n        if self.buffer.dtype == np.float32:\n            # convert to int16\n            self.buffer = np.clip(self.buffer, -1.0, 1.0)\n            self.buffer = (self.buffer * 32767).astype(np.int16)\n        elif self.buffer.dtype != np.int16:\n            raise UserError(\"Buffer must be a numpy array of int16 or float32\")\n\n        return base64.b64encode(self.buffer.tobytes()).decode(\"utf-8\")\n</code></pre>"},{"location":"ref/voice/input/#cai.sdk.agents.voice.input.AudioInput.buffer","title":"buffer  <code>instance-attribute</code>","text":"<pre><code>buffer: NDArray[int16 | float32]\n</code></pre> <p>A buffer containing the audio data for the agent. Must be a numpy array of int16 or float32.</p>"},{"location":"ref/voice/input/#cai.sdk.agents.voice.input.AudioInput.frame_rate","title":"frame_rate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>frame_rate: int = DEFAULT_SAMPLE_RATE\n</code></pre> <p>The sample rate of the audio data. Defaults to 24000.</p>"},{"location":"ref/voice/input/#cai.sdk.agents.voice.input.AudioInput.sample_width","title":"sample_width  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sample_width: int = 2\n</code></pre> <p>The sample width of the audio data. Defaults to 2.</p>"},{"location":"ref/voice/input/#cai.sdk.agents.voice.input.AudioInput.channels","title":"channels  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>channels: int = 1\n</code></pre> <p>The number of channels in the audio data. Defaults to 1.</p>"},{"location":"ref/voice/input/#cai.sdk.agents.voice.input.AudioInput.to_audio_file","title":"to_audio_file","text":"<pre><code>to_audio_file() -&gt; tuple[str, BytesIO, str]\n</code></pre> <p>Returns a tuple of (filename, bytes, content_type)</p> Source code in <code>src/cai/sdk/agents/voice/input.py</code> <pre><code>def to_audio_file(self) -&gt; tuple[str, io.BytesIO, str]:\n    \"\"\"Returns a tuple of (filename, bytes, content_type)\"\"\"\n    return _buffer_to_audio_file(self.buffer, self.frame_rate, self.sample_width, self.channels)\n</code></pre>"},{"location":"ref/voice/input/#cai.sdk.agents.voice.input.AudioInput.to_base64","title":"to_base64","text":"<pre><code>to_base64() -&gt; str\n</code></pre> <p>Returns the audio data as a base64 encoded string.</p> Source code in <code>src/cai/sdk/agents/voice/input.py</code> <pre><code>def to_base64(self) -&gt; str:\n    \"\"\"Returns the audio data as a base64 encoded string.\"\"\"\n    if self.buffer.dtype == np.float32:\n        # convert to int16\n        self.buffer = np.clip(self.buffer, -1.0, 1.0)\n        self.buffer = (self.buffer * 32767).astype(np.int16)\n    elif self.buffer.dtype != np.int16:\n        raise UserError(\"Buffer must be a numpy array of int16 or float32\")\n\n    return base64.b64encode(self.buffer.tobytes()).decode(\"utf-8\")\n</code></pre>"},{"location":"ref/voice/input/#cai.sdk.agents.voice.input.StreamedAudioInput","title":"StreamedAudioInput","text":"<p>Audio input represented as a stream of audio data. You can pass this to the <code>VoicePipeline</code> and then push audio data into the queue using the <code>add_audio</code> method.</p> Source code in <code>src/cai/sdk/agents/voice/input.py</code> <pre><code>class StreamedAudioInput:\n    \"\"\"Audio input represented as a stream of audio data. You can pass this to the `VoicePipeline`\n    and then push audio data into the queue using the `add_audio` method.\n    \"\"\"\n\n    def __init__(self):\n        self.queue: asyncio.Queue[npt.NDArray[np.int16 | np.float32]] = asyncio.Queue()\n\n    async def add_audio(self, audio: npt.NDArray[np.int16 | np.float32]):\n        \"\"\"Adds more audio data to the stream.\n\n        Args:\n            audio: The audio data to add. Must be a numpy array of int16 or float32.\n        \"\"\"\n        await self.queue.put(audio)\n</code></pre>"},{"location":"ref/voice/input/#cai.sdk.agents.voice.input.StreamedAudioInput.add_audio","title":"add_audio  <code>async</code>","text":"<pre><code>add_audio(audio: NDArray[int16 | float32])\n</code></pre> <p>Adds more audio data to the stream.</p> <p>Parameters:</p> Name Type Description Default <code>audio</code> <code>NDArray[int16 | float32]</code> <p>The audio data to add. Must be a numpy array of int16 or float32.</p> required Source code in <code>src/cai/sdk/agents/voice/input.py</code> <pre><code>async def add_audio(self, audio: npt.NDArray[np.int16 | np.float32]):\n    \"\"\"Adds more audio data to the stream.\n\n    Args:\n        audio: The audio data to add. Must be a numpy array of int16 or float32.\n    \"\"\"\n    await self.queue.put(audio)\n</code></pre>"},{"location":"ref/voice/model/","title":"<code>Model</code>","text":""},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.TTSModelSettings","title":"TTSModelSettings  <code>dataclass</code>","text":"<p>Settings for a TTS model.</p> Source code in <code>src/cai/sdk/agents/voice/model.py</code> <pre><code>@dataclass\nclass TTSModelSettings:\n    \"\"\"Settings for a TTS model.\"\"\"\n\n    voice: (\n        Literal[\"alloy\", \"ash\", \"coral\", \"echo\", \"fable\", \"onyx\", \"nova\", \"sage\", \"shimmer\"] | None\n    ) = None\n    \"\"\"\n    The voice to use for the TTS model. If not provided, the default voice for the respective model\n    will be used.\n    \"\"\"\n\n    buffer_size: int = 120\n    \"\"\"The minimal size of the chunks of audio data that are being streamed out.\"\"\"\n\n    dtype: npt.DTypeLike = np.int16\n    \"\"\"The data type for the audio data to be returned in.\"\"\"\n\n    transform_data: (\n        Callable[[npt.NDArray[np.int16 | np.float32]], npt.NDArray[np.int16 | np.float32]] | None\n    ) = None\n    \"\"\"\n    A function to transform the data from the TTS model. This is useful if you want the resulting\n    audio stream to have the data in a specific shape already.\n    \"\"\"\n\n    instructions: str = (\n        \"You will receive partial sentences. Do not complete the sentence just read out the text.\"\n    )\n    \"\"\"\n    The instructions to use for the TTS model. This is useful if you want to control the tone of the\n    audio output.\n    \"\"\"\n\n    text_splitter: Callable[[str], tuple[str, str]] = get_sentence_based_splitter()\n    \"\"\"\n    A function to split the text into chunks. This is useful if you want to split the text into\n    chunks before sending it to the TTS model rather than waiting for the whole text to be\n    processed.\n    \"\"\"\n\n    speed: float | None = None\n    \"\"\"The speed with which the TTS model will read the text. Between 0.25 and 4.0.\"\"\"\n</code></pre>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.TTSModelSettings.voice","title":"voice  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>voice: (\n    Literal[\n        \"alloy\",\n        \"ash\",\n        \"coral\",\n        \"echo\",\n        \"fable\",\n        \"onyx\",\n        \"nova\",\n        \"sage\",\n        \"shimmer\",\n    ]\n    | None\n) = None\n</code></pre> <p>The voice to use for the TTS model. If not provided, the default voice for the respective model will be used.</p>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.TTSModelSettings.buffer_size","title":"buffer_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>buffer_size: int = 120\n</code></pre> <p>The minimal size of the chunks of audio data that are being streamed out.</p>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.TTSModelSettings.dtype","title":"dtype  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dtype: DTypeLike = int16\n</code></pre> <p>The data type for the audio data to be returned in.</p>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.TTSModelSettings.transform_data","title":"transform_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>transform_data: (\n    Callable[\n        [NDArray[int16 | float32]], NDArray[int16 | float32]\n    ]\n    | None\n) = None\n</code></pre> <p>A function to transform the data from the TTS model. This is useful if you want the resulting audio stream to have the data in a specific shape already.</p>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.TTSModelSettings.instructions","title":"instructions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>instructions: str = \"You will receive partial sentences. Do not complete the sentence just read out the text.\"\n</code></pre> <p>The instructions to use for the TTS model. This is useful if you want to control the tone of the audio output.</p>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.TTSModelSettings.text_splitter","title":"text_splitter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>text_splitter: Callable[[str], tuple[str, str]] = (\n    get_sentence_based_splitter()\n)\n</code></pre> <p>A function to split the text into chunks. This is useful if you want to split the text into chunks before sending it to the TTS model rather than waiting for the whole text to be processed.</p>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.TTSModelSettings.speed","title":"speed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>speed: float | None = None\n</code></pre> <p>The speed with which the TTS model will read the text. Between 0.25 and 4.0.</p>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.TTSModel","title":"TTSModel","text":"<p>               Bases: <code>ABC</code></p> <p>A text-to-speech model that can convert text into audio output.</p> Source code in <code>src/cai/sdk/agents/voice/model.py</code> <pre><code>class TTSModel(abc.ABC):\n    \"\"\"A text-to-speech model that can convert text into audio output.\"\"\"\n\n    @property\n    @abc.abstractmethod\n    def model_name(self) -&gt; str:\n        \"\"\"The name of the TTS model.\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def run(self, text: str, settings: TTSModelSettings) -&gt; AsyncIterator[bytes]:\n        \"\"\"Given a text string, produces a stream of audio bytes, in PCM format.\n\n        Args:\n            text: The text to convert to audio.\n\n        Returns:\n            An async iterator of audio bytes, in PCM format.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.TTSModel.model_name","title":"model_name  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>model_name: str\n</code></pre> <p>The name of the TTS model.</p>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.TTSModel.run","title":"run  <code>abstractmethod</code>","text":"<pre><code>run(\n    text: str, settings: TTSModelSettings\n) -&gt; AsyncIterator[bytes]\n</code></pre> <p>Given a text string, produces a stream of audio bytes, in PCM format.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to convert to audio.</p> required <p>Returns:</p> Type Description <code>AsyncIterator[bytes]</code> <p>An async iterator of audio bytes, in PCM format.</p> Source code in <code>src/cai/sdk/agents/voice/model.py</code> <pre><code>@abc.abstractmethod\ndef run(self, text: str, settings: TTSModelSettings) -&gt; AsyncIterator[bytes]:\n    \"\"\"Given a text string, produces a stream of audio bytes, in PCM format.\n\n    Args:\n        text: The text to convert to audio.\n\n    Returns:\n        An async iterator of audio bytes, in PCM format.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.StreamedTranscriptionSession","title":"StreamedTranscriptionSession","text":"<p>               Bases: <code>ABC</code></p> <p>A streamed transcription of audio input.</p> Source code in <code>src/cai/sdk/agents/voice/model.py</code> <pre><code>class StreamedTranscriptionSession(abc.ABC):\n    \"\"\"A streamed transcription of audio input.\"\"\"\n\n    @abc.abstractmethod\n    def transcribe_turns(self) -&gt; AsyncIterator[str]:\n        \"\"\"Yields a stream of text transcriptions. Each transcription is a turn in the conversation.\n\n        This method is expected to return only after `close()` is called.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    async def close(self) -&gt; None:\n        \"\"\"Closes the session.\"\"\"\n        pass\n</code></pre>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.StreamedTranscriptionSession.transcribe_turns","title":"transcribe_turns  <code>abstractmethod</code>","text":"<pre><code>transcribe_turns() -&gt; AsyncIterator[str]\n</code></pre> <p>Yields a stream of text transcriptions. Each transcription is a turn in the conversation.</p> <p>This method is expected to return only after <code>close()</code> is called.</p> Source code in <code>src/cai/sdk/agents/voice/model.py</code> <pre><code>@abc.abstractmethod\ndef transcribe_turns(self) -&gt; AsyncIterator[str]:\n    \"\"\"Yields a stream of text transcriptions. Each transcription is a turn in the conversation.\n\n    This method is expected to return only after `close()` is called.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.StreamedTranscriptionSession.close","title":"close  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Closes the session.</p> Source code in <code>src/cai/sdk/agents/voice/model.py</code> <pre><code>@abc.abstractmethod\nasync def close(self) -&gt; None:\n    \"\"\"Closes the session.\"\"\"\n    pass\n</code></pre>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.STTModelSettings","title":"STTModelSettings  <code>dataclass</code>","text":"<p>Settings for a speech-to-text model.</p> Source code in <code>src/cai/sdk/agents/voice/model.py</code> <pre><code>@dataclass\nclass STTModelSettings:\n    \"\"\"Settings for a speech-to-text model.\"\"\"\n\n    prompt: str | None = None\n    \"\"\"Instructions for the model to follow.\"\"\"\n\n    language: str | None = None\n    \"\"\"The language of the audio input.\"\"\"\n\n    temperature: float | None = None\n    \"\"\"The temperature of the model.\"\"\"\n\n    turn_detection: dict[str, Any] | None = None\n    \"\"\"The turn detection settings for the model when using streamed audio input.\"\"\"\n</code></pre>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.STTModelSettings.prompt","title":"prompt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prompt: str | None = None\n</code></pre> <p>Instructions for the model to follow.</p>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.STTModelSettings.language","title":"language  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>language: str | None = None\n</code></pre> <p>The language of the audio input.</p>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.STTModelSettings.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: float | None = None\n</code></pre> <p>The temperature of the model.</p>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.STTModelSettings.turn_detection","title":"turn_detection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>turn_detection: dict[str, Any] | None = None\n</code></pre> <p>The turn detection settings for the model when using streamed audio input.</p>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.STTModel","title":"STTModel","text":"<p>               Bases: <code>ABC</code></p> <p>A speech-to-text model that can convert audio input into text.</p> Source code in <code>src/cai/sdk/agents/voice/model.py</code> <pre><code>class STTModel(abc.ABC):\n    \"\"\"A speech-to-text model that can convert audio input into text.\"\"\"\n\n    @property\n    @abc.abstractmethod\n    def model_name(self) -&gt; str:\n        \"\"\"The name of the STT model.\"\"\"\n        pass\n\n    @abc.abstractmethod\n    async def transcribe(\n        self,\n        input: AudioInput,\n        settings: STTModelSettings,\n        trace_include_sensitive_data: bool,\n        trace_include_sensitive_audio_data: bool,\n    ) -&gt; str:\n        \"\"\"Given an audio input, produces a text transcription.\n\n        Args:\n            input: The audio input to transcribe.\n            settings: The settings to use for the transcription.\n            trace_include_sensitive_data: Whether to include sensitive data in traces.\n            trace_include_sensitive_audio_data: Whether to include sensitive audio data in traces.\n\n        Returns:\n            The text transcription of the audio input.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    async def create_session(\n        self,\n        input: StreamedAudioInput,\n        settings: STTModelSettings,\n        trace_include_sensitive_data: bool,\n        trace_include_sensitive_audio_data: bool,\n    ) -&gt; StreamedTranscriptionSession:\n        \"\"\"Creates a new transcription session, which you can push audio to, and receive a stream\n        of text transcriptions.\n\n        Args:\n            input: The audio input to transcribe.\n            settings: The settings to use for the transcription.\n            trace_include_sensitive_data: Whether to include sensitive data in traces.\n            trace_include_sensitive_audio_data: Whether to include sensitive audio data in traces.\n\n        Returns:\n            A new transcription session.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.STTModel.model_name","title":"model_name  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>model_name: str\n</code></pre> <p>The name of the STT model.</p>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.STTModel.transcribe","title":"transcribe  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>transcribe(\n    input: AudioInput,\n    settings: STTModelSettings,\n    trace_include_sensitive_data: bool,\n    trace_include_sensitive_audio_data: bool,\n) -&gt; str\n</code></pre> <p>Given an audio input, produces a text transcription.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>AudioInput</code> <p>The audio input to transcribe.</p> required <code>settings</code> <code>STTModelSettings</code> <p>The settings to use for the transcription.</p> required <code>trace_include_sensitive_data</code> <code>bool</code> <p>Whether to include sensitive data in traces.</p> required <code>trace_include_sensitive_audio_data</code> <code>bool</code> <p>Whether to include sensitive audio data in traces.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The text transcription of the audio input.</p> Source code in <code>src/cai/sdk/agents/voice/model.py</code> <pre><code>@abc.abstractmethod\nasync def transcribe(\n    self,\n    input: AudioInput,\n    settings: STTModelSettings,\n    trace_include_sensitive_data: bool,\n    trace_include_sensitive_audio_data: bool,\n) -&gt; str:\n    \"\"\"Given an audio input, produces a text transcription.\n\n    Args:\n        input: The audio input to transcribe.\n        settings: The settings to use for the transcription.\n        trace_include_sensitive_data: Whether to include sensitive data in traces.\n        trace_include_sensitive_audio_data: Whether to include sensitive audio data in traces.\n\n    Returns:\n        The text transcription of the audio input.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.STTModel.create_session","title":"create_session  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>create_session(\n    input: StreamedAudioInput,\n    settings: STTModelSettings,\n    trace_include_sensitive_data: bool,\n    trace_include_sensitive_audio_data: bool,\n) -&gt; StreamedTranscriptionSession\n</code></pre> <p>Creates a new transcription session, which you can push audio to, and receive a stream of text transcriptions.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>StreamedAudioInput</code> <p>The audio input to transcribe.</p> required <code>settings</code> <code>STTModelSettings</code> <p>The settings to use for the transcription.</p> required <code>trace_include_sensitive_data</code> <code>bool</code> <p>Whether to include sensitive data in traces.</p> required <code>trace_include_sensitive_audio_data</code> <code>bool</code> <p>Whether to include sensitive audio data in traces.</p> required <p>Returns:</p> Type Description <code>StreamedTranscriptionSession</code> <p>A new transcription session.</p> Source code in <code>src/cai/sdk/agents/voice/model.py</code> <pre><code>@abc.abstractmethod\nasync def create_session(\n    self,\n    input: StreamedAudioInput,\n    settings: STTModelSettings,\n    trace_include_sensitive_data: bool,\n    trace_include_sensitive_audio_data: bool,\n) -&gt; StreamedTranscriptionSession:\n    \"\"\"Creates a new transcription session, which you can push audio to, and receive a stream\n    of text transcriptions.\n\n    Args:\n        input: The audio input to transcribe.\n        settings: The settings to use for the transcription.\n        trace_include_sensitive_data: Whether to include sensitive data in traces.\n        trace_include_sensitive_audio_data: Whether to include sensitive audio data in traces.\n\n    Returns:\n        A new transcription session.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.VoiceModelProvider","title":"VoiceModelProvider","text":"<p>               Bases: <code>ABC</code></p> <p>The base interface for a voice model provider.</p> <p>A model provider is responsible for creating speech-to-text and text-to-speech models, given a name.</p> Source code in <code>src/cai/sdk/agents/voice/model.py</code> <pre><code>class VoiceModelProvider(abc.ABC):\n    \"\"\"The base interface for a voice model provider.\n\n    A model provider is responsible for creating speech-to-text and text-to-speech models, given a\n    name.\n    \"\"\"\n\n    @abc.abstractmethod\n    def get_stt_model(self, model_name: str | None) -&gt; STTModel:\n        \"\"\"Get a speech-to-text model by name.\n\n        Args:\n            model_name: The name of the model to get.\n\n        Returns:\n            The speech-to-text model.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_tts_model(self, model_name: str | None) -&gt; TTSModel:\n        \"\"\"Get a text-to-speech model by name.\"\"\"\n</code></pre>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.VoiceModelProvider.get_stt_model","title":"get_stt_model  <code>abstractmethod</code>","text":"<pre><code>get_stt_model(model_name: str | None) -&gt; STTModel\n</code></pre> <p>Get a speech-to-text model by name.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str | None</code> <p>The name of the model to get.</p> required <p>Returns:</p> Type Description <code>STTModel</code> <p>The speech-to-text model.</p> Source code in <code>src/cai/sdk/agents/voice/model.py</code> <pre><code>@abc.abstractmethod\ndef get_stt_model(self, model_name: str | None) -&gt; STTModel:\n    \"\"\"Get a speech-to-text model by name.\n\n    Args:\n        model_name: The name of the model to get.\n\n    Returns:\n        The speech-to-text model.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/voice/model/#cai.sdk.agents.voice.model.VoiceModelProvider.get_tts_model","title":"get_tts_model  <code>abstractmethod</code>","text":"<pre><code>get_tts_model(model_name: str | None) -&gt; TTSModel\n</code></pre> <p>Get a text-to-speech model by name.</p> Source code in <code>src/cai/sdk/agents/voice/model.py</code> <pre><code>@abc.abstractmethod\ndef get_tts_model(self, model_name: str | None) -&gt; TTSModel:\n    \"\"\"Get a text-to-speech model by name.\"\"\"\n</code></pre>"},{"location":"ref/voice/pipeline/","title":"<code>Pipeline</code>","text":""},{"location":"ref/voice/pipeline/#cai.sdk.agents.voice.pipeline.VoicePipeline","title":"VoicePipeline","text":"<p>An opinionated voice agent pipeline. It works in three steps: 1. Transcribe audio input into text. 2. Run the provided <code>workflow</code>, which produces a sequence of text responses. 3. Convert the text responses into streaming audio output.</p> Source code in <code>src/cai/sdk/agents/voice/pipeline.py</code> <pre><code>class VoicePipeline:\n    \"\"\"An opinionated voice agent pipeline. It works in three steps:\n    1. Transcribe audio input into text.\n    2. Run the provided `workflow`, which produces a sequence of text responses.\n    3. Convert the text responses into streaming audio output.\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        workflow: VoiceWorkflowBase,\n        stt_model: STTModel | str | None = None,\n        tts_model: TTSModel | str | None = None,\n        config: VoicePipelineConfig | None = None,\n    ):\n        \"\"\"Create a new voice pipeline.\n\n        Args:\n            workflow: The workflow to run. See `VoiceWorkflowBase`.\n            stt_model: The speech-to-text model to use. If not provided, a default OpenAI\n                model will be used.\n            tts_model: The text-to-speech model to use. If not provided, a default OpenAI\n                model will be used.\n            config: The pipeline configuration. If not provided, a default configuration will be\n                used.\n        \"\"\"\n        self.workflow = workflow\n        self.stt_model = stt_model if isinstance(stt_model, STTModel) else None\n        self.tts_model = tts_model if isinstance(tts_model, TTSModel) else None\n        self._stt_model_name = stt_model if isinstance(stt_model, str) else None\n        self._tts_model_name = tts_model if isinstance(tts_model, str) else None\n        self.config = config or VoicePipelineConfig()\n\n    async def run(self, audio_input: AudioInput | StreamedAudioInput) -&gt; StreamedAudioResult:\n        \"\"\"Run the voice pipeline.\n\n        Args:\n            audio_input: The audio input to process. This can either be an `AudioInput` instance,\n                which is a single static buffer, or a `StreamedAudioInput` instance, which is a\n                stream of audio data that you can append to.\n\n        Returns:\n            A `StreamedAudioResult` instance. You can use this object to stream audio events and\n            play them out.\n        \"\"\"\n        if isinstance(audio_input, AudioInput):\n            return await self._run_single_turn(audio_input)\n        elif isinstance(audio_input, StreamedAudioInput):\n            return await self._run_multi_turn(audio_input)\n        else:\n            raise UserError(f\"Unsupported audio input type: {type(audio_input)}\")\n\n    def _get_tts_model(self) -&gt; TTSModel:\n        if not self.tts_model:\n            self.tts_model = self.config.model_provider.get_tts_model(self._tts_model_name)\n        return self.tts_model\n\n    def _get_stt_model(self) -&gt; STTModel:\n        if not self.stt_model:\n            self.stt_model = self.config.model_provider.get_stt_model(self._stt_model_name)\n        return self.stt_model\n\n    async def _process_audio_input(self, audio_input: AudioInput) -&gt; str:\n        model = self._get_stt_model()\n        return await model.transcribe(\n            audio_input,\n            self.config.stt_settings,\n            self.config.trace_include_sensitive_data,\n            self.config.trace_include_sensitive_audio_data,\n        )\n\n    async def _run_single_turn(self, audio_input: AudioInput) -&gt; StreamedAudioResult:\n        # Since this is single turn, we can use the TraceCtxManager to manage starting/ending the\n        # trace\n        with TraceCtxManager(\n            workflow_name=self.config.workflow_name or \"Voice Agent\",\n            trace_id=None,  # Automatically generated\n            group_id=self.config.group_id,\n            metadata=self.config.trace_metadata,\n            disabled=self.config.tracing_disabled,\n        ):\n            input_text = await self._process_audio_input(audio_input)\n\n            output = StreamedAudioResult(\n                self._get_tts_model(), self.config.tts_settings, self.config\n            )\n\n            async def stream_events():\n                try:\n                    async for text_event in self.workflow.run(input_text):\n                        await output._add_text(text_event)\n                    await output._turn_done()\n                    await output._done()\n                except Exception as e:\n                    logger.error(f\"Error processing single turn: {e}\")\n                    await output._add_error(e)\n                    raise e\n\n            output._set_task(asyncio.create_task(stream_events()))\n            return output\n\n    async def _run_multi_turn(self, audio_input: StreamedAudioInput) -&gt; StreamedAudioResult:\n        with TraceCtxManager(\n            workflow_name=self.config.workflow_name or \"Voice Agent\",\n            trace_id=None,\n            group_id=self.config.group_id,\n            metadata=self.config.trace_metadata,\n            disabled=self.config.tracing_disabled,\n        ):\n            output = StreamedAudioResult(\n                self._get_tts_model(), self.config.tts_settings, self.config\n            )\n\n            transcription_session = await self._get_stt_model().create_session(\n                audio_input,\n                self.config.stt_settings,\n                self.config.trace_include_sensitive_data,\n                self.config.trace_include_sensitive_audio_data,\n            )\n\n            async def process_turns():\n                try:\n                    async for input_text in transcription_session.transcribe_turns():\n                        result = self.workflow.run(input_text)\n                        async for text_event in result:\n                            await output._add_text(text_event)\n                        await output._turn_done()\n                except Exception as e:\n                    logger.error(f\"Error processing turns: {e}\")\n                    await output._add_error(e)\n                    raise e\n                finally:\n                    await transcription_session.close()\n                    await output._done()\n\n            output._set_task(asyncio.create_task(process_turns()))\n            return output\n</code></pre>"},{"location":"ref/voice/pipeline/#cai.sdk.agents.voice.pipeline.VoicePipeline.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    workflow: VoiceWorkflowBase,\n    stt_model: STTModel | str | None = None,\n    tts_model: TTSModel | str | None = None,\n    config: VoicePipelineConfig | None = None,\n)\n</code></pre> <p>Create a new voice pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>workflow</code> <code>VoiceWorkflowBase</code> <p>The workflow to run. See <code>VoiceWorkflowBase</code>.</p> required <code>stt_model</code> <code>STTModel | str | None</code> <p>The speech-to-text model to use. If not provided, a default OpenAI model will be used.</p> <code>None</code> <code>tts_model</code> <code>TTSModel | str | None</code> <p>The text-to-speech model to use. If not provided, a default OpenAI model will be used.</p> <code>None</code> <code>config</code> <code>VoicePipelineConfig | None</code> <p>The pipeline configuration. If not provided, a default configuration will be used.</p> <code>None</code> Source code in <code>src/cai/sdk/agents/voice/pipeline.py</code> <pre><code>def __init__(\n    self,\n    *,\n    workflow: VoiceWorkflowBase,\n    stt_model: STTModel | str | None = None,\n    tts_model: TTSModel | str | None = None,\n    config: VoicePipelineConfig | None = None,\n):\n    \"\"\"Create a new voice pipeline.\n\n    Args:\n        workflow: The workflow to run. See `VoiceWorkflowBase`.\n        stt_model: The speech-to-text model to use. If not provided, a default OpenAI\n            model will be used.\n        tts_model: The text-to-speech model to use. If not provided, a default OpenAI\n            model will be used.\n        config: The pipeline configuration. If not provided, a default configuration will be\n            used.\n    \"\"\"\n    self.workflow = workflow\n    self.stt_model = stt_model if isinstance(stt_model, STTModel) else None\n    self.tts_model = tts_model if isinstance(tts_model, TTSModel) else None\n    self._stt_model_name = stt_model if isinstance(stt_model, str) else None\n    self._tts_model_name = tts_model if isinstance(tts_model, str) else None\n    self.config = config or VoicePipelineConfig()\n</code></pre>"},{"location":"ref/voice/pipeline/#cai.sdk.agents.voice.pipeline.VoicePipeline.run","title":"run  <code>async</code>","text":"<pre><code>run(\n    audio_input: AudioInput | StreamedAudioInput,\n) -&gt; StreamedAudioResult\n</code></pre> <p>Run the voice pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>audio_input</code> <code>AudioInput | StreamedAudioInput</code> <p>The audio input to process. This can either be an <code>AudioInput</code> instance, which is a single static buffer, or a <code>StreamedAudioInput</code> instance, which is a stream of audio data that you can append to.</p> required <p>Returns:</p> Type Description <code>StreamedAudioResult</code> <p>A <code>StreamedAudioResult</code> instance. You can use this object to stream audio events and</p> <code>StreamedAudioResult</code> <p>play them out.</p> Source code in <code>src/cai/sdk/agents/voice/pipeline.py</code> <pre><code>async def run(self, audio_input: AudioInput | StreamedAudioInput) -&gt; StreamedAudioResult:\n    \"\"\"Run the voice pipeline.\n\n    Args:\n        audio_input: The audio input to process. This can either be an `AudioInput` instance,\n            which is a single static buffer, or a `StreamedAudioInput` instance, which is a\n            stream of audio data that you can append to.\n\n    Returns:\n        A `StreamedAudioResult` instance. You can use this object to stream audio events and\n        play them out.\n    \"\"\"\n    if isinstance(audio_input, AudioInput):\n        return await self._run_single_turn(audio_input)\n    elif isinstance(audio_input, StreamedAudioInput):\n        return await self._run_multi_turn(audio_input)\n    else:\n        raise UserError(f\"Unsupported audio input type: {type(audio_input)}\")\n</code></pre>"},{"location":"ref/voice/pipeline_config/","title":"<code>Pipeline Config</code>","text":""},{"location":"ref/voice/pipeline_config/#cai.sdk.agents.voice.pipeline_config.VoicePipelineConfig","title":"VoicePipelineConfig  <code>dataclass</code>","text":"<p>Configuration for a <code>VoicePipeline</code>.</p> Source code in <code>src/cai/sdk/agents/voice/pipeline_config.py</code> <pre><code>@dataclass\nclass VoicePipelineConfig:\n    \"\"\"Configuration for a `VoicePipeline`.\"\"\"\n\n    model_provider: VoiceModelProvider = field(default_factory=OpenAIVoiceModelProvider)\n    \"\"\"The voice model provider to use for the pipeline. Defaults to OpenAI.\"\"\"\n\n    tracing_disabled: bool = False\n    \"\"\"Whether to disable tracing of the pipeline. Defaults to `False`.\"\"\"\n\n    trace_include_sensitive_data: bool = True\n    \"\"\"Whether to include sensitive data in traces. Defaults to `True`. This is specifically for the\n      voice pipeline, and not for anything that goes on inside your Workflow.\"\"\"\n\n    trace_include_sensitive_audio_data: bool = True\n    \"\"\"Whether to include audio data in traces. Defaults to `True`.\"\"\"\n\n    workflow_name: str = \"Voice Agent\"\n    \"\"\"The name of the workflow to use for tracing. Defaults to `Voice Agent`.\"\"\"\n\n    group_id: str = field(default_factory=gen_group_id)\n    \"\"\"\n    A grouping identifier to use for tracing, to link multiple traces from the same conversation\n    or process. If not provided, we will create a random group ID.\n    \"\"\"\n\n    trace_metadata: dict[str, Any] | None = None\n    \"\"\"\n    An optional dictionary of additional metadata to include with the trace.\n    \"\"\"\n\n    stt_settings: STTModelSettings = field(default_factory=STTModelSettings)\n    \"\"\"The settings to use for the STT model.\"\"\"\n\n    tts_settings: TTSModelSettings = field(default_factory=TTSModelSettings)\n    \"\"\"The settings to use for the TTS model.\"\"\"\n</code></pre>"},{"location":"ref/voice/pipeline_config/#cai.sdk.agents.voice.pipeline_config.VoicePipelineConfig.model_provider","title":"model_provider  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_provider: VoiceModelProvider = field(\n    default_factory=OpenAIVoiceModelProvider\n)\n</code></pre> <p>The voice model provider to use for the pipeline. Defaults to OpenAI.</p>"},{"location":"ref/voice/pipeline_config/#cai.sdk.agents.voice.pipeline_config.VoicePipelineConfig.tracing_disabled","title":"tracing_disabled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tracing_disabled: bool = False\n</code></pre> <p>Whether to disable tracing of the pipeline. Defaults to <code>False</code>.</p>"},{"location":"ref/voice/pipeline_config/#cai.sdk.agents.voice.pipeline_config.VoicePipelineConfig.trace_include_sensitive_data","title":"trace_include_sensitive_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace_include_sensitive_data: bool = True\n</code></pre> <p>Whether to include sensitive data in traces. Defaults to <code>True</code>. This is specifically for the voice pipeline, and not for anything that goes on inside your Workflow.</p>"},{"location":"ref/voice/pipeline_config/#cai.sdk.agents.voice.pipeline_config.VoicePipelineConfig.trace_include_sensitive_audio_data","title":"trace_include_sensitive_audio_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace_include_sensitive_audio_data: bool = True\n</code></pre> <p>Whether to include audio data in traces. Defaults to <code>True</code>.</p>"},{"location":"ref/voice/pipeline_config/#cai.sdk.agents.voice.pipeline_config.VoicePipelineConfig.workflow_name","title":"workflow_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>workflow_name: str = 'Voice Agent'\n</code></pre> <p>The name of the workflow to use for tracing. Defaults to <code>Voice Agent</code>.</p>"},{"location":"ref/voice/pipeline_config/#cai.sdk.agents.voice.pipeline_config.VoicePipelineConfig.group_id","title":"group_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>group_id: str = field(default_factory=gen_group_id)\n</code></pre> <p>A grouping identifier to use for tracing, to link multiple traces from the same conversation or process. If not provided, we will create a random group ID.</p>"},{"location":"ref/voice/pipeline_config/#cai.sdk.agents.voice.pipeline_config.VoicePipelineConfig.trace_metadata","title":"trace_metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace_metadata: dict[str, Any] | None = None\n</code></pre> <p>An optional dictionary of additional metadata to include with the trace.</p>"},{"location":"ref/voice/pipeline_config/#cai.sdk.agents.voice.pipeline_config.VoicePipelineConfig.stt_settings","title":"stt_settings  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stt_settings: STTModelSettings = field(\n    default_factory=STTModelSettings\n)\n</code></pre> <p>The settings to use for the STT model.</p>"},{"location":"ref/voice/pipeline_config/#cai.sdk.agents.voice.pipeline_config.VoicePipelineConfig.tts_settings","title":"tts_settings  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tts_settings: TTSModelSettings = field(\n    default_factory=TTSModelSettings\n)\n</code></pre> <p>The settings to use for the TTS model.</p>"},{"location":"ref/voice/result/","title":"<code>Result</code>","text":""},{"location":"ref/voice/result/#cai.sdk.agents.voice.result.StreamedAudioResult","title":"StreamedAudioResult","text":"<p>The output of a <code>VoicePipeline</code>. Streams events and audio data as they're generated.</p> Source code in <code>src/cai/sdk/agents/voice/result.py</code> <pre><code>class StreamedAudioResult:\n    \"\"\"The output of a `VoicePipeline`. Streams events and audio data as they're generated.\"\"\"\n\n    def __init__(\n        self,\n        tts_model: TTSModel,\n        tts_settings: TTSModelSettings,\n        voice_pipeline_config: VoicePipelineConfig,\n    ):\n        \"\"\"Create a new `StreamedAudioResult` instance.\n\n        Args:\n            tts_model: The TTS model to use.\n            tts_settings: The TTS settings to use.\n            voice_pipeline_config: The voice pipeline config to use.\n        \"\"\"\n        self.tts_model = tts_model\n        self.tts_settings = tts_settings\n        self.total_output_text = \"\"\n        self.instructions = tts_settings.instructions\n        self.text_generation_task: asyncio.Task[Any] | None = None\n\n        self._voice_pipeline_config = voice_pipeline_config\n        self._text_buffer = \"\"\n        self._turn_text_buffer = \"\"\n        self._queue: asyncio.Queue[VoiceStreamEvent] = asyncio.Queue()\n        self._tasks: list[asyncio.Task[Any]] = []\n        self._ordered_tasks: list[\n            asyncio.Queue[VoiceStreamEvent | None]\n        ] = []  # New: list to hold local queues for each text segment\n        self._dispatcher_task: asyncio.Task[Any] | None = (\n            None  # Task to dispatch audio chunks in order\n        )\n\n        self._done_processing = False\n        self._buffer_size = tts_settings.buffer_size\n        self._started_processing_turn = False\n        self._first_byte_received = False\n        self._generation_start_time: str | None = None\n        self._completed_session = False\n        self._stored_exception: BaseException | None = None\n        self._tracing_span: Span[SpeechGroupSpanData] | None = None\n\n    async def _start_turn(self):\n        if self._started_processing_turn:\n            return\n\n        self._tracing_span = speech_group_span()\n        self._tracing_span.start()\n        self._started_processing_turn = True\n        self._first_byte_received = False\n        self._generation_start_time = time_iso()\n        await self._queue.put(VoiceStreamEventLifecycle(event=\"turn_started\"))\n\n    def _set_task(self, task: asyncio.Task[Any]):\n        self.text_generation_task = task\n\n    async def _add_error(self, error: Exception):\n        await self._queue.put(VoiceStreamEventError(error))\n\n    def _transform_audio_buffer(\n        self, buffer: list[bytes], output_dtype: npt.DTypeLike\n    ) -&gt; npt.NDArray[np.int16 | np.float32]:\n        np_array = np.frombuffer(b\"\".join(buffer), dtype=np.int16)\n\n        if output_dtype == np.int16:\n            return np_array\n        elif output_dtype == np.float32:\n            return (np_array.astype(np.float32) / 32767.0).reshape(-1, 1)\n        else:\n            raise UserError(\"Invalid output dtype\")\n\n    async def _stream_audio(\n        self,\n        text: str,\n        local_queue: asyncio.Queue[VoiceStreamEvent | None],\n        finish_turn: bool = False,\n    ):\n        with speech_span(\n            model=self.tts_model.model_name,\n            input=text if self._voice_pipeline_config.trace_include_sensitive_data else \"\",\n            model_config={\n                \"voice\": self.tts_settings.voice,\n                \"instructions\": self.instructions,\n                \"speed\": self.tts_settings.speed,\n            },\n            output_format=\"pcm\",\n            parent=self._tracing_span,\n        ) as tts_span:\n            try:\n                first_byte_received = False\n                buffer: list[bytes] = []\n                full_audio_data: list[bytes] = []\n\n                async for chunk in self.tts_model.run(text, self.tts_settings):\n                    if not first_byte_received:\n                        first_byte_received = True\n                        tts_span.span_data.first_content_at = time_iso()\n\n                    if chunk:\n                        buffer.append(chunk)\n                        full_audio_data.append(chunk)\n                        if len(buffer) &gt;= self._buffer_size:\n                            audio_np = self._transform_audio_buffer(buffer, self.tts_settings.dtype)\n                            if self.tts_settings.transform_data:\n                                audio_np = self.tts_settings.transform_data(audio_np)\n                            await local_queue.put(\n                                VoiceStreamEventAudio(data=audio_np)\n                            )  # Use local queue\n                            buffer = []\n                if buffer:\n                    audio_np = self._transform_audio_buffer(buffer, self.tts_settings.dtype)\n                    if self.tts_settings.transform_data:\n                        audio_np = self.tts_settings.transform_data(audio_np)\n                    await local_queue.put(VoiceStreamEventAudio(data=audio_np))  # Use local queue\n\n                if self._voice_pipeline_config.trace_include_sensitive_audio_data:\n                    tts_span.span_data.output = _audio_to_base64(full_audio_data)\n                else:\n                    tts_span.span_data.output = \"\"\n\n                if finish_turn:\n                    await local_queue.put(VoiceStreamEventLifecycle(event=\"turn_ended\"))\n                else:\n                    await local_queue.put(None)  # Signal completion for this segment\n            except Exception as e:\n                tts_span.set_error(\n                    {\n                        \"message\": str(e),\n                        \"data\": {\n                            \"text\": text\n                            if self._voice_pipeline_config.trace_include_sensitive_data\n                            else \"\",\n                        },\n                    }\n                )\n                logger.error(f\"Error streaming audio: {e}\")\n\n                # Signal completion for whole session because of error\n                await local_queue.put(VoiceStreamEventLifecycle(event=\"session_ended\"))\n                raise e\n\n    async def _add_text(self, text: str):\n        await self._start_turn()\n\n        self._text_buffer += text\n        self.total_output_text += text\n        self._turn_text_buffer += text\n\n        combined_sentences, self._text_buffer = self.tts_settings.text_splitter(self._text_buffer)\n\n        if len(combined_sentences) &gt;= 20:\n            local_queue: asyncio.Queue[VoiceStreamEvent | None] = asyncio.Queue()\n            self._ordered_tasks.append(local_queue)\n            self._tasks.append(\n                asyncio.create_task(self._stream_audio(combined_sentences, local_queue))\n            )\n            if self._dispatcher_task is None:\n                self._dispatcher_task = asyncio.create_task(self._dispatch_audio())\n\n    async def _turn_done(self):\n        if self._text_buffer:\n            local_queue: asyncio.Queue[VoiceStreamEvent | None] = asyncio.Queue()\n            self._ordered_tasks.append(local_queue)  # Append the local queue for the final segment\n            self._tasks.append(\n                asyncio.create_task(\n                    self._stream_audio(self._text_buffer, local_queue, finish_turn=True)\n                )\n            )\n            self._text_buffer = \"\"\n        self._done_processing = True\n        if self._dispatcher_task is None:\n            self._dispatcher_task = asyncio.create_task(self._dispatch_audio())\n        await asyncio.gather(*self._tasks)\n\n    def _finish_turn(self):\n        if self._tracing_span:\n            if self._voice_pipeline_config.trace_include_sensitive_data:\n                self._tracing_span.span_data.input = self._turn_text_buffer\n            else:\n                self._tracing_span.span_data.input = \"\"\n\n            self._tracing_span.finish()\n            self._tracing_span = None\n        self._turn_text_buffer = \"\"\n        self._started_processing_turn = False\n\n    async def _done(self):\n        self._completed_session = True\n        await self._wait_for_completion()\n\n    async def _dispatch_audio(self):\n        # Dispatch audio chunks from each segment in the order they were added\n        while True:\n            if len(self._ordered_tasks) == 0:\n                if self._completed_session:\n                    break\n                await asyncio.sleep(0)\n                continue\n            local_queue = self._ordered_tasks.pop(0)\n            while True:\n                chunk = await local_queue.get()\n                if chunk is None:\n                    break\n                await self._queue.put(chunk)\n                if isinstance(chunk, VoiceStreamEventLifecycle):\n                    local_queue.task_done()\n                    if chunk.event == \"turn_ended\":\n                        self._finish_turn()\n                        break\n        await self._queue.put(VoiceStreamEventLifecycle(event=\"session_ended\"))\n\n    async def _wait_for_completion(self):\n        tasks: list[asyncio.Task[Any]] = self._tasks\n        if self._dispatcher_task is not None:\n            tasks.append(self._dispatcher_task)\n        await asyncio.gather(*tasks)\n\n    def _cleanup_tasks(self):\n        self._finish_turn()\n\n        for task in self._tasks:\n            if not task.done():\n                task.cancel()\n\n        if self._dispatcher_task and not self._dispatcher_task.done():\n            self._dispatcher_task.cancel()\n\n        if self.text_generation_task and not self.text_generation_task.done():\n            self.text_generation_task.cancel()\n\n    def _check_errors(self):\n        for task in self._tasks:\n            if task.done():\n                if task.exception():\n                    self._stored_exception = task.exception()\n                    break\n\n    async def stream(self) -&gt; AsyncIterator[VoiceStreamEvent]:\n        \"\"\"Stream the events and audio data as they're generated.\"\"\"\n        while True:\n            try:\n                event = await self._queue.get()\n            except asyncio.CancelledError:\n                break\n            if isinstance(event, VoiceStreamEventError):\n                self._stored_exception = event.error\n                logger.error(f\"Error processing output: {event.error}\")\n                break\n            if event is None:\n                break\n            yield event\n            if event.type == \"voice_stream_event_lifecycle\" and event.event == \"session_ended\":\n                break\n\n        self._check_errors()\n        self._cleanup_tasks()\n\n        if self._stored_exception:\n            raise self._stored_exception\n</code></pre>"},{"location":"ref/voice/result/#cai.sdk.agents.voice.result.StreamedAudioResult.__init__","title":"__init__","text":"<pre><code>__init__(\n    tts_model: TTSModel,\n    tts_settings: TTSModelSettings,\n    voice_pipeline_config: VoicePipelineConfig,\n)\n</code></pre> <p>Create a new <code>StreamedAudioResult</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>tts_model</code> <code>TTSModel</code> <p>The TTS model to use.</p> required <code>tts_settings</code> <code>TTSModelSettings</code> <p>The TTS settings to use.</p> required <code>voice_pipeline_config</code> <code>VoicePipelineConfig</code> <p>The voice pipeline config to use.</p> required Source code in <code>src/cai/sdk/agents/voice/result.py</code> <pre><code>def __init__(\n    self,\n    tts_model: TTSModel,\n    tts_settings: TTSModelSettings,\n    voice_pipeline_config: VoicePipelineConfig,\n):\n    \"\"\"Create a new `StreamedAudioResult` instance.\n\n    Args:\n        tts_model: The TTS model to use.\n        tts_settings: The TTS settings to use.\n        voice_pipeline_config: The voice pipeline config to use.\n    \"\"\"\n    self.tts_model = tts_model\n    self.tts_settings = tts_settings\n    self.total_output_text = \"\"\n    self.instructions = tts_settings.instructions\n    self.text_generation_task: asyncio.Task[Any] | None = None\n\n    self._voice_pipeline_config = voice_pipeline_config\n    self._text_buffer = \"\"\n    self._turn_text_buffer = \"\"\n    self._queue: asyncio.Queue[VoiceStreamEvent] = asyncio.Queue()\n    self._tasks: list[asyncio.Task[Any]] = []\n    self._ordered_tasks: list[\n        asyncio.Queue[VoiceStreamEvent | None]\n    ] = []  # New: list to hold local queues for each text segment\n    self._dispatcher_task: asyncio.Task[Any] | None = (\n        None  # Task to dispatch audio chunks in order\n    )\n\n    self._done_processing = False\n    self._buffer_size = tts_settings.buffer_size\n    self._started_processing_turn = False\n    self._first_byte_received = False\n    self._generation_start_time: str | None = None\n    self._completed_session = False\n    self._stored_exception: BaseException | None = None\n    self._tracing_span: Span[SpeechGroupSpanData] | None = None\n</code></pre>"},{"location":"ref/voice/result/#cai.sdk.agents.voice.result.StreamedAudioResult.stream","title":"stream  <code>async</code>","text":"<pre><code>stream() -&gt; AsyncIterator[VoiceStreamEvent]\n</code></pre> <p>Stream the events and audio data as they're generated.</p> Source code in <code>src/cai/sdk/agents/voice/result.py</code> <pre><code>async def stream(self) -&gt; AsyncIterator[VoiceStreamEvent]:\n    \"\"\"Stream the events and audio data as they're generated.\"\"\"\n    while True:\n        try:\n            event = await self._queue.get()\n        except asyncio.CancelledError:\n            break\n        if isinstance(event, VoiceStreamEventError):\n            self._stored_exception = event.error\n            logger.error(f\"Error processing output: {event.error}\")\n            break\n        if event is None:\n            break\n        yield event\n        if event.type == \"voice_stream_event_lifecycle\" and event.event == \"session_ended\":\n            break\n\n    self._check_errors()\n    self._cleanup_tasks()\n\n    if self._stored_exception:\n        raise self._stored_exception\n</code></pre>"},{"location":"ref/voice/utils/","title":"<code>Utils</code>","text":""},{"location":"ref/voice/utils/#cai.sdk.agents.voice.utils.get_sentence_based_splitter","title":"get_sentence_based_splitter","text":"<pre><code>get_sentence_based_splitter(\n    min_sentence_length: int = 20,\n) -&gt; Callable[[str], tuple[str, str]]\n</code></pre> <p>Returns a function that splits text into chunks based on sentence boundaries.</p> <p>Parameters:</p> Name Type Description Default <code>min_sentence_length</code> <code>int</code> <p>The minimum length of a sentence to be included in a chunk.</p> <code>20</code> <p>Returns:</p> Type Description <code>Callable[[str], tuple[str, str]]</code> <p>A function that splits text into chunks based on sentence boundaries.</p> Source code in <code>src/cai/sdk/agents/voice/utils.py</code> <pre><code>def get_sentence_based_splitter(\n    min_sentence_length: int = 20,\n) -&gt; Callable[[str], tuple[str, str]]:\n    \"\"\"Returns a function that splits text into chunks based on sentence boundaries.\n\n    Args:\n        min_sentence_length: The minimum length of a sentence to be included in a chunk.\n\n    Returns:\n        A function that splits text into chunks based on sentence boundaries.\n    \"\"\"\n\n    def sentence_based_text_splitter(text_buffer: str) -&gt; tuple[str, str]:\n        \"\"\"\n        A function to split the text into chunks. This is useful if you want to split the text into\n        chunks before sending it to the TTS model rather than waiting for the whole text to be\n        processed.\n\n        Args:\n            text_buffer: The text to split.\n\n        Returns:\n            A tuple of the text to process and the remaining text buffer.\n        \"\"\"\n        sentences = re.split(r\"(?&lt;=[.!?])\\s+\", text_buffer.strip())\n        if len(sentences) &gt;= 1:\n            combined_sentences = \" \".join(sentences[:-1])\n            if len(combined_sentences) &gt;= min_sentence_length:\n                remaining_text_buffer = sentences[-1]\n                return combined_sentences, remaining_text_buffer\n        return \"\", text_buffer\n\n    return sentence_based_text_splitter\n</code></pre>"},{"location":"ref/voice/workflow/","title":"<code>Workflow</code>","text":""},{"location":"ref/voice/workflow/#cai.sdk.agents.voice.workflow.VoiceWorkflowBase","title":"VoiceWorkflowBase","text":"<p>               Bases: <code>ABC</code></p> <p>A base class for a voice workflow. You must implement the <code>run</code> method. A \"workflow\" is any code you want, that receives a transcription and yields text that will be turned into speech by a text-to-speech model. In most cases, you'll create <code>Agent</code>s and use <code>Runner.run_streamed()</code> to run them, returning some or all of the text events from the stream. You can use the <code>VoiceWorkflowHelper</code> class to help with extracting text events from the stream. If you have a simple workflow that has a single starting agent and no custom logic, you can use <code>SingleAgentVoiceWorkflow</code> directly.</p> Source code in <code>src/cai/sdk/agents/voice/workflow.py</code> <pre><code>class VoiceWorkflowBase(abc.ABC):\n    \"\"\"\n    A base class for a voice workflow. You must implement the `run` method. A \"workflow\" is any\n    code you want, that receives a transcription and yields text that will be turned into speech\n    by a text-to-speech model.\n    In most cases, you'll create `Agent`s and use `Runner.run_streamed()` to run them, returning\n    some or all of the text events from the stream. You can use the `VoiceWorkflowHelper` class to\n    help with extracting text events from the stream.\n    If you have a simple workflow that has a single starting agent and no custom logic, you can\n    use `SingleAgentVoiceWorkflow` directly.\n    \"\"\"\n\n    @abc.abstractmethod\n    def run(self, transcription: str) -&gt; AsyncIterator[str]:\n        \"\"\"\n        Run the voice workflow. You will receive an input transcription, and must yield text that\n        will be spoken to the user. You can run whatever logic you want here. In most cases, the\n        final logic will involve calling `Runner.run_streamed()` and yielding any text events from\n        the stream.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"ref/voice/workflow/#cai.sdk.agents.voice.workflow.VoiceWorkflowBase.run","title":"run  <code>abstractmethod</code>","text":"<pre><code>run(transcription: str) -&gt; AsyncIterator[str]\n</code></pre> <p>Run the voice workflow. You will receive an input transcription, and must yield text that will be spoken to the user. You can run whatever logic you want here. In most cases, the final logic will involve calling <code>Runner.run_streamed()</code> and yielding any text events from the stream.</p> Source code in <code>src/cai/sdk/agents/voice/workflow.py</code> <pre><code>@abc.abstractmethod\ndef run(self, transcription: str) -&gt; AsyncIterator[str]:\n    \"\"\"\n    Run the voice workflow. You will receive an input transcription, and must yield text that\n    will be spoken to the user. You can run whatever logic you want here. In most cases, the\n    final logic will involve calling `Runner.run_streamed()` and yielding any text events from\n    the stream.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/voice/workflow/#cai.sdk.agents.voice.workflow.VoiceWorkflowHelper","title":"VoiceWorkflowHelper","text":"Source code in <code>src/cai/sdk/agents/voice/workflow.py</code> <pre><code>class VoiceWorkflowHelper:\n    @classmethod\n    async def stream_text_from(cls, result: RunResultStreaming) -&gt; AsyncIterator[str]:\n        \"\"\"Wraps a `RunResultStreaming` object and yields text events from the stream.\"\"\"\n        async for event in result.stream_events():\n            if (\n                event.type == \"raw_response_event\"\n                and event.data.type == \"response.output_text.delta\"\n            ):\n                yield event.data.delta\n</code></pre>"},{"location":"ref/voice/workflow/#cai.sdk.agents.voice.workflow.VoiceWorkflowHelper.stream_text_from","title":"stream_text_from  <code>async</code> <code>classmethod</code>","text":"<pre><code>stream_text_from(\n    result: RunResultStreaming,\n) -&gt; AsyncIterator[str]\n</code></pre> <p>Wraps a <code>RunResultStreaming</code> object and yields text events from the stream.</p> Source code in <code>src/cai/sdk/agents/voice/workflow.py</code> <pre><code>@classmethod\nasync def stream_text_from(cls, result: RunResultStreaming) -&gt; AsyncIterator[str]:\n    \"\"\"Wraps a `RunResultStreaming` object and yields text events from the stream.\"\"\"\n    async for event in result.stream_events():\n        if (\n            event.type == \"raw_response_event\"\n            and event.data.type == \"response.output_text.delta\"\n        ):\n            yield event.data.delta\n</code></pre>"},{"location":"ref/voice/workflow/#cai.sdk.agents.voice.workflow.SingleAgentWorkflowCallbacks","title":"SingleAgentWorkflowCallbacks","text":"Source code in <code>src/cai/sdk/agents/voice/workflow.py</code> <pre><code>class SingleAgentWorkflowCallbacks:\n    def on_run(self, workflow: SingleAgentVoiceWorkflow, transcription: str) -&gt; None:\n        \"\"\"Called when the workflow is run.\"\"\"\n        pass\n</code></pre>"},{"location":"ref/voice/workflow/#cai.sdk.agents.voice.workflow.SingleAgentWorkflowCallbacks.on_run","title":"on_run","text":"<pre><code>on_run(\n    workflow: SingleAgentVoiceWorkflow, transcription: str\n) -&gt; None\n</code></pre> <p>Called when the workflow is run.</p> Source code in <code>src/cai/sdk/agents/voice/workflow.py</code> <pre><code>def on_run(self, workflow: SingleAgentVoiceWorkflow, transcription: str) -&gt; None:\n    \"\"\"Called when the workflow is run.\"\"\"\n    pass\n</code></pre>"},{"location":"ref/voice/workflow/#cai.sdk.agents.voice.workflow.SingleAgentVoiceWorkflow","title":"SingleAgentVoiceWorkflow","text":"<p>               Bases: <code>VoiceWorkflowBase</code></p> <p>A simple voice workflow that runs a single agent. Each transcription and result is added to the input history. For more complex workflows (e.g. multiple Runner calls, custom message history, custom logic, custom configs), subclass <code>VoiceWorkflowBase</code> and implement your own logic.</p> Source code in <code>src/cai/sdk/agents/voice/workflow.py</code> <pre><code>class SingleAgentVoiceWorkflow(VoiceWorkflowBase):\n    \"\"\"A simple voice workflow that runs a single agent. Each transcription and result is added to\n    the input history.\n    For more complex workflows (e.g. multiple Runner calls, custom message history, custom logic,\n    custom configs), subclass `VoiceWorkflowBase` and implement your own logic.\n    \"\"\"\n\n    def __init__(self, agent: Agent[Any], callbacks: SingleAgentWorkflowCallbacks | None = None):\n        \"\"\"Create a new single agent voice workflow.\n\n        Args:\n            agent: The agent to run.\n            callbacks: Optional callbacks to call during the workflow.\n        \"\"\"\n        self._input_history: list[TResponseInputItem] = []\n        self._current_agent = agent\n        self._callbacks = callbacks\n\n    async def run(self, transcription: str) -&gt; AsyncIterator[str]:\n        if self._callbacks:\n            self._callbacks.on_run(self, transcription)\n\n        # Add the transcription to the input history\n        self._input_history.append(\n            {\n                \"role\": \"user\",\n                \"content\": transcription,\n            }\n        )\n\n        # Run the agent\n        result = Runner.run_streamed(self._current_agent, self._input_history)\n\n        # Stream the text from the result\n        async for chunk in VoiceWorkflowHelper.stream_text_from(result):\n            yield chunk\n\n        # Update the input history and current agent\n        self._input_history = result.to_input_list()\n        self._current_agent = result.last_agent\n</code></pre>"},{"location":"ref/voice/workflow/#cai.sdk.agents.voice.workflow.SingleAgentVoiceWorkflow.__init__","title":"__init__","text":"<pre><code>__init__(\n    agent: Agent[Any],\n    callbacks: SingleAgentWorkflowCallbacks | None = None,\n)\n</code></pre> <p>Create a new single agent voice workflow.</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>Agent[Any]</code> <p>The agent to run.</p> required <code>callbacks</code> <code>SingleAgentWorkflowCallbacks | None</code> <p>Optional callbacks to call during the workflow.</p> <code>None</code> Source code in <code>src/cai/sdk/agents/voice/workflow.py</code> <pre><code>def __init__(self, agent: Agent[Any], callbacks: SingleAgentWorkflowCallbacks | None = None):\n    \"\"\"Create a new single agent voice workflow.\n\n    Args:\n        agent: The agent to run.\n        callbacks: Optional callbacks to call during the workflow.\n    \"\"\"\n    self._input_history: list[TResponseInputItem] = []\n    self._current_agent = agent\n    self._callbacks = callbacks\n</code></pre>"},{"location":"ref/voice/models/openai_provider/","title":"<code>OpenAIVoiceModelProvider</code>","text":""},{"location":"ref/voice/models/openai_provider/#cai.sdk.agents.voice.models.openai_model_provider.OpenAIVoiceModelProvider","title":"OpenAIVoiceModelProvider","text":"<p>               Bases: <code>VoiceModelProvider</code></p> <p>A voice model provider that uses OpenAI models.</p> Source code in <code>src/cai/sdk/agents/voice/models/openai_model_provider.py</code> <pre><code>class OpenAIVoiceModelProvider(VoiceModelProvider):\n    \"\"\"A voice model provider that uses OpenAI models.\"\"\"\n\n    def __init__(\n        self,\n        *,\n        api_key: str | None = None,\n        base_url: str | None = None,\n        openai_client: AsyncOpenAI | None = None,\n        organization: str | None = None,\n        project: str | None = None,\n    ) -&gt; None:\n        \"\"\"Create a new OpenAI voice model provider.\n\n        Args:\n            api_key: The API key to use for the OpenAI client. If not provided, we will use the\n                default API key.\n            base_url: The base URL to use for the OpenAI client. If not provided, we will use the\n                default base URL.\n            openai_client: An optional OpenAI client to use. If not provided, we will create a new\n                OpenAI client using the api_key and base_url.\n            organization: The organization to use for the OpenAI client.\n            project: The project to use for the OpenAI client.\n        \"\"\"\n        if openai_client is not None:\n            assert api_key is None and base_url is None, (\n                \"Don't provide api_key or base_url if you provide openai_client\"\n            )\n            self._client: AsyncOpenAI | None = openai_client\n        else:\n            self._client = None\n            self._stored_api_key = api_key\n            self._stored_base_url = base_url\n            self._stored_organization = organization\n            self._stored_project = project\n\n    # We lazy load the client in case you never actually use OpenAIProvider(). Otherwise\n    # AsyncOpenAI() raises an error if you don't have an API key set.\n    def _get_client(self) -&gt; AsyncOpenAI:\n        if self._client is None:\n            self._client = _openai_shared.get_default_openai_client() or AsyncOpenAI(\n                api_key=self._stored_api_key or _openai_shared.get_default_openai_key(),\n                base_url=self._stored_base_url,\n                organization=self._stored_organization,\n                project=self._stored_project,\n                http_client=shared_http_client(),\n            )\n\n        return self._client\n\n    def get_stt_model(self, model_name: str | None) -&gt; STTModel:\n        \"\"\"Get a speech-to-text model by name.\n\n        Args:\n            model_name: The name of the model to get.\n\n        Returns:\n            The speech-to-text model.\n        \"\"\"\n        return OpenAISTTModel(model_name or DEFAULT_STT_MODEL, self._get_client())\n\n    def get_tts_model(self, model_name: str | None) -&gt; TTSModel:\n        \"\"\"Get a text-to-speech model by name.\n\n        Args:\n            model_name: The name of the model to get.\n\n        Returns:\n            The text-to-speech model.\n        \"\"\"\n        return OpenAITTSModel(model_name or DEFAULT_TTS_MODEL, self._get_client())\n</code></pre>"},{"location":"ref/voice/models/openai_provider/#cai.sdk.agents.voice.models.openai_model_provider.OpenAIVoiceModelProvider.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    api_key: str | None = None,\n    base_url: str | None = None,\n    openai_client: AsyncOpenAI | None = None,\n    organization: str | None = None,\n    project: str | None = None,\n) -&gt; None\n</code></pre> <p>Create a new OpenAI voice model provider.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str | None</code> <p>The API key to use for the OpenAI client. If not provided, we will use the default API key.</p> <code>None</code> <code>base_url</code> <code>str | None</code> <p>The base URL to use for the OpenAI client. If not provided, we will use the default base URL.</p> <code>None</code> <code>openai_client</code> <code>AsyncOpenAI | None</code> <p>An optional OpenAI client to use. If not provided, we will create a new OpenAI client using the api_key and base_url.</p> <code>None</code> <code>organization</code> <code>str | None</code> <p>The organization to use for the OpenAI client.</p> <code>None</code> <code>project</code> <code>str | None</code> <p>The project to use for the OpenAI client.</p> <code>None</code> Source code in <code>src/cai/sdk/agents/voice/models/openai_model_provider.py</code> <pre><code>def __init__(\n    self,\n    *,\n    api_key: str | None = None,\n    base_url: str | None = None,\n    openai_client: AsyncOpenAI | None = None,\n    organization: str | None = None,\n    project: str | None = None,\n) -&gt; None:\n    \"\"\"Create a new OpenAI voice model provider.\n\n    Args:\n        api_key: The API key to use for the OpenAI client. If not provided, we will use the\n            default API key.\n        base_url: The base URL to use for the OpenAI client. If not provided, we will use the\n            default base URL.\n        openai_client: An optional OpenAI client to use. If not provided, we will create a new\n            OpenAI client using the api_key and base_url.\n        organization: The organization to use for the OpenAI client.\n        project: The project to use for the OpenAI client.\n    \"\"\"\n    if openai_client is not None:\n        assert api_key is None and base_url is None, (\n            \"Don't provide api_key or base_url if you provide openai_client\"\n        )\n        self._client: AsyncOpenAI | None = openai_client\n    else:\n        self._client = None\n        self._stored_api_key = api_key\n        self._stored_base_url = base_url\n        self._stored_organization = organization\n        self._stored_project = project\n</code></pre>"},{"location":"ref/voice/models/openai_provider/#cai.sdk.agents.voice.models.openai_model_provider.OpenAIVoiceModelProvider.get_stt_model","title":"get_stt_model","text":"<pre><code>get_stt_model(model_name: str | None) -&gt; STTModel\n</code></pre> <p>Get a speech-to-text model by name.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str | None</code> <p>The name of the model to get.</p> required <p>Returns:</p> Type Description <code>STTModel</code> <p>The speech-to-text model.</p> Source code in <code>src/cai/sdk/agents/voice/models/openai_model_provider.py</code> <pre><code>def get_stt_model(self, model_name: str | None) -&gt; STTModel:\n    \"\"\"Get a speech-to-text model by name.\n\n    Args:\n        model_name: The name of the model to get.\n\n    Returns:\n        The speech-to-text model.\n    \"\"\"\n    return OpenAISTTModel(model_name or DEFAULT_STT_MODEL, self._get_client())\n</code></pre>"},{"location":"ref/voice/models/openai_provider/#cai.sdk.agents.voice.models.openai_model_provider.OpenAIVoiceModelProvider.get_tts_model","title":"get_tts_model","text":"<pre><code>get_tts_model(model_name: str | None) -&gt; TTSModel\n</code></pre> <p>Get a text-to-speech model by name.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str | None</code> <p>The name of the model to get.</p> required <p>Returns:</p> Type Description <code>TTSModel</code> <p>The text-to-speech model.</p> Source code in <code>src/cai/sdk/agents/voice/models/openai_model_provider.py</code> <pre><code>def get_tts_model(self, model_name: str | None) -&gt; TTSModel:\n    \"\"\"Get a text-to-speech model by name.\n\n    Args:\n        model_name: The name of the model to get.\n\n    Returns:\n        The text-to-speech model.\n    \"\"\"\n    return OpenAITTSModel(model_name or DEFAULT_TTS_MODEL, self._get_client())\n</code></pre>"},{"location":"ref/voice/models/openai_stt/","title":"<code>OpenAI STT</code>","text":""},{"location":"ref/voice/models/openai_stt/#cai.sdk.agents.voice.models.openai_stt.OpenAISTTTranscriptionSession","title":"OpenAISTTTranscriptionSession","text":"<p>               Bases: <code>StreamedTranscriptionSession</code></p> <p>A transcription session for OpenAI's STT model.</p> Source code in <code>src/cai/sdk/agents/voice/models/openai_stt.py</code> <pre><code>class OpenAISTTTranscriptionSession(StreamedTranscriptionSession):\n    \"\"\"A transcription session for OpenAI's STT model.\"\"\"\n\n    def __init__(\n        self,\n        input: StreamedAudioInput,\n        client: AsyncOpenAI,\n        model: str,\n        settings: STTModelSettings,\n        trace_include_sensitive_data: bool,\n        trace_include_sensitive_audio_data: bool,\n    ):\n        self.connected: bool = False\n        self._client = client\n        self._model = model\n        self._settings = settings\n        self._turn_detection = settings.turn_detection or DEFAULT_TURN_DETECTION\n        self._trace_include_sensitive_data = trace_include_sensitive_data\n        self._trace_include_sensitive_audio_data = trace_include_sensitive_audio_data\n\n        self._input_queue: asyncio.Queue[npt.NDArray[np.int16 | np.float32]] = input.queue\n        self._output_queue: asyncio.Queue[str | ErrorSentinel | SessionCompleteSentinel] = (\n            asyncio.Queue()\n        )\n        self._websocket: websockets.ClientConnection | None = None\n        self._event_queue: asyncio.Queue[dict[str, Any] | WebsocketDoneSentinel] = asyncio.Queue()\n        self._state_queue: asyncio.Queue[dict[str, Any]] = asyncio.Queue()\n        self._turn_audio_buffer: list[npt.NDArray[np.int16 | np.float32]] = []\n        self._tracing_span: Span[TranscriptionSpanData] | None = None\n\n        # tasks\n        self._listener_task: asyncio.Task[Any] | None = None\n        self._process_events_task: asyncio.Task[Any] | None = None\n        self._stream_audio_task: asyncio.Task[Any] | None = None\n        self._connection_task: asyncio.Task[Any] | None = None\n        self._stored_exception: Exception | None = None\n\n    def _start_turn(self) -&gt; None:\n        self._tracing_span = transcription_span(\n            model=self._model,\n            model_config={\n                \"temperature\": self._settings.temperature,\n                \"language\": self._settings.language,\n                \"prompt\": self._settings.prompt,\n                \"turn_detection\": self._turn_detection,\n            },\n        )\n        self._tracing_span.start()\n\n    def _end_turn(self, _transcript: str) -&gt; None:\n        if len(_transcript) &lt; 1:\n            return\n\n        if self._tracing_span:\n            if self._trace_include_sensitive_audio_data:\n                self._tracing_span.span_data.input = _audio_to_base64(self._turn_audio_buffer)\n\n            self._tracing_span.span_data.input_format = \"pcm\"\n\n            if self._trace_include_sensitive_data:\n                self._tracing_span.span_data.output = _transcript\n\n            self._tracing_span.finish()\n            self._turn_audio_buffer = []\n            self._tracing_span = None\n\n    async def _event_listener(self) -&gt; None:\n        assert self._websocket is not None, \"Websocket not initialized\"\n\n        async for message in self._websocket:\n            try:\n                event = json.loads(message)\n\n                if event.get(\"type\") == \"error\":\n                    raise STTWebsocketConnectionError(f\"Error event: {event.get('error')}\")\n\n                if event.get(\"type\") in [\n                    \"session.updated\",\n                    \"transcription_session.updated\",\n                    \"session.created\",\n                    \"transcription_session.created\",\n                ]:\n                    await self._state_queue.put(event)\n\n                await self._event_queue.put(event)\n            except Exception as e:\n                await self._output_queue.put(ErrorSentinel(e))\n                raise STTWebsocketConnectionError(\"Error parsing events\") from e\n        await self._event_queue.put(WebsocketDoneSentinel())\n\n    async def _configure_session(self) -&gt; None:\n        assert self._websocket is not None, \"Websocket not initialized\"\n        await self._websocket.send(\n            json.dumps(\n                {\n                    \"type\": \"transcription_session.update\",\n                    \"session\": {\n                        \"input_audio_format\": \"pcm16\",\n                        \"input_audio_transcription\": {\"model\": self._model},\n                        \"turn_detection\": self._turn_detection,\n                    },\n                }\n            )\n        )\n\n    async def _setup_connection(self, ws: websockets.ClientConnection) -&gt; None:\n        self._websocket = ws\n        self._listener_task = asyncio.create_task(self._event_listener())\n\n        try:\n            event = await _wait_for_event(\n                self._state_queue,\n                [\"session.created\", \"transcription_session.created\"],\n                SESSION_CREATION_TIMEOUT,\n            )\n        except TimeoutError as e:\n            wrapped_err = STTWebsocketConnectionError(\n                \"Timeout waiting for transcription_session.created event\"\n            )\n            await self._output_queue.put(ErrorSentinel(wrapped_err))\n            raise wrapped_err from e\n        except Exception as e:\n            await self._output_queue.put(ErrorSentinel(e))\n            raise e\n\n        await self._configure_session()\n\n        try:\n            event = await _wait_for_event(\n                self._state_queue,\n                [\"session.updated\", \"transcription_session.updated\"],\n                SESSION_UPDATE_TIMEOUT,\n            )\n            if _debug.DONT_LOG_MODEL_DATA:\n                logger.debug(\"Session updated\")\n            else:\n                logger.debug(f\"Session updated: {event}\")\n        except TimeoutError as e:\n            wrapped_err = STTWebsocketConnectionError(\n                \"Timeout waiting for transcription_session.updated event\"\n            )\n            await self._output_queue.put(ErrorSentinel(wrapped_err))\n            raise wrapped_err from e\n        except Exception as e:\n            await self._output_queue.put(ErrorSentinel(e))\n            raise\n\n    async def _handle_events(self) -&gt; None:\n        while True:\n            try:\n                event = await asyncio.wait_for(\n                    self._event_queue.get(), timeout=EVENT_INACTIVITY_TIMEOUT\n                )\n                if isinstance(event, WebsocketDoneSentinel):\n                    # processed all events and websocket is done\n                    break\n\n                event_type = event.get(\"type\", \"unknown\")\n                if event_type == \"conversation.item.input_audio_transcription.completed\":\n                    transcript = cast(str, event.get(\"transcript\", \"\"))\n                    if len(transcript) &gt; 0:\n                        self._end_turn(transcript)\n                        self._start_turn()\n                        await self._output_queue.put(transcript)\n                await asyncio.sleep(0)  # yield control\n            except asyncio.TimeoutError:\n                # No new events for a while. Assume the session is done.\n                break\n            except Exception as e:\n                await self._output_queue.put(ErrorSentinel(e))\n                raise e\n        await self._output_queue.put(SessionCompleteSentinel())\n\n    async def _stream_audio(\n        self, audio_queue: asyncio.Queue[npt.NDArray[np.int16 | np.float32]]\n    ) -&gt; None:\n        assert self._websocket is not None, \"Websocket not initialized\"\n        self._start_turn()\n        while True:\n            buffer = await audio_queue.get()\n            if buffer is None:\n                break\n\n            self._turn_audio_buffer.append(buffer)\n            try:\n                await self._websocket.send(\n                    json.dumps(\n                        {\n                            \"type\": \"input_audio_buffer.append\",\n                            \"audio\": base64.b64encode(buffer.tobytes()).decode(\"utf-8\"),\n                        }\n                    )\n                )\n            except websockets.ConnectionClosed:\n                break\n            except Exception as e:\n                await self._output_queue.put(ErrorSentinel(e))\n                raise e\n\n            await asyncio.sleep(0)  # yield control\n\n    async def _process_websocket_connection(self) -&gt; None:\n        try:\n            async with websockets.connect(\n                \"wss://api.openai.com/v1/realtime?intent=transcription\",\n                additional_headers={\n                    \"Authorization\": f\"Bearer {self._client.api_key}\",\n                    \"OpenAI-Beta\": \"realtime=v1\",\n                    \"OpenAI-Log-Session\": \"1\",\n                },\n            ) as ws:\n                await self._setup_connection(ws)\n                self._process_events_task = asyncio.create_task(self._handle_events())\n                self._stream_audio_task = asyncio.create_task(self._stream_audio(self._input_queue))\n                self.connected = True\n                if self._listener_task:\n                    await self._listener_task\n                else:\n                    logger.error(\"Listener task not initialized\")\n                    raise AgentsException(\"Listener task not initialized\")\n        except Exception as e:\n            await self._output_queue.put(ErrorSentinel(e))\n            raise e\n\n    def _check_errors(self) -&gt; None:\n        if self._connection_task and self._connection_task.done():\n            exc = self._connection_task.exception()\n            if exc and isinstance(exc, Exception):\n                self._stored_exception = exc\n\n        if self._process_events_task and self._process_events_task.done():\n            exc = self._process_events_task.exception()\n            if exc and isinstance(exc, Exception):\n                self._stored_exception = exc\n\n        if self._stream_audio_task and self._stream_audio_task.done():\n            exc = self._stream_audio_task.exception()\n            if exc and isinstance(exc, Exception):\n                self._stored_exception = exc\n\n        if self._listener_task and self._listener_task.done():\n            exc = self._listener_task.exception()\n            if exc and isinstance(exc, Exception):\n                self._stored_exception = exc\n\n    def _cleanup_tasks(self) -&gt; None:\n        if self._listener_task and not self._listener_task.done():\n            self._listener_task.cancel()\n\n        if self._process_events_task and not self._process_events_task.done():\n            self._process_events_task.cancel()\n\n        if self._stream_audio_task and not self._stream_audio_task.done():\n            self._stream_audio_task.cancel()\n\n        if self._connection_task and not self._connection_task.done():\n            self._connection_task.cancel()\n\n    async def transcribe_turns(self) -&gt; AsyncIterator[str]:\n        self._connection_task = asyncio.create_task(self._process_websocket_connection())\n\n        while True:\n            try:\n                turn = await self._output_queue.get()\n            except asyncio.CancelledError:\n                break\n\n            if (\n                turn is None\n                or isinstance(turn, ErrorSentinel)\n                or isinstance(turn, SessionCompleteSentinel)\n            ):\n                self._output_queue.task_done()\n                break\n            yield turn\n            self._output_queue.task_done()\n\n        if self._tracing_span:\n            self._end_turn(\"\")\n\n        if self._websocket:\n            await self._websocket.close()\n\n        self._check_errors()\n        if self._stored_exception:\n            raise self._stored_exception\n\n    async def close(self) -&gt; None:\n        if self._websocket:\n            await self._websocket.close()\n\n        self._cleanup_tasks()\n</code></pre>"},{"location":"ref/voice/models/openai_stt/#cai.sdk.agents.voice.models.openai_stt.OpenAISTTModel","title":"OpenAISTTModel","text":"<p>               Bases: <code>STTModel</code></p> <p>A speech-to-text model for OpenAI.</p> Source code in <code>src/cai/sdk/agents/voice/models/openai_stt.py</code> <pre><code>class OpenAISTTModel(STTModel):\n    \"\"\"A speech-to-text model for OpenAI.\"\"\"\n\n    def __init__(\n        self,\n        model: str,\n        openai_client: AsyncOpenAI,\n    ):\n        \"\"\"Create a new OpenAI speech-to-text model.\n\n        Args:\n            model: The name of the model to use.\n            openai_client: The OpenAI client to use.\n        \"\"\"\n        self.model = model\n        self._client = openai_client\n\n    @property\n    def model_name(self) -&gt; str:\n        return self.model\n\n    def _non_null_or_not_given(self, value: Any) -&gt; Any:\n        return value if value is not None else None  # NOT_GIVEN\n\n    async def transcribe(\n        self,\n        input: AudioInput,\n        settings: STTModelSettings,\n        trace_include_sensitive_data: bool,\n        trace_include_sensitive_audio_data: bool,\n    ) -&gt; str:\n        \"\"\"Transcribe an audio input.\n\n        Args:\n            input: The audio input to transcribe.\n            settings: The settings to use for the transcription.\n\n        Returns:\n            The transcribed text.\n        \"\"\"\n        with transcription_span(\n            model=self.model,\n            input=input.to_base64() if trace_include_sensitive_audio_data else \"\",\n            input_format=\"pcm\",\n            model_config={\n                \"temperature\": self._non_null_or_not_given(settings.temperature),\n                \"language\": self._non_null_or_not_given(settings.language),\n                \"prompt\": self._non_null_or_not_given(settings.prompt),\n            },\n        ) as span:\n            try:\n                response = await self._client.audio.transcriptions.create(\n                    model=self.model,\n                    file=input.to_audio_file(),\n                    prompt=self._non_null_or_not_given(settings.prompt),\n                    language=self._non_null_or_not_given(settings.language),\n                    temperature=self._non_null_or_not_given(settings.temperature),\n                )\n                if trace_include_sensitive_data:\n                    span.span_data.output = response.text\n                return response.text\n            except Exception as e:\n                span.span_data.output = \"\"\n                span.set_error(SpanError(message=str(e), data={}))\n                raise e\n\n    async def create_session(\n        self,\n        input: StreamedAudioInput,\n        settings: STTModelSettings,\n        trace_include_sensitive_data: bool,\n        trace_include_sensitive_audio_data: bool,\n    ) -&gt; StreamedTranscriptionSession:\n        \"\"\"Create a new transcription session.\n\n        Args:\n            input: The audio input to transcribe.\n            settings: The settings to use for the transcription.\n            trace_include_sensitive_data: Whether to include sensitive data in traces.\n            trace_include_sensitive_audio_data: Whether to include sensitive audio data in traces.\n\n        Returns:\n            A new transcription session.\n        \"\"\"\n        return OpenAISTTTranscriptionSession(\n            input,\n            self._client,\n            self.model,\n            settings,\n            trace_include_sensitive_data,\n            trace_include_sensitive_audio_data,\n        )\n</code></pre>"},{"location":"ref/voice/models/openai_stt/#cai.sdk.agents.voice.models.openai_stt.OpenAISTTModel.__init__","title":"__init__","text":"<pre><code>__init__(model: str, openai_client: AsyncOpenAI)\n</code></pre> <p>Create a new OpenAI speech-to-text model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>The name of the model to use.</p> required <code>openai_client</code> <code>AsyncOpenAI</code> <p>The OpenAI client to use.</p> required Source code in <code>src/cai/sdk/agents/voice/models/openai_stt.py</code> <pre><code>def __init__(\n    self,\n    model: str,\n    openai_client: AsyncOpenAI,\n):\n    \"\"\"Create a new OpenAI speech-to-text model.\n\n    Args:\n        model: The name of the model to use.\n        openai_client: The OpenAI client to use.\n    \"\"\"\n    self.model = model\n    self._client = openai_client\n</code></pre>"},{"location":"ref/voice/models/openai_stt/#cai.sdk.agents.voice.models.openai_stt.OpenAISTTModel.transcribe","title":"transcribe  <code>async</code>","text":"<pre><code>transcribe(\n    input: AudioInput,\n    settings: STTModelSettings,\n    trace_include_sensitive_data: bool,\n    trace_include_sensitive_audio_data: bool,\n) -&gt; str\n</code></pre> <p>Transcribe an audio input.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>AudioInput</code> <p>The audio input to transcribe.</p> required <code>settings</code> <code>STTModelSettings</code> <p>The settings to use for the transcription.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The transcribed text.</p> Source code in <code>src/cai/sdk/agents/voice/models/openai_stt.py</code> <pre><code>async def transcribe(\n    self,\n    input: AudioInput,\n    settings: STTModelSettings,\n    trace_include_sensitive_data: bool,\n    trace_include_sensitive_audio_data: bool,\n) -&gt; str:\n    \"\"\"Transcribe an audio input.\n\n    Args:\n        input: The audio input to transcribe.\n        settings: The settings to use for the transcription.\n\n    Returns:\n        The transcribed text.\n    \"\"\"\n    with transcription_span(\n        model=self.model,\n        input=input.to_base64() if trace_include_sensitive_audio_data else \"\",\n        input_format=\"pcm\",\n        model_config={\n            \"temperature\": self._non_null_or_not_given(settings.temperature),\n            \"language\": self._non_null_or_not_given(settings.language),\n            \"prompt\": self._non_null_or_not_given(settings.prompt),\n        },\n    ) as span:\n        try:\n            response = await self._client.audio.transcriptions.create(\n                model=self.model,\n                file=input.to_audio_file(),\n                prompt=self._non_null_or_not_given(settings.prompt),\n                language=self._non_null_or_not_given(settings.language),\n                temperature=self._non_null_or_not_given(settings.temperature),\n            )\n            if trace_include_sensitive_data:\n                span.span_data.output = response.text\n            return response.text\n        except Exception as e:\n            span.span_data.output = \"\"\n            span.set_error(SpanError(message=str(e), data={}))\n            raise e\n</code></pre>"},{"location":"ref/voice/models/openai_stt/#cai.sdk.agents.voice.models.openai_stt.OpenAISTTModel.create_session","title":"create_session  <code>async</code>","text":"<pre><code>create_session(\n    input: StreamedAudioInput,\n    settings: STTModelSettings,\n    trace_include_sensitive_data: bool,\n    trace_include_sensitive_audio_data: bool,\n) -&gt; StreamedTranscriptionSession\n</code></pre> <p>Create a new transcription session.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>StreamedAudioInput</code> <p>The audio input to transcribe.</p> required <code>settings</code> <code>STTModelSettings</code> <p>The settings to use for the transcription.</p> required <code>trace_include_sensitive_data</code> <code>bool</code> <p>Whether to include sensitive data in traces.</p> required <code>trace_include_sensitive_audio_data</code> <code>bool</code> <p>Whether to include sensitive audio data in traces.</p> required <p>Returns:</p> Type Description <code>StreamedTranscriptionSession</code> <p>A new transcription session.</p> Source code in <code>src/cai/sdk/agents/voice/models/openai_stt.py</code> <pre><code>async def create_session(\n    self,\n    input: StreamedAudioInput,\n    settings: STTModelSettings,\n    trace_include_sensitive_data: bool,\n    trace_include_sensitive_audio_data: bool,\n) -&gt; StreamedTranscriptionSession:\n    \"\"\"Create a new transcription session.\n\n    Args:\n        input: The audio input to transcribe.\n        settings: The settings to use for the transcription.\n        trace_include_sensitive_data: Whether to include sensitive data in traces.\n        trace_include_sensitive_audio_data: Whether to include sensitive audio data in traces.\n\n    Returns:\n        A new transcription session.\n    \"\"\"\n    return OpenAISTTTranscriptionSession(\n        input,\n        self._client,\n        self.model,\n        settings,\n        trace_include_sensitive_data,\n        trace_include_sensitive_audio_data,\n    )\n</code></pre>"},{"location":"ref/voice/models/openai_tts/","title":"<code>OpenAI TTS</code>","text":""},{"location":"ref/voice/models/openai_tts/#cai.sdk.agents.voice.models.openai_tts.OpenAITTSModel","title":"OpenAITTSModel","text":"<p>               Bases: <code>TTSModel</code></p> <p>A text-to-speech model for OpenAI.</p> Source code in <code>src/cai/sdk/agents/voice/models/openai_tts.py</code> <pre><code>class OpenAITTSModel(TTSModel):\n    \"\"\"A text-to-speech model for OpenAI.\"\"\"\n\n    def __init__(\n        self,\n        model: str,\n        openai_client: AsyncOpenAI,\n    ):\n        \"\"\"Create a new OpenAI text-to-speech model.\n\n        Args:\n            model: The name of the model to use.\n            openai_client: The OpenAI client to use.\n        \"\"\"\n        self.model = model\n        self._client = openai_client\n\n    @property\n    def model_name(self) -&gt; str:\n        return self.model\n\n    async def run(self, text: str, settings: TTSModelSettings) -&gt; AsyncIterator[bytes]:\n        \"\"\"Run the text-to-speech model.\n\n        Args:\n            text: The text to convert to speech.\n            settings: The settings to use for the text-to-speech model.\n\n        Returns:\n            An iterator of audio chunks.\n        \"\"\"\n        response = self._client.audio.speech.with_streaming_response.create(\n            model=self.model,\n            voice=settings.voice or DEFAULT_VOICE,\n            input=text,\n            response_format=\"pcm\",\n            extra_body={\n                \"instructions\": settings.instructions,\n            },\n        )\n\n        async with response as stream:\n            async for chunk in stream.iter_bytes(chunk_size=1024):\n                yield chunk\n</code></pre>"},{"location":"ref/voice/models/openai_tts/#cai.sdk.agents.voice.models.openai_tts.OpenAITTSModel.__init__","title":"__init__","text":"<pre><code>__init__(model: str, openai_client: AsyncOpenAI)\n</code></pre> <p>Create a new OpenAI text-to-speech model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>The name of the model to use.</p> required <code>openai_client</code> <code>AsyncOpenAI</code> <p>The OpenAI client to use.</p> required Source code in <code>src/cai/sdk/agents/voice/models/openai_tts.py</code> <pre><code>def __init__(\n    self,\n    model: str,\n    openai_client: AsyncOpenAI,\n):\n    \"\"\"Create a new OpenAI text-to-speech model.\n\n    Args:\n        model: The name of the model to use.\n        openai_client: The OpenAI client to use.\n    \"\"\"\n    self.model = model\n    self._client = openai_client\n</code></pre>"},{"location":"ref/voice/models/openai_tts/#cai.sdk.agents.voice.models.openai_tts.OpenAITTSModel.run","title":"run  <code>async</code>","text":"<pre><code>run(\n    text: str, settings: TTSModelSettings\n) -&gt; AsyncIterator[bytes]\n</code></pre> <p>Run the text-to-speech model.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to convert to speech.</p> required <code>settings</code> <code>TTSModelSettings</code> <p>The settings to use for the text-to-speech model.</p> required <p>Returns:</p> Type Description <code>AsyncIterator[bytes]</code> <p>An iterator of audio chunks.</p> Source code in <code>src/cai/sdk/agents/voice/models/openai_tts.py</code> <pre><code>async def run(self, text: str, settings: TTSModelSettings) -&gt; AsyncIterator[bytes]:\n    \"\"\"Run the text-to-speech model.\n\n    Args:\n        text: The text to convert to speech.\n        settings: The settings to use for the text-to-speech model.\n\n    Returns:\n        An iterator of audio chunks.\n    \"\"\"\n    response = self._client.audio.speech.with_streaming_response.create(\n        model=self.model,\n        voice=settings.voice or DEFAULT_VOICE,\n        input=text,\n        response_format=\"pcm\",\n        extra_body={\n            \"instructions\": settings.instructions,\n        },\n    )\n\n    async with response as stream:\n        async for chunk in stream.iter_bytes(chunk_size=1024):\n            yield chunk\n</code></pre>"},{"location":"voice/pipeline/","title":"Pipelines and workflows","text":"<p><code>VoicePipeline</code> is a class that makes it easy to turn your agentic workflows into a voice app. You pass in a workflow to run, and the pipeline takes care of transcribing input audio, detecting when the audio ends, calling your workflow at the right time, and turning the workflow output back into audio.</p> <p>```mermaid graph LR     %% Input     A[\"\ud83c\udfa4 Audio Input\"]</p> <pre><code>%% Voice Pipeline\nsubgraph Voice_Pipeline [Voice Pipeline]\n    direction TB\n    B[\"Transcribe (speech-to-text)\"]\n    C[\"Your Code\"]:::highlight\n    D[\"Text-to-speech\"]\n    B --&gt; C --&gt; D\nend\n\n%% Output\nE[\"\ud83c\udfa7 Audio Output\"]\n\n%% Flow\nA --&gt; Voice_Pipeline\nVoice_Pipeline --&gt; E\n\n%% Custom styling\nclassDef highlight fill:#ffcc66,stroke:#333,stroke-width:1px,font-weight:700;\n</code></pre> <p>```</p>"},{"location":"voice/pipeline/#configuring-a-pipeline","title":"Configuring a pipeline","text":"<p>When you create a pipeline, you can set a few things:</p> <ol> <li>The <code>workflow</code>, which is the code that runs each time new audio is transcribed.</li> <li>The <code>speech-to-text</code> and <code>text-to-speech</code> models used</li> <li>The <code>config</code>, which lets you configure things like:<ul> <li>A model provider, which can map model names to models</li> <li>Tracing, including whether to disable tracing, whether audio files are uploaded, the workflow name, trace IDs etc.</li> <li>Settings on the TTS and STT models, like the prompt, language and data types used.</li> </ul> </li> </ol>"},{"location":"voice/pipeline/#running-a-pipeline","title":"Running a pipeline","text":"<p>You can run a pipeline via the <code>run()</code> method, which lets you pass in audio input in two forms:</p> <ol> <li><code>AudioInput</code> is used when you have a full audio transcript, and just want to produce a result for it. This is useful in cases where you don't need to detect when a speaker is done speaking; for example, when you have pre-recorded audio or in push-to-talk apps where it's clear when the user is done speaking.</li> <li><code>StreamedAudioInput</code> is used when you might need to detect when a user is done speaking. It allows you to push audio chunks as they are detected, and the voice pipeline will automatically run the agent workflow at the right time, via a process called \"activity detection\".</li> </ol>"},{"location":"voice/pipeline/#results","title":"Results","text":"<p>The result of a voice pipeline run is a <code>StreamedAudioResult</code>. This is an object that lets you stream events as they occur. There are a few kinds of <code>VoiceStreamEvent</code>, including:</p> <ol> <li><code>VoiceStreamEventAudio</code>, which contains a chunk of audio.</li> <li><code>VoiceStreamEventLifecycle</code>, which informs you of lifecycle events like a turn starting or ending.</li> <li><code>VoiceStreamEventError</code>, is an error event.</li> </ol> <pre><code>result = await pipeline.run(input)\n\nasync for event in result.stream():\n    if event.type == \"voice_stream_event_audio\":\n        # play audio\n    elif event.type == \"voice_stream_event_lifecycle\":\n        # lifecycle\n    elif event.type == \"voice_stream_event_error\"\n        # error\n    ...\n</code></pre>"},{"location":"voice/pipeline/#best-practices","title":"Best practices","text":""},{"location":"voice/pipeline/#interruptions","title":"Interruptions","text":"<p>The Agents SDK currently does not support any built-in interruptions support for <code>StreamedAudioInput</code>. Instead for every detected turn it will trigger a separate run of your workflow. If you want to handle interruptions inside your application you can listen to the <code>VoiceStreamEventLifecycle</code> events. <code>turn_started</code> will indicate that a new turn was transcribed and processing is beginning. <code>turn_ended</code> will trigger after all the audio was dispatched for a respective turn. You could use these events to mute the microphone of the speaker when the model starts a turn and unmute it after you flushed all the related audio for a turn.</p>"},{"location":"voice/quickstart/","title":"Quickstart","text":""},{"location":"voice/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Make sure you've followed the base quickstart instructions for the Agents SDK, and set up a virtual environment. Then, install the optional voice dependencies from the SDK:</p> <pre><code>pip install 'openai-agents[voice]'\n</code></pre>"},{"location":"voice/quickstart/#concepts","title":"Concepts","text":"<p>The main concept to know about is a <code>VoicePipeline</code>, which is a 3 step process:</p> <ol> <li>Run a speech-to-text model to turn audio into text.</li> <li>Run your code, which is usually an agentic workflow, to produce a result.</li> <li>Run a text-to-speech model to turn the result text back into audio.</li> </ol> <p>```mermaid graph LR     %% Input     A[\"\ud83c\udfa4 Audio Input\"]</p> <pre><code>%% Voice Pipeline\nsubgraph Voice_Pipeline [Voice Pipeline]\n    direction TB\n    B[\"Transcribe (speech-to-text)\"]\n    C[\"Your Code\"]:::highlight\n    D[\"Text-to-speech\"]\n    B --&gt; C --&gt; D\nend\n\n%% Output\nE[\"\ud83c\udfa7 Audio Output\"]\n\n%% Flow\nA --&gt; Voice_Pipeline\nVoice_Pipeline --&gt; E\n\n%% Custom styling\nclassDef highlight fill:#ffcc66,stroke:#333,stroke-width:1px,font-weight:700;\n</code></pre> <p>```</p>"},{"location":"voice/quickstart/#agents","title":"Agents","text":"<p>First, let's set up some Agents. This should feel familiar to you if you've built any agents with this SDK. We'll have a couple of Agents, a handoff, and a tool.</p> <pre><code>import asyncio\nimport random\n\nfrom cai.sdk.agents import (\n    Agent,\n    function_tool,\n)\nfrom agents.extensions.handoff_prompt import prompt_with_handoff_instructions\n\n\n\n@function_tool\ndef get_weather(city: str) -&gt; str:\n    \"\"\"Get the weather for a given city.\"\"\"\n    print(f\"[debug] get_weather called with city: {city}\")\n    choices = [\"sunny\", \"cloudy\", \"rainy\", \"snowy\"]\n    return f\"The weather in {city} is {random.choice(choices)}.\"\n\n\nspanish_agent = Agent(\n    name=\"Spanish\",\n    handoff_description=\"A spanish speaking agent.\",\n    instructions=prompt_with_handoff_instructions(\n        \"You're speaking to a human, so be polite and concise. Speak in Spanish.\",\n    ),\n    model=\"gpt-4o-mini\",\n)\n\nagent = Agent(\n    name=\"Assistant\",\n    instructions=prompt_with_handoff_instructions(\n        \"You're speaking to a human, so be polite and concise. If the user speaks in Spanish, handoff to the spanish agent.\",\n    ),\n    model=\"gpt-4o-mini\",\n    handoffs=[spanish_agent],\n    tools=[get_weather],\n)\n</code></pre>"},{"location":"voice/quickstart/#voice-pipeline","title":"Voice pipeline","text":"<p>We'll set up a simple voice pipeline, using <code>SingleAgentVoiceWorkflow</code> as the workflow.</p> <pre><code>from agents.voice import SingleAgentVoiceWorkflow, VoicePipeline\npipeline = VoicePipeline(workflow=SingleAgentVoiceWorkflow(agent))\n</code></pre>"},{"location":"voice/quickstart/#run-the-pipeline","title":"Run the pipeline","text":"<pre><code>import numpy as np\nimport sounddevice as sd\nfrom agents.voice import AudioInput\n\n# For simplicity, we'll just create 3 seconds of silence\n# In reality, you'd get microphone data\nbuffer = np.zeros(24000 * 3, dtype=np.int16)\naudio_input = AudioInput(buffer=buffer)\n\nresult = await pipeline.run(audio_input)\n\n# Create an audio player using `sounddevice`\nplayer = sd.OutputStream(samplerate=24000, channels=1, dtype=np.int16)\nplayer.start()\n\n# Play the audio stream as it comes in\nasync for event in result.stream():\n    if event.type == \"voice_stream_event_audio\":\n        player.write(event.data)\n</code></pre>"},{"location":"voice/quickstart/#put-it-all-together","title":"Put it all together","text":"<pre><code>import asyncio\nimport random\n\nimport numpy as np\nimport sounddevice as sd\n\nfrom cai.sdk.agents import (\n    Agent,\n    function_tool,\n    set_tracing_disabled,\n)\nfrom agents.voice import (\n    AudioInput,\n    SingleAgentVoiceWorkflow,\n    VoicePipeline,\n)\nfrom agents.extensions.handoff_prompt import prompt_with_handoff_instructions\n\n\n@function_tool\ndef get_weather(city: str) -&gt; str:\n    \"\"\"Get the weather for a given city.\"\"\"\n    print(f\"[debug] get_weather called with city: {city}\")\n    choices = [\"sunny\", \"cloudy\", \"rainy\", \"snowy\"]\n    return f\"The weather in {city} is {random.choice(choices)}.\"\n\n\nspanish_agent = Agent(\n    name=\"Spanish\",\n    handoff_description=\"A spanish speaking agent.\",\n    instructions=prompt_with_handoff_instructions(\n        \"You're speaking to a human, so be polite and concise. Speak in Spanish.\",\n    ),\n    model=\"gpt-4o-mini\",\n)\n\nagent = Agent(\n    name=\"Assistant\",\n    instructions=prompt_with_handoff_instructions(\n        \"You're speaking to a human, so be polite and concise. If the user speaks in Spanish, handoff to the spanish agent.\",\n    ),\n    model=\"gpt-4o-mini\",\n    handoffs=[spanish_agent],\n    tools=[get_weather],\n)\n\n\nasync def main():\n    pipeline = VoicePipeline(workflow=SingleAgentVoiceWorkflow(agent))\n    buffer = np.zeros(24000 * 3, dtype=np.int16)\n    audio_input = AudioInput(buffer=buffer)\n\n    result = await pipeline.run(audio_input)\n\n    # Create an audio player using `sounddevice`\n    player = sd.OutputStream(samplerate=24000, channels=1, dtype=np.int16)\n    player.start()\n\n    # Play the audio stream as it comes in\n    async for event in result.stream():\n        if event.type == \"voice_stream_event_audio\":\n            player.write(event.data)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>If you run this example, the agent will speak to you! Check out the example in examples/voice/static to see a demo where you can speak to the agent yourself.</p>"},{"location":"voice/tracing/","title":"Tracing","text":"<p>Just like the way agents are traced, voice pipelines are also automatically traced.</p> <p>You can read the tracing doc above for basic tracing information, but you can additionally configure tracing of a pipeline via <code>VoicePipelineConfig</code>.</p> <p>Key tracing related fields are:</p> <ul> <li><code>tracing_disabled</code>: controls whether tracing is disabled. By default, tracing is enabled.</li> <li><code>trace_include_sensitive_data</code>: controls whether traces include potentially sensitive data, like audio transcripts. This is specifically for the voice pipeline, and not for anything that goes on inside your Workflow.</li> <li><code>trace_include_sensitive_audio_data</code>: controls whether traces include audio data.</li> <li><code>workflow_name</code>: The name of the trace workflow.</li> <li><code>group_id</code>: The <code>group_id</code> of the trace, which lets you link multiple traces.</li> <li><code>trace_metadata</code>: Additional metadata to include with the trace.</li> </ul>"}]}